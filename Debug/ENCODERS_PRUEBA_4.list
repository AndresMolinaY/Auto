
ENCODERS_PRUEBA_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d9c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f14  08005f14  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08005f14  08005f14  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005f14  08005f14  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f14  08005f14  00015f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000080  08005f9c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08005f9c  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9cd  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c11  00000000  00000000  0002fa76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  00032510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e52  00000000  00000000  00033318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001038f  00000000  00000000  0004b16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008da60  00000000  00000000  0005b4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e8f59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000e8fac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000080 	.word	0x20000080
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e94 	.word	0x08005e94

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000084 	.word	0x20000084
 800014c:	08005e94 	.word	0x08005e94

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpun>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f80:	d102      	bne.n	8000f88 <__aeabi_fcmpun+0x14>
 8000f82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f86:	d108      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_fcmpun+0x20>
 8000f8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f92:	d102      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0001 	mov.w	r0, #1
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2iz>:
 8000fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30f      	bcc.n	8000fca <__aeabi_f2iz+0x2a>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d90d      	bls.n	8000fd0 <__aeabi_f2iz+0x30>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	bf18      	it	ne
 8000fc6:	4240      	negne	r0, r0
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2iz+0x3a>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d105      	bne.n	8000fe6 <__aeabi_f2iz+0x46>
 8000fda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fde:	bf08      	it	eq
 8000fe0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b09e      	sub	sp, #120	; 0x78
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f001 fd8b 	bl	8002b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 faef 	bl	80015dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fcad 	bl	800195c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001002:	f000 fb5f 	bl	80016c4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001006:	f000 fbb1 	bl	800176c <MX_TIM3_Init>
  MX_TIM4_Init();
 800100a:	f000 fc03 	bl	8001814 <MX_TIM4_Init>
  MX_I2C2_Init();
 800100e:	f000 fb2b 	bl	8001668 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001012:	f000 fc79 	bl	8001908 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //IMU
  HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f001 fddc 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	48af      	ldr	r0, [pc, #700]	; (80012e0 <main+0x2f0>)
 8001024:	f002 f8a3 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f001 fdd3 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001034:	48aa      	ldr	r0, [pc, #680]	; (80012e0 <main+0x2f0>)
 8001036:	f002 f89a 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f001 fdca 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	48a6      	ldr	r0, [pc, #664]	; (80012e0 <main+0x2f0>)
 8001048:	f002 f891 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f001 fdc1 	bl	8002bd4 <HAL_Delay>

  Init_IMU();
 8001052:	f000 fe4f 	bl	8001cf4 <Init_IMU>
  HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f001 fdbc 	bl	8002bd4 <HAL_Delay>
  GyroCalibration gyroCal = calibrate_gyroZ(500);
 800105c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001060:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001064:	4618      	mov	r0, r3
 8001066:	f001 f9e1 	bl	800242c <calibrate_gyroZ>
  HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f001 fdb2 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	489a      	ldr	r0, [pc, #616]	; (80012e0 <main+0x2f0>)
 8001078:	f002 f879 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f001 fda9 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	4895      	ldr	r0, [pc, #596]	; (80012e0 <main+0x2f0>)
 800108a:	f002 f870 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f001 fda0 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	4891      	ldr	r0, [pc, #580]	; (80012e0 <main+0x2f0>)
 800109c:	f002 f867 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f001 fd97 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ac:	488c      	ldr	r0, [pc, #560]	; (80012e0 <main+0x2f0>)
 80010ae:	f002 f85e 	bl	800316e <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	f001 fd8e 	bl	8002bd4 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4888      	ldr	r0, [pc, #544]	; (80012e0 <main+0x2f0>)
 80010c0:	f002 f855 	bl	800316e <HAL_GPIO_WritePin>

  magCal = calibrate_magnetometer(500);
 80010c4:	4c87      	ldr	r4, [pc, #540]	; (80012e4 <main+0x2f4>)
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f8ec 	bl	80022ac <calibrate_magnetometer>
 80010d4:	4625      	mov	r5, r4
 80010d6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e2:	e885 0003 	stmia.w	r5, {r0, r1}

  //Calcular Heading Inicial
  lecturasIMU = GetData__stMPU_9255();
 80010e6:	4c80      	ldr	r4, [pc, #512]	; (80012e8 <main+0x2f8>)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 ffac 	bl	8002048 <GetData__stMPU_9255>
 80010f0:	4625      	mov	r5, r4
 80010f2:	463c      	mov	r4, r7
 80010f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001100:	e885 0003 	stmia.w	r5, {r0, r1}
  float mx = (lecturasIMU.MagXData - magCal.offsetX) / magCal.scaleX;
 8001104:	4b78      	ldr	r3, [pc, #480]	; (80012e8 <main+0x2f8>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	4a76      	ldr	r2, [pc, #472]	; (80012e4 <main+0x2f4>)
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc60 	bl	80009d4 <__aeabi_fsub>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b72      	ldr	r3, [pc, #456]	; (80012e4 <main+0x2f4>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff fe16 	bl	8000d50 <__aeabi_fdiv>
 8001124:	4603      	mov	r3, r0
 8001126:	66bb      	str	r3, [r7, #104]	; 0x68
  float my = (lecturasIMU.MagYData - magCal.offsetY) / magCal.scaleY;
 8001128:	4b6f      	ldr	r3, [pc, #444]	; (80012e8 <main+0x2f8>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a6d      	ldr	r2, [pc, #436]	; (80012e4 <main+0x2f4>)
 800112e:	6852      	ldr	r2, [r2, #4]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fc4e 	bl	80009d4 <__aeabi_fsub>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b69      	ldr	r3, [pc, #420]	; (80012e4 <main+0x2f4>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f7ff fe04 	bl	8000d50 <__aeabi_fdiv>
 8001148:	4603      	mov	r3, r0
 800114a:	667b      	str	r3, [r7, #100]	; 0x64
  float norm = sqrtf(mx * mx + my * my);
 800114c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800114e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001150:	f7ff fd4a 	bl	8000be8 <__aeabi_fmul>
 8001154:	4603      	mov	r3, r0
 8001156:	461c      	mov	r4, r3
 8001158:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800115a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800115c:	f7ff fd44 	bl	8000be8 <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	4619      	mov	r1, r3
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff fc37 	bl	80009d8 <__addsf3>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fc55 	bl	8005a1c <sqrtf>
 8001172:	6638      	str	r0, [r7, #96]	; 0x60
  mx /= norm;
 8001174:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001176:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001178:	f7ff fdea 	bl	8000d50 <__aeabi_fdiv>
 800117c:	4603      	mov	r3, r0
 800117e:	66bb      	str	r3, [r7, #104]	; 0x68
  my /= norm;
 8001180:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001182:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001184:	f7ff fde4 	bl	8000d50 <__aeabi_fdiv>
 8001188:	4603      	mov	r3, r0
 800118a:	667b      	str	r3, [r7, #100]	; 0x64

  float heading_inicial = atan2f(-my, mx) * (180.0f / M_PI);
 800118c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800118e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001194:	4618      	mov	r0, r3
 8001196:	f004 fc3f 	bl	8005a18 <atan2f>
 800119a:	4603      	mov	r3, r0
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff f93b 	bl	8000418 <__aeabi_f2d>
 80011a2:	a34d      	add	r3, pc, #308	; (adr r3, 80012d8 <main+0x2e8>)
 80011a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a8:	f7ff f98e 	bl	80004c8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f7ff fbba 	bl	800092c <__aeabi_d2f>
 80011b8:	4603      	mov	r3, r0
 80011ba:	677b      	str	r3, [r7, #116]	; 0x74
  if (heading_inicial < 0) heading_inicial += 360.0f;
 80011bc:	f04f 0100 	mov.w	r1, #0
 80011c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011c2:	f7ff feaf 	bl	8000f24 <__aeabi_fcmplt>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d005      	beq.n	80011d8 <main+0x1e8>
 80011cc:	4947      	ldr	r1, [pc, #284]	; (80012ec <main+0x2fc>)
 80011ce:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011d0:	f7ff fc02 	bl	80009d8 <__addsf3>
 80011d4:	4603      	mov	r3, r0
 80011d6:	677b      	str	r3, [r7, #116]	; 0x74

  // Objetivo: 90 grados más
  heading_target = heading_inicial + 90.0f;
 80011d8:	4945      	ldr	r1, [pc, #276]	; (80012f0 <main+0x300>)
 80011da:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011dc:	f7ff fbfc 	bl	80009d8 <__addsf3>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b43      	ldr	r3, [pc, #268]	; (80012f4 <main+0x304>)
 80011e6:	601a      	str	r2, [r3, #0]
  if (heading_target >= 360.0f) heading_target -= 360.0f;
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <main+0x304>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	493f      	ldr	r1, [pc, #252]	; (80012ec <main+0x2fc>)
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff feac 	bl	8000f4c <__aeabi_fcmpge>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d009      	beq.n	800120e <main+0x21e>
 80011fa:	4b3e      	ldr	r3, [pc, #248]	; (80012f4 <main+0x304>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	493b      	ldr	r1, [pc, #236]	; (80012ec <main+0x2fc>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff fbe7 	bl	80009d4 <__aeabi_fsub>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <main+0x304>)
 800120c:	601a      	str	r2, [r3, #0]
  //fin imu

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 800120e:	213c      	movs	r1, #60	; 0x3c
 8001210:	4839      	ldr	r0, [pc, #228]	; (80012f8 <main+0x308>)
 8001212:	f003 ff5b 	bl	80050cc <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001216:	213c      	movs	r1, #60	; 0x3c
 8001218:	4838      	ldr	r0, [pc, #224]	; (80012fc <main+0x30c>)
 800121a:	f003 ff57 	bl	80050cc <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800121e:	2100      	movs	r1, #0
 8001220:	4837      	ldr	r0, [pc, #220]	; (8001300 <main+0x310>)
 8001222:	f003 fe0f 	bl	8004e44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001226:	2104      	movs	r1, #4
 8001228:	4835      	ldr	r0, [pc, #212]	; (8001300 <main+0x310>)
 800122a:	f003 fe0b 	bl	8004e44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800122e:	2108      	movs	r1, #8
 8001230:	4833      	ldr	r0, [pc, #204]	; (8001300 <main+0x310>)
 8001232:	f003 fe07 	bl	8004e44 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001236:	210c      	movs	r1, #12
 8001238:	4831      	ldr	r0, [pc, #196]	; (8001300 <main+0x310>)
 800123a:	f003 fe03 	bl	8004e44 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 800123e:	4b30      	ldr	r3, [pc, #192]	; (8001300 <main+0x310>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8001246:	4b2e      	ldr	r3, [pc, #184]	; (8001300 <main+0x310>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2200      	movs	r2, #0
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 800124e:	4b2c      	ldr	r3, [pc, #176]	; (8001300 <main+0x310>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2200      	movs	r2, #0
 8001254:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8001256:	4b2a      	ldr	r3, [pc, #168]	; (8001300 <main+0x310>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	641a      	str	r2, [r3, #64]	; 0x40
  // Leer posición inicial
  enc1_ini = __HAL_TIM_GET_COUNTER(&htim2); // Encoder 1
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <main+0x308>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001264:	461a      	mov	r2, r3
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <main+0x314>)
 8001268:	601a      	str	r2, [r3, #0]
  enc2_ini = __HAL_TIM_GET_COUNTER(&htim3); // Encoder 2
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <main+0x30c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001270:	461a      	mov	r2, r3
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <main+0x318>)
 8001274:	601a      	str	r2, [r3, #0]
  enc3_ini = encoder3_count; // Encoder 3 por interrupción
 8001276:	4b25      	ldr	r3, [pc, #148]	; (800130c <main+0x31c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4a25      	ldr	r2, [pc, #148]	; (8001310 <main+0x320>)
 800127c:	6013      	str	r3, [r2, #0]
  enc4_ini = encoder4_count; // Encoder 4 por interrupción
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <main+0x324>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a25      	ldr	r2, [pc, #148]	; (8001318 <main+0x328>)
 8001284:	6013      	str	r3, [r2, #0]

  objetivo1 = distancia_cm;  //Calcular pulsos
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <main+0x32c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff fe88 	bl	8000fa0 <__aeabi_f2iz>
 8001290:	4603      	mov	r3, r0
 8001292:	4a23      	ldr	r2, [pc, #140]	; (8001320 <main+0x330>)
 8001294:	6013      	str	r3, [r2, #0]
  objetivo2 = distancia_cm;
 8001296:	4b21      	ldr	r3, [pc, #132]	; (800131c <main+0x32c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff fe80 	bl	8000fa0 <__aeabi_f2iz>
 80012a0:	4603      	mov	r3, r0
 80012a2:	4a20      	ldr	r2, [pc, #128]	; (8001324 <main+0x334>)
 80012a4:	6013      	str	r3, [r2, #0]
  objetivo3 = distancia_cm;
 80012a6:	4b1d      	ldr	r3, [pc, #116]	; (800131c <main+0x32c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe78 	bl	8000fa0 <__aeabi_f2iz>
 80012b0:	4603      	mov	r3, r0
 80012b2:	4a1d      	ldr	r2, [pc, #116]	; (8001328 <main+0x338>)
 80012b4:	6013      	str	r3, [r2, #0]
  objetivo4 = distancia_cm;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <main+0x32c>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff fe70 	bl	8000fa0 <__aeabi_f2iz>
 80012c0:	4603      	mov	r3, r0
 80012c2:	4a1a      	ldr	r2, [pc, #104]	; (800132c <main+0x33c>)
 80012c4:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

enc1_ini = __HAL_TIM_GET_COUNTER(&htim2); // Usa TIM2 o el que te interese
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <main+0x308>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	461a      	mov	r2, r3
 80012ce:	4b0d      	ldr	r3, [pc, #52]	; (8001304 <main+0x314>)
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e02d      	b.n	8001330 <main+0x340>
 80012d4:	f3af 8000 	nop.w
 80012d8:	1a63c1f8 	.word	0x1a63c1f8
 80012dc:	404ca5dc 	.word	0x404ca5dc
 80012e0:	40011000 	.word	0x40011000
 80012e4:	200001ec 	.word	0x200001ec
 80012e8:	2000009c 	.word	0x2000009c
 80012ec:	43b40000 	.word	0x43b40000
 80012f0:	42b40000 	.word	0x42b40000
 80012f4:	20000004 	.word	0x20000004
 80012f8:	20000298 	.word	0x20000298
 80012fc:	20000204 	.word	0x20000204
 8001300:	20000110 	.word	0x20000110
 8001304:	200000d8 	.word	0x200000d8
 8001308:	200000dc 	.word	0x200000dc
 800130c:	20000108 	.word	0x20000108
 8001310:	200000e0 	.word	0x200000e0
 8001314:	2000010c 	.word	0x2000010c
 8001318:	200000e4 	.word	0x200000e4
 800131c:	2000000c 	.word	0x2000000c
 8001320:	200000f8 	.word	0x200000f8
 8001324:	200000fc 	.word	0x200000fc
 8001328:	20000100 	.word	0x20000100
 800132c:	20000104 	.word	0x20000104

while (1)
  {
	enc1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001330:	4b9b      	ldr	r3, [pc, #620]	; (80015a0 <main+0x5b0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	461a      	mov	r2, r3
 8001338:	4b9a      	ldr	r3, [pc, #616]	; (80015a4 <main+0x5b4>)
 800133a:	601a      	str	r2, [r3, #0]
	enc2 = __HAL_TIM_GET_COUNTER(&htim3);
 800133c:	4b9a      	ldr	r3, [pc, #616]	; (80015a8 <main+0x5b8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	461a      	mov	r2, r3
 8001344:	4b99      	ldr	r3, [pc, #612]	; (80015ac <main+0x5bc>)
 8001346:	601a      	str	r2, [r3, #0]


	 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001348:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800134c:	4898      	ldr	r0, [pc, #608]	; (80015b0 <main+0x5c0>)
 800134e:	f001 ff26 	bl	800319e <HAL_GPIO_TogglePin>
	 lecturasIMU = ReadIMU_Average(10);
 8001352:	4c98      	ldr	r4, [pc, #608]	; (80015b4 <main+0x5c4>)
 8001354:	463b      	mov	r3, r7
 8001356:	210a      	movs	r1, #10
 8001358:	4618      	mov	r0, r3
 800135a:	f001 f8c1 	bl	80024e0 <ReadIMU_Average>
 800135e:	4625      	mov	r5, r4
 8001360:	463c      	mov	r4, r7
 8001362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800136a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800136e:	e885 0003 	stmia.w	r5, {r0, r1}

	 // CENTRO Y ESCALO
	          	  //GIROSCOPIO
	          	  float gz = (lecturasIMU.GyroZData - gyroCal.offsetZ) / gyroCal.scaleZ;
 8001372:	4b90      	ldr	r3, [pc, #576]	; (80015b4 <main+0x5c4>)
 8001374:	699b      	ldr	r3, [r3, #24]
 8001376:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb2a 	bl	80009d4 <__aeabi_fsub>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001386:	4619      	mov	r1, r3
 8001388:	4610      	mov	r0, r2
 800138a:	f7ff fce1 	bl	8000d50 <__aeabi_fdiv>
 800138e:	4603      	mov	r3, r0
 8001390:	65fb      	str	r3, [r7, #92]	; 0x5c

	          	  gz *= 0.00763f;
 8001392:	4989      	ldr	r1, [pc, #548]	; (80015b8 <main+0x5c8>)
 8001394:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001396:	f7ff fc27 	bl	8000be8 <__aeabi_fmul>
 800139a:	4603      	mov	r3, r0
 800139c:	65fb      	str	r3, [r7, #92]	; 0x5c
	          	  //MAGNETOMETRO
				  float mx = (lecturasIMU.MagXData - magCal.offsetX) / magCal.scaleX;
 800139e:	4b85      	ldr	r3, [pc, #532]	; (80015b4 <main+0x5c4>)
 80013a0:	69db      	ldr	r3, [r3, #28]
 80013a2:	4a86      	ldr	r2, [pc, #536]	; (80015bc <main+0x5cc>)
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	4611      	mov	r1, r2
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff fb13 	bl	80009d4 <__aeabi_fsub>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b82      	ldr	r3, [pc, #520]	; (80015bc <main+0x5cc>)
 80013b4:	68db      	ldr	r3, [r3, #12]
 80013b6:	4619      	mov	r1, r3
 80013b8:	4610      	mov	r0, r2
 80013ba:	f7ff fcc9 	bl	8000d50 <__aeabi_fdiv>
 80013be:	4603      	mov	r3, r0
 80013c0:	673b      	str	r3, [r7, #112]	; 0x70
				  float my = (lecturasIMU.MagYData - magCal.offsetY) / magCal.scaleY;
 80013c2:	4b7c      	ldr	r3, [pc, #496]	; (80015b4 <main+0x5c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a7d      	ldr	r2, [pc, #500]	; (80015bc <main+0x5cc>)
 80013c8:	6852      	ldr	r2, [r2, #4]
 80013ca:	4611      	mov	r1, r2
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fb01 	bl	80009d4 <__aeabi_fsub>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b79      	ldr	r3, [pc, #484]	; (80015bc <main+0x5cc>)
 80013d8:	691b      	ldr	r3, [r3, #16]
 80013da:	4619      	mov	r1, r3
 80013dc:	4610      	mov	r0, r2
 80013de:	f7ff fcb7 	bl	8000d50 <__aeabi_fdiv>
 80013e2:	4603      	mov	r3, r0
 80013e4:	66fb      	str	r3, [r7, #108]	; 0x6c
				  float mz = (lecturasIMU.MagZData - magCal.offsetZ) / magCal.scaleZ;
 80013e6:	4b73      	ldr	r3, [pc, #460]	; (80015b4 <main+0x5c4>)
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	4a74      	ldr	r2, [pc, #464]	; (80015bc <main+0x5cc>)
 80013ec:	6892      	ldr	r2, [r2, #8]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff faef 	bl	80009d4 <__aeabi_fsub>
 80013f6:	4603      	mov	r3, r0
 80013f8:	461a      	mov	r2, r3
 80013fa:	4b70      	ldr	r3, [pc, #448]	; (80015bc <main+0x5cc>)
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	4619      	mov	r1, r3
 8001400:	4610      	mov	r0, r2
 8001402:	f7ff fca5 	bl	8000d50 <__aeabi_fdiv>
 8001406:	4603      	mov	r3, r0
 8001408:	65bb      	str	r3, [r7, #88]	; 0x58

	          // Normalizar vector (opcional pero recomendado)
	          float norm = sqrtf(mx * mx + my * my + mz * mz);
 800140a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800140c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800140e:	f7ff fbeb 	bl	8000be8 <__aeabi_fmul>
 8001412:	4603      	mov	r3, r0
 8001414:	461c      	mov	r4, r3
 8001416:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001418:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800141a:	f7ff fbe5 	bl	8000be8 <__aeabi_fmul>
 800141e:	4603      	mov	r3, r0
 8001420:	4619      	mov	r1, r3
 8001422:	4620      	mov	r0, r4
 8001424:	f7ff fad8 	bl	80009d8 <__addsf3>
 8001428:	4603      	mov	r3, r0
 800142a:	461c      	mov	r4, r3
 800142c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800142e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001430:	f7ff fbda 	bl	8000be8 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	4619      	mov	r1, r3
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff facd 	bl	80009d8 <__addsf3>
 800143e:	4603      	mov	r3, r0
 8001440:	4618      	mov	r0, r3
 8001442:	f004 faeb 	bl	8005a1c <sqrtf>
 8001446:	6578      	str	r0, [r7, #84]	; 0x54
	          if (norm != 0.0f) {
 8001448:	f04f 0100 	mov.w	r1, #0
 800144c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800144e:	f7ff fd5f 	bl	8000f10 <__aeabi_fcmpeq>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d111      	bne.n	800147c <main+0x48c>
	              mx /= norm;
 8001458:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800145a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800145c:	f7ff fc78 	bl	8000d50 <__aeabi_fdiv>
 8001460:	4603      	mov	r3, r0
 8001462:	673b      	str	r3, [r7, #112]	; 0x70
	              my /= norm;
 8001464:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001466:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001468:	f7ff fc72 	bl	8000d50 <__aeabi_fdiv>
 800146c:	4603      	mov	r3, r0
 800146e:	66fb      	str	r3, [r7, #108]	; 0x6c
	              mz /= norm;
 8001470:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001472:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001474:	f7ff fc6c 	bl	8000d50 <__aeabi_fdiv>
 8001478:	4603      	mov	r3, r0
 800147a:	65bb      	str	r3, [r7, #88]	; 0x58
	          }

	          //CALCULO VARIABLES MEDIBLES
	          	  //GIROSCOPIO ANGULO
				  angle += gz * dt;  // Integrate
 800147c:	4b50      	ldr	r3, [pc, #320]	; (80015c0 <main+0x5d0>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fbb0 	bl	8000be8 <__aeabi_fmul>
 8001488:	4603      	mov	r3, r0
 800148a:	461a      	mov	r2, r3
 800148c:	4b4d      	ldr	r3, [pc, #308]	; (80015c4 <main+0x5d4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4619      	mov	r1, r3
 8001492:	4610      	mov	r0, r2
 8001494:	f7ff faa0 	bl	80009d8 <__addsf3>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b49      	ldr	r3, [pc, #292]	; (80015c4 <main+0x5d4>)
 800149e:	601a      	str	r2, [r3, #0]
				  if (angle >= 360.0f) angle -= 360.0f;
 80014a0:	4b48      	ldr	r3, [pc, #288]	; (80015c4 <main+0x5d4>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4948      	ldr	r1, [pc, #288]	; (80015c8 <main+0x5d8>)
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fd50 	bl	8000f4c <__aeabi_fcmpge>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d009      	beq.n	80014c6 <main+0x4d6>
 80014b2:	4b44      	ldr	r3, [pc, #272]	; (80015c4 <main+0x5d4>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4944      	ldr	r1, [pc, #272]	; (80015c8 <main+0x5d8>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fa8b 	bl	80009d4 <__aeabi_fsub>
 80014be:	4603      	mov	r3, r0
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b40      	ldr	r3, [pc, #256]	; (80015c4 <main+0x5d4>)
 80014c4:	601a      	str	r2, [r3, #0]
				  if (angle < 0.0f) angle += 360.0f;
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <main+0x5d4>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f04f 0100 	mov.w	r1, #0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fd28 	bl	8000f24 <__aeabi_fcmplt>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d009      	beq.n	80014ee <main+0x4fe>
 80014da:	4b3a      	ldr	r3, [pc, #232]	; (80015c4 <main+0x5d4>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	493a      	ldr	r1, [pc, #232]	; (80015c8 <main+0x5d8>)
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fa79 	bl	80009d8 <__addsf3>
 80014e6:	4603      	mov	r3, r0
 80014e8:	461a      	mov	r2, r3
 80014ea:	4b36      	ldr	r3, [pc, #216]	; (80015c4 <main+0x5d4>)
 80014ec:	601a      	str	r2, [r3, #0]
	          	  //MAGNETOMETRO ANGULO 2
	          	  heading = atan2f(-my, mx) * (180.0f / M_PI);
 80014ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80014f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80014f4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80014f6:	4618      	mov	r0, r3
 80014f8:	f004 fa8e 	bl	8005a18 <atan2f>
 80014fc:	4603      	mov	r3, r0
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe ff8a 	bl	8000418 <__aeabi_f2d>
 8001504:	a324      	add	r3, pc, #144	; (adr r3, 8001598 <main+0x5a8>)
 8001506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800150a:	f7fe ffdd 	bl	80004c8 <__aeabi_dmul>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4610      	mov	r0, r2
 8001514:	4619      	mov	r1, r3
 8001516:	f7ff fa09 	bl	800092c <__aeabi_d2f>
 800151a:	4603      	mov	r3, r0
 800151c:	4a2b      	ldr	r2, [pc, #172]	; (80015cc <main+0x5dc>)
 800151e:	6013      	str	r3, [r2, #0]
	          	  if (heading < 0) heading += 360.0f;
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <main+0x5dc>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f04f 0100 	mov.w	r1, #0
 8001528:	4618      	mov	r0, r3
 800152a:	f7ff fcfb 	bl	8000f24 <__aeabi_fcmplt>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d009      	beq.n	8001548 <main+0x558>
 8001534:	4b25      	ldr	r3, [pc, #148]	; (80015cc <main+0x5dc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4923      	ldr	r1, [pc, #140]	; (80015c8 <main+0x5d8>)
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fa4c 	bl	80009d8 <__addsf3>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	4b21      	ldr	r3, [pc, #132]	; (80015cc <main+0x5dc>)
 8001546:	601a      	str	r2, [r3, #0]



      actualizarAvances();
 8001548:	f000 fa9e 	bl	8001a88 <actualizarAvances>
      float objetivoprom = (objetivo3 + objetivo4) / 2.0f;
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <main+0x5e0>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <main+0x5e4>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4413      	add	r3, r2
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff faf2 	bl	8000b40 <__aeabi_i2f>
 800155c:	4603      	mov	r3, r0
 800155e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fbf4 	bl	8000d50 <__aeabi_fdiv>
 8001568:	4603      	mov	r3, r0
 800156a:	653b      	str	r3, [r7, #80]	; 0x50
      float promedio_cm = calcularPromedioTrasero();
 800156c:	f000 fb54 	bl	8001c18 <calcularPromedioTrasero>
 8001570:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (promedio_cm  < objetivoprom) {
 8001572:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001574:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001576:	f7ff fcd5 	bl	8000f24 <__aeabi_fcmplt>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <main+0x59c>
          moverMotores(pwmValue);
 8001580:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <main+0x5e8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f000 fb5f 	bl	8001c48 <moverMotores>
 800158a:	e6d1      	b.n	8001330 <main+0x340>
      } else {
          detenerMotores();
 800158c:	f000 fb9a 	bl	8001cc4 <detenerMotores>
  {
 8001590:	e6ce      	b.n	8001330 <main+0x340>
 8001592:	bf00      	nop
 8001594:	f3af 8000 	nop.w
 8001598:	1a63c1f8 	.word	0x1a63c1f8
 800159c:	404ca5dc 	.word	0x404ca5dc
 80015a0:	20000298 	.word	0x20000298
 80015a4:	200000d0 	.word	0x200000d0
 80015a8:	20000204 	.word	0x20000204
 80015ac:	200000d4 	.word	0x200000d4
 80015b0:	40011000 	.word	0x40011000
 80015b4:	2000009c 	.word	0x2000009c
 80015b8:	3bfa0514 	.word	0x3bfa0514
 80015bc:	200001ec 	.word	0x200001ec
 80015c0:	20000000 	.word	0x20000000
 80015c4:	200000cc 	.word	0x200000cc
 80015c8:	43b40000 	.word	0x43b40000
 80015cc:	200000c8 	.word	0x200000c8
 80015d0:	20000100 	.word	0x20000100
 80015d4:	20000104 	.word	0x20000104
 80015d8:	20000008 	.word	0x20000008

080015dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b090      	sub	sp, #64	; 0x40
 80015e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e2:	f107 0318 	add.w	r3, r7, #24
 80015e6:	2228      	movs	r2, #40	; 0x28
 80015e8:	2100      	movs	r1, #0
 80015ea:	4618      	mov	r0, r3
 80015ec:	f004 fc4a 	bl	8005e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
 80015fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015fe:	2301      	movs	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001608:	2300      	movs	r3, #0
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001610:	2302      	movs	r3, #2
 8001612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800161a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800161e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	4618      	mov	r0, r3
 8001626:	f002 ffaf 	bl	8004588 <HAL_RCC_OscConfig>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001630:	f001 f844 	bl	80026bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001634:	230f      	movs	r3, #15
 8001636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001638:	2302      	movs	r3, #2
 800163a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001646:	2300      	movs	r3, #0
 8001648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	2102      	movs	r1, #2
 800164e:	4618      	mov	r0, r3
 8001650:	f003 fa1a 	bl	8004a88 <HAL_RCC_ClockConfig>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800165a:	f001 f82f 	bl	80026bc <Error_Handler>
  }
}
 800165e:	bf00      	nop
 8001660:	3740      	adds	r7, #64	; 0x40
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800166c:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <MX_I2C2_Init+0x50>)
 800166e:	4a13      	ldr	r2, [pc, #76]	; (80016bc <MX_I2C2_Init+0x54>)
 8001670:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001672:	4b11      	ldr	r3, [pc, #68]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001674:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <MX_I2C2_Init+0x58>)
 8001676:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001678:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <MX_I2C2_Init+0x50>)
 800167a:	2200      	movs	r2, #0
 800167c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800167e:	4b0e      	ldr	r3, [pc, #56]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001684:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001686:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800168a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800168c:	4b0a      	ldr	r3, [pc, #40]	; (80016b8 <MX_I2C2_Init+0x50>)
 800168e:	2200      	movs	r2, #0
 8001690:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <MX_I2C2_Init+0x50>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001698:	4b07      	ldr	r3, [pc, #28]	; (80016b8 <MX_I2C2_Init+0x50>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <MX_I2C2_Init+0x50>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016a4:	4804      	ldr	r0, [pc, #16]	; (80016b8 <MX_I2C2_Init+0x50>)
 80016a6:	f001 fdab 	bl	8003200 <HAL_I2C_Init>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016b0:	f001 f804 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	20000158 	.word	0x20000158
 80016bc:	40005800 	.word	0x40005800
 80016c0:	000186a0 	.word	0x000186a0

080016c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2224      	movs	r2, #36	; 0x24
 80016d0:	2100      	movs	r1, #0
 80016d2:	4618      	mov	r0, r3
 80016d4:	f004 fbd6 	bl	8005e84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d8:	1d3b      	adds	r3, r7, #4
 80016da:	2200      	movs	r2, #0
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016e0:	4b21      	ldr	r3, [pc, #132]	; (8001768 <MX_TIM2_Init+0xa4>)
 80016e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80016e8:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <MX_TIM2_Init+0xa4>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016ee:	4b1e      	ldr	r3, [pc, #120]	; (8001768 <MX_TIM2_Init+0xa4>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80016f4:	4b1c      	ldr	r3, [pc, #112]	; (8001768 <MX_TIM2_Init+0xa4>)
 80016f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	; (8001768 <MX_TIM2_Init+0xa4>)
 80016fe:	2200      	movs	r2, #0
 8001700:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001702:	4b19      	ldr	r3, [pc, #100]	; (8001768 <MX_TIM2_Init+0xa4>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001708:	2303      	movs	r3, #3
 800170a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800170c:	2300      	movs	r3, #0
 800170e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001710:	2301      	movs	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001718:	2300      	movs	r3, #0
 800171a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800171c:	2300      	movs	r3, #0
 800171e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001720:	2301      	movs	r3, #1
 8001722:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001724:	2300      	movs	r3, #0
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4619      	mov	r1, r3
 8001732:	480d      	ldr	r0, [pc, #52]	; (8001768 <MX_TIM2_Init+0xa4>)
 8001734:	f003 fc28 	bl	8004f88 <HAL_TIM_Encoder_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800173e:	f000 ffbd 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001746:	2300      	movs	r3, #0
 8001748:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	4619      	mov	r1, r3
 800174e:	4806      	ldr	r0, [pc, #24]	; (8001768 <MX_TIM2_Init+0xa4>)
 8001750:	f004 f826 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800175a:	f000 ffaf 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800175e:	bf00      	nop
 8001760:	3730      	adds	r7, #48	; 0x30
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	20000298 	.word	0x20000298

0800176c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08c      	sub	sp, #48	; 0x30
 8001770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001772:	f107 030c 	add.w	r3, r7, #12
 8001776:	2224      	movs	r2, #36	; 0x24
 8001778:	2100      	movs	r1, #0
 800177a:	4618      	mov	r0, r3
 800177c:	f004 fb82 	bl	8005e84 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001788:	4b20      	ldr	r3, [pc, #128]	; (800180c <MX_TIM3_Init+0xa0>)
 800178a:	4a21      	ldr	r2, [pc, #132]	; (8001810 <MX_TIM3_Init+0xa4>)
 800178c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <MX_TIM3_Init+0xa0>)
 8001790:	2200      	movs	r2, #0
 8001792:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b1d      	ldr	r3, [pc, #116]	; (800180c <MX_TIM3_Init+0xa0>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800179a:	4b1c      	ldr	r3, [pc, #112]	; (800180c <MX_TIM3_Init+0xa0>)
 800179c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <MX_TIM3_Init+0xa0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a8:	4b18      	ldr	r3, [pc, #96]	; (800180c <MX_TIM3_Init+0xa0>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017ae:	2303      	movs	r3, #3
 80017b0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017b6:	2301      	movs	r3, #1
 80017b8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80017c2:	2300      	movs	r3, #0
 80017c4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80017c6:	2301      	movs	r3, #1
 80017c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80017ca:	2300      	movs	r3, #0
 80017cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80017ce:	2300      	movs	r3, #0
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80017d2:	f107 030c 	add.w	r3, r7, #12
 80017d6:	4619      	mov	r1, r3
 80017d8:	480c      	ldr	r0, [pc, #48]	; (800180c <MX_TIM3_Init+0xa0>)
 80017da:	f003 fbd5 	bl	8004f88 <HAL_TIM_Encoder_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80017e4:	f000 ff6a 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017f0:	1d3b      	adds	r3, r7, #4
 80017f2:	4619      	mov	r1, r3
 80017f4:	4805      	ldr	r0, [pc, #20]	; (800180c <MX_TIM3_Init+0xa0>)
 80017f6:	f003 ffd3 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001800:	f000 ff5c 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001804:	bf00      	nop
 8001806:	3730      	adds	r7, #48	; 0x30
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000204 	.word	0x20000204
 8001810:	40000400 	.word	0x40000400

08001814 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08a      	sub	sp, #40	; 0x28
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181a:	f107 0320 	add.w	r3, r7, #32
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	1d3b      	adds	r3, r7, #4
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <MX_TIM4_Init+0xec>)
 8001838:	4a32      	ldr	r2, [pc, #200]	; (8001904 <MX_TIM4_Init+0xf0>)
 800183a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <MX_TIM4_Init+0xec>)
 800183e:	2247      	movs	r2, #71	; 0x47
 8001840:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <MX_TIM4_Init+0xec>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <MX_TIM4_Init+0xec>)
 800184a:	2263      	movs	r2, #99	; 0x63
 800184c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b2c      	ldr	r3, [pc, #176]	; (8001900 <MX_TIM4_Init+0xec>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b2a      	ldr	r3, [pc, #168]	; (8001900 <MX_TIM4_Init+0xec>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800185a:	4829      	ldr	r0, [pc, #164]	; (8001900 <MX_TIM4_Init+0xec>)
 800185c:	f003 faa2 	bl	8004da4 <HAL_TIM_PWM_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001866:	f000 ff29 	bl	80026bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800186a:	2300      	movs	r3, #0
 800186c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001872:	f107 0320 	add.w	r3, r7, #32
 8001876:	4619      	mov	r1, r3
 8001878:	4821      	ldr	r0, [pc, #132]	; (8001900 <MX_TIM4_Init+0xec>)
 800187a:	f003 ff91 	bl	80057a0 <HAL_TIMEx_MasterConfigSynchronization>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001884:	f000 ff1a 	bl	80026bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001888:	2360      	movs	r3, #96	; 0x60
 800188a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001890:	2300      	movs	r3, #0
 8001892:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001894:	2300      	movs	r3, #0
 8001896:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	2200      	movs	r2, #0
 800189c:	4619      	mov	r1, r3
 800189e:	4818      	ldr	r0, [pc, #96]	; (8001900 <MX_TIM4_Init+0xec>)
 80018a0:	f003 fca2 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80018aa:	f000 ff07 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2204      	movs	r2, #4
 80018b2:	4619      	mov	r1, r3
 80018b4:	4812      	ldr	r0, [pc, #72]	; (8001900 <MX_TIM4_Init+0xec>)
 80018b6:	f003 fc97 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80018c0:	f000 fefc 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2208      	movs	r2, #8
 80018c8:	4619      	mov	r1, r3
 80018ca:	480d      	ldr	r0, [pc, #52]	; (8001900 <MX_TIM4_Init+0xec>)
 80018cc:	f003 fc8c 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80018d6:	f000 fef1 	bl	80026bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	220c      	movs	r2, #12
 80018de:	4619      	mov	r1, r3
 80018e0:	4807      	ldr	r0, [pc, #28]	; (8001900 <MX_TIM4_Init+0xec>)
 80018e2:	f003 fc81 	bl	80051e8 <HAL_TIM_PWM_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80018ec:	f000 fee6 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <MX_TIM4_Init+0xec>)
 80018f2:	f000 ffe1 	bl	80028b8 <HAL_TIM_MspPostInit>

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000110 	.word	0x20000110
 8001904:	40000800 	.word	0x40000800

08001908 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800190c:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 800190e:	4a12      	ldr	r2, [pc, #72]	; (8001958 <MX_USART1_UART_Init+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 8001914:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001918:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 8001922:	2200      	movs	r2, #0
 8001924:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800192c:	4b09      	ldr	r3, [pc, #36]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 800192e:	220c      	movs	r2, #12
 8001930:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 8001934:	2200      	movs	r2, #0
 8001936:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 800193a:	2200      	movs	r2, #0
 800193c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_USART1_UART_Init+0x4c>)
 8001940:	f003 ff8c 	bl	800585c <HAL_UART_Init>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800194a:	f000 feb7 	bl	80026bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000250 	.word	0x20000250
 8001958:	40013800 	.word	0x40013800

0800195c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	2200      	movs	r2, #0
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	605a      	str	r2, [r3, #4]
 800196c:	609a      	str	r2, [r3, #8]
 800196e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001970:	4b3f      	ldr	r3, [pc, #252]	; (8001a70 <MX_GPIO_Init+0x114>)
 8001972:	699b      	ldr	r3, [r3, #24]
 8001974:	4a3e      	ldr	r2, [pc, #248]	; (8001a70 <MX_GPIO_Init+0x114>)
 8001976:	f043 0310 	orr.w	r3, r3, #16
 800197a:	6193      	str	r3, [r2, #24]
 800197c:	4b3c      	ldr	r3, [pc, #240]	; (8001a70 <MX_GPIO_Init+0x114>)
 800197e:	699b      	ldr	r3, [r3, #24]
 8001980:	f003 0310 	and.w	r3, r3, #16
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <MX_GPIO_Init+0x114>)
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	4a38      	ldr	r2, [pc, #224]	; (8001a70 <MX_GPIO_Init+0x114>)
 800198e:	f043 0320 	orr.w	r3, r3, #32
 8001992:	6193      	str	r3, [r2, #24]
 8001994:	4b36      	ldr	r3, [pc, #216]	; (8001a70 <MX_GPIO_Init+0x114>)
 8001996:	699b      	ldr	r3, [r3, #24]
 8001998:	f003 0320 	and.w	r3, r3, #32
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a0:	4b33      	ldr	r3, [pc, #204]	; (8001a70 <MX_GPIO_Init+0x114>)
 80019a2:	699b      	ldr	r3, [r3, #24]
 80019a4:	4a32      	ldr	r2, [pc, #200]	; (8001a70 <MX_GPIO_Init+0x114>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	6193      	str	r3, [r2, #24]
 80019ac:	4b30      	ldr	r3, [pc, #192]	; (8001a70 <MX_GPIO_Init+0x114>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b8:	4b2d      	ldr	r3, [pc, #180]	; (8001a70 <MX_GPIO_Init+0x114>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a2c      	ldr	r2, [pc, #176]	; (8001a70 <MX_GPIO_Init+0x114>)
 80019be:	f043 0308 	orr.w	r3, r3, #8
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b2a      	ldr	r3, [pc, #168]	; (8001a70 <MX_GPIO_Init+0x114>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0308 	and.w	r3, r3, #8
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019d0:	2200      	movs	r2, #0
 80019d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d6:	4827      	ldr	r0, [pc, #156]	; (8001a74 <MX_GPIO_Init+0x118>)
 80019d8:	f001 fbc9 	bl	800316e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e2:	2301      	movs	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2302      	movs	r3, #2
 80019ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	4619      	mov	r1, r3
 80019f4:	481f      	ldr	r0, [pc, #124]	; (8001a74 <MX_GPIO_Init+0x118>)
 80019f6:	f001 fa1f 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019fa:	2304      	movs	r3, #4
 80019fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_GPIO_Init+0x11c>)
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481b      	ldr	r0, [pc, #108]	; (8001a7c <MX_GPIO_Init+0x120>)
 8001a0e:	f001 fa13 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001a12:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_GPIO_Init+0x11c>)
 8001a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4816      	ldr	r0, [pc, #88]	; (8001a80 <MX_GPIO_Init+0x124>)
 8001a28:	f001 fa06 	bl	8002e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001a2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	4619      	mov	r1, r3
 8001a40:	480f      	ldr	r0, [pc, #60]	; (8001a80 <MX_GPIO_Init+0x124>)
 8001a42:	f001 f9f9 	bl	8002e38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001a46:	2200      	movs	r2, #0
 8001a48:	2100      	movs	r1, #0
 8001a4a:	2008      	movs	r0, #8
 8001a4c:	f001 f9bd 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001a50:	2008      	movs	r0, #8
 8001a52:	f001 f9d6 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2028      	movs	r0, #40	; 0x28
 8001a5c:	f001 f9b5 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a60:	2028      	movs	r0, #40	; 0x28
 8001a62:	f001 f9ce 	bl	8002e02 <HAL_NVIC_EnableIRQ>

}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40021000 	.word	0x40021000
 8001a74:	40011000 	.word	0x40011000
 8001a78:	10110000 	.word	0x10110000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	00000000 	.word	0x00000000

08001a88 <actualizarAvances>:

/* USER CODE BEGIN 4 */
void actualizarAvances(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
    enc1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <actualizarAvances+0x148>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a92:	461a      	mov	r2, r3
 8001a94:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <actualizarAvances+0x14c>)
 8001a96:	601a      	str	r2, [r3, #0]
    enc2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001a98:	4b4f      	ldr	r3, [pc, #316]	; (8001bd8 <actualizarAvances+0x150>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <actualizarAvances+0x154>)
 8001aa2:	601a      	str	r2, [r3, #0]

    avance1 = (float)(abs(enc1 - enc1_ini)) / PULSOS_POR_VUELTA_ENC1 * CIRCUNFERENCIA_LLANTA_CM;
 8001aa4:	4b4b      	ldr	r3, [pc, #300]	; (8001bd4 <actualizarAvances+0x14c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b4d      	ldr	r3, [pc, #308]	; (8001be0 <actualizarAvances+0x158>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	bfb8      	it	lt
 8001ab2:	425b      	neglt	r3, r3
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff f843 	bl	8000b40 <__aeabi_i2f>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7fe fcab 	bl	8000418 <__aeabi_f2d>
 8001ac2:	a33f      	add	r3, pc, #252	; (adr r3, 8001bc0 <actualizarAvances+0x138>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fe28 	bl	800071c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f04f 0200 	mov.w	r2, #0
 8001ad8:	4b42      	ldr	r3, [pc, #264]	; (8001be4 <actualizarAvances+0x15c>)
 8001ada:	f7fe fcf5 	bl	80004c8 <__aeabi_dmul>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7fe ff21 	bl	800092c <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4a3e      	ldr	r2, [pc, #248]	; (8001be8 <actualizarAvances+0x160>)
 8001aee:	6013      	str	r3, [r2, #0]
    avance2 = (float)(abs(enc2 - enc2_ini)) / PULSOS_POR_VUELTA_ENC2 * CIRCUNFERENCIA_LLANTA_CM;
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <actualizarAvances+0x154>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <actualizarAvances+0x164>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	bfb8      	it	lt
 8001afe:	425b      	neglt	r3, r3
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7ff f81d 	bl	8000b40 <__aeabi_i2f>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4939      	ldr	r1, [pc, #228]	; (8001bf0 <actualizarAvances+0x168>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7ff f920 	bl	8000d50 <__aeabi_fdiv>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4938      	ldr	r1, [pc, #224]	; (8001bf4 <actualizarAvances+0x16c>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff f867 	bl	8000be8 <__aeabi_fmul>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <actualizarAvances+0x170>)
 8001b20:	601a      	str	r2, [r3, #0]
    avance3 = (float)(abs(encoder3_count - enc3_ini)) / PULSOS_POR_VUELTA_ENC3 * CIRCUNFERENCIA_LLANTA_CM;
 8001b22:	4b36      	ldr	r3, [pc, #216]	; (8001bfc <actualizarAvances+0x174>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	4b36      	ldr	r3, [pc, #216]	; (8001c00 <actualizarAvances+0x178>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bfb8      	it	lt
 8001b30:	425b      	neglt	r3, r3
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff f804 	bl	8000b40 <__aeabi_i2f>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fc6c 	bl	8000418 <__aeabi_f2d>
 8001b40:	a321      	add	r3, pc, #132	; (adr r3, 8001bc8 <actualizarAvances+0x140>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fde9 	bl	800071c <__aeabi_ddiv>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4610      	mov	r0, r2
 8001b50:	4619      	mov	r1, r3
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <actualizarAvances+0x15c>)
 8001b58:	f7fe fcb6 	bl	80004c8 <__aeabi_dmul>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4610      	mov	r0, r2
 8001b62:	4619      	mov	r1, r3
 8001b64:	f7fe fee2 	bl	800092c <__aeabi_d2f>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4a26      	ldr	r2, [pc, #152]	; (8001c04 <actualizarAvances+0x17c>)
 8001b6c:	6013      	str	r3, [r2, #0]
    avance4 = (float)(abs(encoder4_count - enc4_ini)) / PULSOS_POR_VUELTA_ENC4 * CIRCUNFERENCIA_LLANTA_CM;
 8001b6e:	4b26      	ldr	r3, [pc, #152]	; (8001c08 <actualizarAvances+0x180>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <actualizarAvances+0x184>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfb8      	it	lt
 8001b7c:	425b      	neglt	r3, r3
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe ffde 	bl	8000b40 <__aeabi_i2f>
 8001b84:	4603      	mov	r3, r0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7fe fc46 	bl	8000418 <__aeabi_f2d>
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	4b1f      	ldr	r3, [pc, #124]	; (8001c10 <actualizarAvances+0x188>)
 8001b92:	f7fe fdc3 	bl	800071c <__aeabi_ddiv>
 8001b96:	4602      	mov	r2, r0
 8001b98:	460b      	mov	r3, r1
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	4619      	mov	r1, r3
 8001b9e:	f04f 0200 	mov.w	r2, #0
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <actualizarAvances+0x15c>)
 8001ba4:	f7fe fc90 	bl	80004c8 <__aeabi_dmul>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	460b      	mov	r3, r1
 8001bac:	4610      	mov	r0, r2
 8001bae:	4619      	mov	r1, r3
 8001bb0:	f7fe febc 	bl	800092c <__aeabi_d2f>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	4a17      	ldr	r2, [pc, #92]	; (8001c14 <actualizarAvances+0x18c>)
 8001bb8:	6013      	str	r3, [r2, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	409ec300 	.word	0x409ec300
 8001bc8:	7ae147ae 	.word	0x7ae147ae
 8001bcc:	407eca14 	.word	0x407eca14
 8001bd0:	20000298 	.word	0x20000298
 8001bd4:	200000d0 	.word	0x200000d0
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	200000d4 	.word	0x200000d4
 8001be0:	200000d8 	.word	0x200000d8
 8001be4:	40358000 	.word	0x40358000
 8001be8:	200000e8 	.word	0x200000e8
 8001bec:	200000dc 	.word	0x200000dc
 8001bf0:	44f72000 	.word	0x44f72000
 8001bf4:	41ac0000 	.word	0x41ac0000
 8001bf8:	200000ec 	.word	0x200000ec
 8001bfc:	20000108 	.word	0x20000108
 8001c00:	200000e0 	.word	0x200000e0
 8001c04:	200000f0 	.word	0x200000f0
 8001c08:	2000010c 	.word	0x2000010c
 8001c0c:	200000e4 	.word	0x200000e4
 8001c10:	40800200 	.word	0x40800200
 8001c14:	200000f4 	.word	0x200000f4

08001c18 <calcularPromedioTrasero>:


float calcularPromedioTrasero(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
    return (avance3 + avance4) / 2.0f;
 8001c1c:	4b08      	ldr	r3, [pc, #32]	; (8001c40 <calcularPromedioTrasero+0x28>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a08      	ldr	r2, [pc, #32]	; (8001c44 <calcularPromedioTrasero+0x2c>)
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7fe fed6 	bl	80009d8 <__addsf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f88c 	bl	8000d50 <__aeabi_fdiv>
 8001c38:	4603      	mov	r3, r0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	200000f0 	.word	0x200000f0
 8001c44:	200000f4 	.word	0x200000f4

08001c48 <moverMotores>:


void moverMotores(uint8_t pwm) {
 8001c48:	b590      	push	{r4, r7, lr}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm);         // Delantera derecha
 8001c52:	4b1b      	ldr	r3, [pc, #108]	; (8001cc0 <moverMotores+0x78>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm + 3.17);  // Delantera izquierda
 8001c5a:	79fb      	ldrb	r3, [r7, #7]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7fe fbc9 	bl	80003f4 <__aeabi_i2d>
 8001c62:	a315      	add	r3, pc, #84	; (adr r3, 8001cb8 <moverMotores+0x70>)
 8001c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c68:	f7fe fa78 	bl	800015c <__adddf3>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4913      	ldr	r1, [pc, #76]	; (8001cc0 <moverMotores+0x78>)
 8001c72:	680c      	ldr	r4, [r1, #0]
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7fe fe38 	bl	80008ec <__aeabi_d2uiz>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm);         // Trasera derecha
 8001c80:	4b0f      	ldr	r3, [pc, #60]	; (8001cc0 <moverMotores+0x78>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	79fa      	ldrb	r2, [r7, #7]
 8001c86:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm + 3.17);  // Trasera izquierda
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7fe fbb2 	bl	80003f4 <__aeabi_i2d>
 8001c90:	a309      	add	r3, pc, #36	; (adr r3, 8001cb8 <moverMotores+0x70>)
 8001c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c96:	f7fe fa61 	bl	800015c <__adddf3>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	460b      	mov	r3, r1
 8001c9e:	4908      	ldr	r1, [pc, #32]	; (8001cc0 <moverMotores+0x78>)
 8001ca0:	680c      	ldr	r4, [r1, #0]
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	f7fe fe21 	bl	80008ec <__aeabi_d2uiz>
 8001caa:	4603      	mov	r3, r0
 8001cac:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd90      	pop	{r4, r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	f5c28f5c 	.word	0xf5c28f5c
 8001cbc:	40095c28 	.word	0x40095c28
 8001cc0:	20000110 	.word	0x20000110

08001cc4 <detenerMotores>:

void detenerMotores(void) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <detenerMotores+0x2c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <detenerMotores+0x2c>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <detenerMotores+0x2c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001ce0:	4b03      	ldr	r3, [pc, #12]	; (8001cf0 <detenerMotores+0x2c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001ce8:	bf00      	nop
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr
 8001cf0:	20000110 	.word	0x20000110

08001cf4 <Init_IMU>:

void Init_IMU(void) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b08a      	sub	sp, #40	; 0x28
 8001cf8:	af04      	add	r7, sp, #16
    uint8_t data_tx[2], reg, val;
    uint8_t asa[3] = {0};
 8001cfa:	4b96      	ldr	r3, [pc, #600]	; (8001f54 <Init_IMU+0x260>)
 8001cfc:	881b      	ldrh	r3, [r3, #0]
 8001cfe:	80bb      	strh	r3, [r7, #4]
 8001d00:	2300      	movs	r3, #0
 8001d02:	71bb      	strb	r3, [r7, #6]
    uint8_t dev_addr = MPU_ADDR;    // 0x69 << 1
 8001d04:	23d2      	movs	r3, #210	; 0xd2
 8001d06:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_addr = MAG_ADDR;    // 0x0C << 1
 8001d08:	2318      	movs	r3, #24
 8001d0a:	73bb      	strb	r3, [r7, #14]

    // 0. Reset MPU
    data_tx[0] = 0x6B; data_tx[1] = 0x80;
 8001d0c:	236b      	movs	r3, #107	; 0x6b
 8001d0e:	733b      	strb	r3, [r7, #12]
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK) {
 8001d14:	7bfb      	ldrb	r3, [r7, #15]
 8001d16:	b299      	uxth	r1, r3
 8001d18:	f107 020c 	add.w	r2, r7, #12
 8001d1c:	2364      	movs	r3, #100	; 0x64
 8001d1e:	9300      	str	r3, [sp, #0]
 8001d20:	2302      	movs	r3, #2
 8001d22:	488d      	ldr	r0, [pc, #564]	; (8001f58 <Init_IMU+0x264>)
 8001d24:	f001 fbb0 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <Init_IMU+0x4e>
        HAL_Delay(100);
 8001d2e:	2064      	movs	r0, #100	; 0x64
 8001d30:	f000 ff50 	bl	8002bd4 <HAL_Delay>
        check_flags |= (1 << 0);
 8001d34:	4b89      	ldr	r3, [pc, #548]	; (8001f5c <Init_IMU+0x268>)
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	4b87      	ldr	r3, [pc, #540]	; (8001f5c <Init_IMU+0x268>)
 8001d40:	801a      	strh	r2, [r3, #0]
    }

    // 1. Clock source = PLL with X axis gyroscope
    data_tx[0] = 0x6B; data_tx[1] = 0x01;
 8001d42:	236b      	movs	r3, #107	; 0x6b
 8001d44:	733b      	strb	r3, [r7, #12]
 8001d46:	2301      	movs	r3, #1
 8001d48:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	b299      	uxth	r1, r3
 8001d4e:	f107 020c 	add.w	r2, r7, #12
 8001d52:	2364      	movs	r3, #100	; 0x64
 8001d54:	9300      	str	r3, [sp, #0]
 8001d56:	2302      	movs	r3, #2
 8001d58:	487f      	ldr	r0, [pc, #508]	; (8001f58 <Init_IMU+0x264>)
 8001d5a:	f001 fb95 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d106      	bne.n	8001d72 <Init_IMU+0x7e>
        check_flags |= (1 << 1);
 8001d64:	4b7d      	ldr	r3, [pc, #500]	; (8001f5c <Init_IMU+0x268>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	4b7b      	ldr	r3, [pc, #492]	; (8001f5c <Init_IMU+0x268>)
 8001d70:	801a      	strh	r2, [r3, #0]

    // 2. Gyroscope config = ±250°/s
    data_tx[0] = 0x1B; data_tx[1] = 0x00;
 8001d72:	231b      	movs	r3, #27
 8001d74:	733b      	strb	r3, [r7, #12]
 8001d76:	2300      	movs	r3, #0
 8001d78:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK)
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	b299      	uxth	r1, r3
 8001d7e:	f107 020c 	add.w	r2, r7, #12
 8001d82:	2364      	movs	r3, #100	; 0x64
 8001d84:	9300      	str	r3, [sp, #0]
 8001d86:	2302      	movs	r3, #2
 8001d88:	4873      	ldr	r0, [pc, #460]	; (8001f58 <Init_IMU+0x264>)
 8001d8a:	f001 fb7d 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d106      	bne.n	8001da2 <Init_IMU+0xae>
        check_flags |= (1 << 2);
 8001d94:	4b71      	ldr	r3, [pc, #452]	; (8001f5c <Init_IMU+0x268>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b6f      	ldr	r3, [pc, #444]	; (8001f5c <Init_IMU+0x268>)
 8001da0:	801a      	strh	r2, [r3, #0]

    // 3. Accelerometer config = ±2g
    data_tx[0] = 0x1C; data_tx[1] = 0x00;
 8001da2:	231c      	movs	r3, #28
 8001da4:	733b      	strb	r3, [r7, #12]
 8001da6:	2300      	movs	r3, #0
 8001da8:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK)
 8001daa:	7bfb      	ldrb	r3, [r7, #15]
 8001dac:	b299      	uxth	r1, r3
 8001dae:	f107 020c 	add.w	r2, r7, #12
 8001db2:	2364      	movs	r3, #100	; 0x64
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2302      	movs	r3, #2
 8001db8:	4867      	ldr	r0, [pc, #412]	; (8001f58 <Init_IMU+0x264>)
 8001dba:	f001 fb65 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d106      	bne.n	8001dd2 <Init_IMU+0xde>
        check_flags |= (1 << 3);
 8001dc4:	4b65      	ldr	r3, [pc, #404]	; (8001f5c <Init_IMU+0x268>)
 8001dc6:	881b      	ldrh	r3, [r3, #0]
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b63      	ldr	r3, [pc, #396]	; (8001f5c <Init_IMU+0x268>)
 8001dd0:	801a      	strh	r2, [r3, #0]

    // 4. Enable I2C bypass mode (talk directly to magnetometer)
    data_tx[0] = 0x37; data_tx[1] = 0x02;
 8001dd2:	2337      	movs	r3, #55	; 0x37
 8001dd4:	733b      	strb	r3, [r7, #12]
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK) {
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	b299      	uxth	r1, r3
 8001dde:	f107 020c 	add.w	r2, r7, #12
 8001de2:	2364      	movs	r3, #100	; 0x64
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	2302      	movs	r3, #2
 8001de8:	485b      	ldr	r0, [pc, #364]	; (8001f58 <Init_IMU+0x264>)
 8001dea:	f001 fb4d 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d109      	bne.n	8001e08 <Init_IMU+0x114>
        HAL_Delay(10);
 8001df4:	200a      	movs	r0, #10
 8001df6:	f000 feed 	bl	8002bd4 <HAL_Delay>
        check_flags |= (1 << 4);
 8001dfa:	4b58      	ldr	r3, [pc, #352]	; (8001f5c <Init_IMU+0x268>)
 8001dfc:	881b      	ldrh	r3, [r3, #0]
 8001dfe:	f043 0310 	orr.w	r3, r3, #16
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	4b55      	ldr	r3, [pc, #340]	; (8001f5c <Init_IMU+0x268>)
 8001e06:	801a      	strh	r2, [r3, #0]
    }

    // 5. Power down magnetometer
    data_tx[0] = 0x0A; data_tx[1] = 0x00;
 8001e08:	230a      	movs	r3, #10
 8001e0a:	733b      	strb	r3, [r7, #12]
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100) == HAL_OK) {
 8001e10:	7bbb      	ldrb	r3, [r7, #14]
 8001e12:	b299      	uxth	r1, r3
 8001e14:	f107 020c 	add.w	r2, r7, #12
 8001e18:	2364      	movs	r3, #100	; 0x64
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	484e      	ldr	r0, [pc, #312]	; (8001f58 <Init_IMU+0x264>)
 8001e20:	f001 fb32 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d109      	bne.n	8001e3e <Init_IMU+0x14a>
        HAL_Delay(10);
 8001e2a:	200a      	movs	r0, #10
 8001e2c:	f000 fed2 	bl	8002bd4 <HAL_Delay>
        check_flags |= (1 << 5);
 8001e30:	4b4a      	ldr	r3, [pc, #296]	; (8001f5c <Init_IMU+0x268>)
 8001e32:	881b      	ldrh	r3, [r3, #0]
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	b29a      	uxth	r2, r3
 8001e3a:	4b48      	ldr	r3, [pc, #288]	; (8001f5c <Init_IMU+0x268>)
 8001e3c:	801a      	strh	r2, [r3, #0]
    }

    // 6. Enter fuse ROM access mode
    data_tx[0] = 0x0A; data_tx[1] = 0x0F;
 8001e3e:	230a      	movs	r3, #10
 8001e40:	733b      	strb	r3, [r7, #12]
 8001e42:	230f      	movs	r3, #15
 8001e44:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100) == HAL_OK) {
 8001e46:	7bbb      	ldrb	r3, [r7, #14]
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	f107 020c 	add.w	r2, r7, #12
 8001e4e:	2364      	movs	r3, #100	; 0x64
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2302      	movs	r3, #2
 8001e54:	4840      	ldr	r0, [pc, #256]	; (8001f58 <Init_IMU+0x264>)
 8001e56:	f001 fb17 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <Init_IMU+0x180>
        HAL_Delay(10);
 8001e60:	200a      	movs	r0, #10
 8001e62:	f000 feb7 	bl	8002bd4 <HAL_Delay>
        check_flags |= (1 << 6);
 8001e66:	4b3d      	ldr	r3, [pc, #244]	; (8001f5c <Init_IMU+0x268>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <Init_IMU+0x268>)
 8001e72:	801a      	strh	r2, [r3, #0]
    }

    // 7. Read sensitivity adjustment values (ASA)
    reg = 0x10;
 8001e74:	2310      	movs	r3, #16
 8001e76:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 8001e78:	7bbb      	ldrb	r3, [r7, #14]
 8001e7a:	b299      	uxth	r1, r3
 8001e7c:	f107 020b 	add.w	r2, r7, #11
 8001e80:	2364      	movs	r3, #100	; 0x64
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	2301      	movs	r3, #1
 8001e86:	4834      	ldr	r0, [pc, #208]	; (8001f58 <Init_IMU+0x264>)
 8001e88:	f001 fafe 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d112      	bne.n	8001eb8 <Init_IMU+0x1c4>
        HAL_I2C_Master_Receive(&hi2c2, mag_addr, asa, 3, 100) == HAL_OK) {
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	b299      	uxth	r1, r3
 8001e96:	1d3a      	adds	r2, r7, #4
 8001e98:	2364      	movs	r3, #100	; 0x64
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	482e      	ldr	r0, [pc, #184]	; (8001f58 <Init_IMU+0x264>)
 8001ea0:	f001 fbf0 	bl	8003684 <HAL_I2C_Master_Receive>
 8001ea4:	4603      	mov	r3, r0
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <Init_IMU+0x1c4>
        check_flags |= (1 << 7);
 8001eaa:	4b2c      	ldr	r3, [pc, #176]	; (8001f5c <Init_IMU+0x268>)
 8001eac:	881b      	ldrh	r3, [r3, #0]
 8001eae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <Init_IMU+0x268>)
 8001eb6:	801a      	strh	r2, [r3, #0]
    }

    // 8. Power down again
    data_tx[0] = 0x0A; data_tx[1] = 0x00;
 8001eb8:	230a      	movs	r3, #10
 8001eba:	733b      	strb	r3, [r7, #12]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100) == HAL_OK) {
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	b299      	uxth	r1, r3
 8001ec4:	f107 020c 	add.w	r2, r7, #12
 8001ec8:	2364      	movs	r3, #100	; 0x64
 8001eca:	9300      	str	r3, [sp, #0]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	4822      	ldr	r0, [pc, #136]	; (8001f58 <Init_IMU+0x264>)
 8001ed0:	f001 fada 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <Init_IMU+0x1fa>
        HAL_Delay(10);
 8001eda:	200a      	movs	r0, #10
 8001edc:	f000 fe7a 	bl	8002bd4 <HAL_Delay>
        check_flags |= (1 << 8);
 8001ee0:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <Init_IMU+0x268>)
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee8:	b29a      	uxth	r2, r3
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <Init_IMU+0x268>)
 8001eec:	801a      	strh	r2, [r3, #0]
    }

    // 9. Set magnetometer to continuous mode 2 (100Hz, 16-bit)
    uint8_t mode_ok = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 5; i++) {
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	e036      	b.n	8001f66 <Init_IMU+0x272>
        data_tx[0] = 0x0A; data_tx[1] = 0x16;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	733b      	strb	r3, [r7, #12]
 8001efc:	2316      	movs	r3, #22
 8001efe:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100);
 8001f00:	7bbb      	ldrb	r3, [r7, #14]
 8001f02:	b299      	uxth	r1, r3
 8001f04:	f107 020c 	add.w	r2, r7, #12
 8001f08:	2364      	movs	r3, #100	; 0x64
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	4812      	ldr	r0, [pc, #72]	; (8001f58 <Init_IMU+0x264>)
 8001f10:	f001 faba 	bl	8003488 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 8001f14:	200a      	movs	r0, #10
 8001f16:	f000 fe5d 	bl	8002bd4 <HAL_Delay>
        reg = 0x0A;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100);
 8001f1e:	7bbb      	ldrb	r3, [r7, #14]
 8001f20:	b299      	uxth	r1, r3
 8001f22:	f107 020b 	add.w	r2, r7, #11
 8001f26:	2364      	movs	r3, #100	; 0x64
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	480a      	ldr	r0, [pc, #40]	; (8001f58 <Init_IMU+0x264>)
 8001f2e:	f001 faab 	bl	8003488 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive(&hi2c2, mag_addr, &val, 1, 100);
 8001f32:	7bbb      	ldrb	r3, [r7, #14]
 8001f34:	b299      	uxth	r1, r3
 8001f36:	f107 020a 	add.w	r2, r7, #10
 8001f3a:	2364      	movs	r3, #100	; 0x64
 8001f3c:	9300      	str	r3, [sp, #0]
 8001f3e:	2301      	movs	r3, #1
 8001f40:	4805      	ldr	r0, [pc, #20]	; (8001f58 <Init_IMU+0x264>)
 8001f42:	f001 fb9f 	bl	8003684 <HAL_I2C_Master_Receive>
        if (val == 0x16) {
 8001f46:	7abb      	ldrb	r3, [r7, #10]
 8001f48:	2b16      	cmp	r3, #22
 8001f4a:	d109      	bne.n	8001f60 <Init_IMU+0x26c>
            mode_ok = 1;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	75fb      	strb	r3, [r7, #23]
            break;
 8001f50:	e00c      	b.n	8001f6c <Init_IMU+0x278>
 8001f52:	bf00      	nop
 8001f54:	08005eac 	.word	0x08005eac
 8001f58:	20000158 	.word	0x20000158
 8001f5c:	200000c4 	.word	0x200000c4
    for (int i = 0; i < 5; i++) {
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	3301      	adds	r3, #1
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	ddc5      	ble.n	8001ef8 <Init_IMU+0x204>
        }
    }
    if (mode_ok)
 8001f6c:	7dfb      	ldrb	r3, [r7, #23]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <Init_IMU+0x28c>
        check_flags |= (1 << 9);
 8001f72:	4b33      	ldr	r3, [pc, #204]	; (8002040 <Init_IMU+0x34c>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b30      	ldr	r3, [pc, #192]	; (8002040 <Init_IMU+0x34c>)
 8001f7e:	801a      	strh	r2, [r3, #0]

    // 10. Confirm ST1 register responds
    reg = 0x02;
 8001f80:	2302      	movs	r3, #2
 8001f82:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 8001f84:	7bbb      	ldrb	r3, [r7, #14]
 8001f86:	b299      	uxth	r1, r3
 8001f88:	f107 020b 	add.w	r2, r7, #11
 8001f8c:	2364      	movs	r3, #100	; 0x64
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	2301      	movs	r3, #1
 8001f92:	482c      	ldr	r0, [pc, #176]	; (8002044 <Init_IMU+0x350>)
 8001f94:	f001 fa78 	bl	8003488 <HAL_I2C_Master_Transmit>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d113      	bne.n	8001fc6 <Init_IMU+0x2d2>
        HAL_I2C_Master_Receive(&hi2c2, mag_addr, &val, 1, 100) == HAL_OK) {
 8001f9e:	7bbb      	ldrb	r3, [r7, #14]
 8001fa0:	b299      	uxth	r1, r3
 8001fa2:	f107 020a 	add.w	r2, r7, #10
 8001fa6:	2364      	movs	r3, #100	; 0x64
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2301      	movs	r3, #1
 8001fac:	4825      	ldr	r0, [pc, #148]	; (8002044 <Init_IMU+0x350>)
 8001fae:	f001 fb69 	bl	8003684 <HAL_I2C_Master_Receive>
 8001fb2:	4603      	mov	r3, r0
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d106      	bne.n	8001fc6 <Init_IMU+0x2d2>
        check_flags |= (1 << 10);
 8001fb8:	4b21      	ldr	r3, [pc, #132]	; (8002040 <Init_IMU+0x34c>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc0:	b29a      	uxth	r2, r3
 8001fc2:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <Init_IMU+0x34c>)
 8001fc4:	801a      	strh	r2, [r3, #0]
    }

    // 11. Enable RAW_RDY_EN interrupt (enable data ready interrupt)
    val = 0x01;  // Bit 0 = RAW_RDY_EN
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c2, MPU_ADDR, 0x38, 1, &val, 1, 100);
 8001fca:	2364      	movs	r3, #100	; 0x64
 8001fcc:	9302      	str	r3, [sp, #8]
 8001fce:	2301      	movs	r3, #1
 8001fd0:	9301      	str	r3, [sp, #4]
 8001fd2:	f107 030a 	add.w	r3, r7, #10
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	2238      	movs	r2, #56	; 0x38
 8001fdc:	21d2      	movs	r1, #210	; 0xd2
 8001fde:	4819      	ldr	r0, [pc, #100]	; (8002044 <Init_IMU+0x350>)
 8001fe0:	f001 fdbc 	bl	8003b5c <HAL_I2C_Mem_Write>

    // 12. Configure INT pin: active LOW, open-drain, pulse mode (not latch)

    val = 0x12; // 0x10 (active low) + 0x02 (bypass enabled)
 8001fe4:	2312      	movs	r3, #18
 8001fe6:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c2, MPU_ADDR, 0x37, 1, &val, 1, 100);
 8001fe8:	2364      	movs	r3, #100	; 0x64
 8001fea:	9302      	str	r3, [sp, #8]
 8001fec:	2301      	movs	r3, #1
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	f107 030a 	add.w	r3, r7, #10
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	2237      	movs	r2, #55	; 0x37
 8001ffa:	21d2      	movs	r1, #210	; 0xd2
 8001ffc:	4811      	ldr	r0, [pc, #68]	; (8002044 <Init_IMU+0x350>)
 8001ffe:	f001 fdad 	bl	8003b5c <HAL_I2C_Mem_Write>


    // 13. CONFIG (DLPF) = 3 (Accel/Gyro ~44Hz BW, 1kHz sample)
    data_tx[0] = 0x1A; data_tx[1] = 0x03;
 8002002:	231a      	movs	r3, #26
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	2303      	movs	r3, #3
 8002008:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, data_tx, 2, 100);
 800200a:	f107 020c 	add.w	r2, r7, #12
 800200e:	2364      	movs	r3, #100	; 0x64
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2302      	movs	r3, #2
 8002014:	21d2      	movs	r1, #210	; 0xd2
 8002016:	480b      	ldr	r0, [pc, #44]	; (8002044 <Init_IMU+0x350>)
 8002018:	f001 fa36 	bl	8003488 <HAL_I2C_Master_Transmit>

    // 14. SMPLRT_DIV = 9 → 1kHz / (1+9) = 100Hz output rate
    data_tx[0] = 0x19; data_tx[1] = 9;
 800201c:	2319      	movs	r3, #25
 800201e:	733b      	strb	r3, [r7, #12]
 8002020:	2309      	movs	r3, #9
 8002022:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, data_tx, 2, 100);
 8002024:	f107 020c 	add.w	r2, r7, #12
 8002028:	2364      	movs	r3, #100	; 0x64
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2302      	movs	r3, #2
 800202e:	21d2      	movs	r1, #210	; 0xd2
 8002030:	4804      	ldr	r0, [pc, #16]	; (8002044 <Init_IMU+0x350>)
 8002032:	f001 fa29 	bl	8003488 <HAL_I2C_Master_Transmit>
}
 8002036:	bf00      	nop
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200000c4 	.word	0x200000c4
 8002044:	20000158 	.word	0x20000158

08002048 <GetData__stMPU_9255>:


IMU_Data GetData__stMPU_9255(void) {
 8002048:	b5b0      	push	{r4, r5, r7, lr}
 800204a:	b09a      	sub	sp, #104	; 0x68
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
	uint8_t imuData[14] = {0};
 8002050:	2300      	movs	r3, #0
 8002052:	653b      	str	r3, [r7, #80]	; 0x50
 8002054:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	811a      	strh	r2, [r3, #8]
	uint8_t magData[7] = {0};
 8002060:	2300      	movs	r3, #0
 8002062:	64bb      	str	r3, [r7, #72]	; 0x48
 8002064:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002068:	2100      	movs	r1, #0
 800206a:	460a      	mov	r2, r1
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	460a      	mov	r2, r1
 8002070:	709a      	strb	r2, [r3, #2]
	uint8_t status1 = 0;
 8002072:	2300      	movs	r3, #0
 8002074:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t reg;
	int16_t raw[10] = {0};
 8002078:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
	IMU_Data result;

	// Leer 14 bytes: accel, temp, gyro
	reg = ACCEL_XOUT_H;
 8002088:	233b      	movs	r3, #59	; 0x3b
 800208a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, &reg, 1, HAL_MAX_DELAY);
 800208e:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002092:	f04f 33ff 	mov.w	r3, #4294967295
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	2301      	movs	r3, #1
 800209a:	21d2      	movs	r1, #210	; 0xd2
 800209c:	4882      	ldr	r0, [pc, #520]	; (80022a8 <GetData__stMPU_9255+0x260>)
 800209e:	f001 f9f3 	bl	8003488 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MPU_ADDR, imuData, 14, HAL_MAX_DELAY);
 80020a2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80020a6:	f04f 33ff 	mov.w	r3, #4294967295
 80020aa:	9300      	str	r3, [sp, #0]
 80020ac:	230e      	movs	r3, #14
 80020ae:	21d2      	movs	r1, #210	; 0xd2
 80020b0:	487d      	ldr	r0, [pc, #500]	; (80022a8 <GetData__stMPU_9255+0x260>)
 80020b2:	f001 fae7 	bl	8003684 <HAL_I2C_Master_Receive>

	raw[0] = (imuData[0] << 8) | imuData[1];  // AccX
 80020b6:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80020ba:	021b      	lsls	r3, r3, #8
 80020bc:	b21a      	sxth	r2, r3
 80020be:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4313      	orrs	r3, r2
 80020c6:	b21b      	sxth	r3, r3
 80020c8:	863b      	strh	r3, [r7, #48]	; 0x30
	raw[1] = (imuData[2] << 8) | imuData[3];  // AccY
 80020ca:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	4313      	orrs	r3, r2
 80020da:	b21b      	sxth	r3, r3
 80020dc:	867b      	strh	r3, [r7, #50]	; 0x32
	raw[2] = (imuData[4] << 8) | imuData[5];  // AccZ
 80020de:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80020e2:	021b      	lsls	r3, r3, #8
 80020e4:	b21a      	sxth	r2, r3
 80020e6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	86bb      	strh	r3, [r7, #52]	; 0x34
	raw[3] = (imuData[6] << 8) | imuData[7];  // Temp
 80020f2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80020f6:	021b      	lsls	r3, r3, #8
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80020fe:	b21b      	sxth	r3, r3
 8002100:	4313      	orrs	r3, r2
 8002102:	b21b      	sxth	r3, r3
 8002104:	86fb      	strh	r3, [r7, #54]	; 0x36
	raw[4] = (imuData[8] << 8) | imuData[9];  // GyroX
 8002106:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800210a:	021b      	lsls	r3, r3, #8
 800210c:	b21a      	sxth	r2, r3
 800210e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8002112:	b21b      	sxth	r3, r3
 8002114:	4313      	orrs	r3, r2
 8002116:	b21b      	sxth	r3, r3
 8002118:	873b      	strh	r3, [r7, #56]	; 0x38
	raw[5] = (imuData[10] << 8) | imuData[11]; // GyroY
 800211a:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21a      	sxth	r2, r3
 8002122:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21b      	sxth	r3, r3
 800212c:	877b      	strh	r3, [r7, #58]	; 0x3a
	raw[6] = (imuData[12] << 8) | imuData[13]; // GyroZ
 800212e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	87bb      	strh	r3, [r7, #60]	; 0x3c

	HAL_Delay(10);
 8002142:	200a      	movs	r0, #10
 8002144:	f000 fd46 	bl	8002bd4 <HAL_Delay>
	// Verifica si hay datos magnéticos listos
	reg = MAG_STATUS_1;
 8002148:	2302      	movs	r3, #2
 800214a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, &reg, 1, HAL_MAX_DELAY);
 800214e:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002152:	f04f 33ff 	mov.w	r3, #4294967295
 8002156:	9300      	str	r3, [sp, #0]
 8002158:	2301      	movs	r3, #1
 800215a:	2118      	movs	r1, #24
 800215c:	4852      	ldr	r0, [pc, #328]	; (80022a8 <GetData__stMPU_9255+0x260>)
 800215e:	f001 f993 	bl	8003488 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, &status1, 1, HAL_MAX_DELAY);
 8002162:	f107 0247 	add.w	r2, r7, #71	; 0x47
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	2301      	movs	r3, #1
 800216e:	2118      	movs	r1, #24
 8002170:	484d      	ldr	r0, [pc, #308]	; (80022a8 <GetData__stMPU_9255+0x260>)
 8002172:	f001 fa87 	bl	8003684 <HAL_I2C_Master_Receive>

	if ((status1 & MAG_DATA_READY) == MAG_DATA_READY) {
 8002176:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	2b00      	cmp	r3, #0
 8002180:	d03c      	beq.n	80021fc <GetData__stMPU_9255+0x1b4>
		// Leer datos magnéticos (6 + 1 bytes: HOFL)
		reg = MAG_HXL;
 8002182:	2303      	movs	r3, #3
 8002184:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, &reg, 1, HAL_MAX_DELAY);
 8002188:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800218c:	f04f 33ff 	mov.w	r3, #4294967295
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2301      	movs	r3, #1
 8002194:	2118      	movs	r1, #24
 8002196:	4844      	ldr	r0, [pc, #272]	; (80022a8 <GetData__stMPU_9255+0x260>)
 8002198:	f001 f976 	bl	8003488 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, magData, 7, HAL_MAX_DELAY);
 800219c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80021a0:	f04f 33ff 	mov.w	r3, #4294967295
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	2307      	movs	r3, #7
 80021a8:	2118      	movs	r1, #24
 80021aa:	483f      	ldr	r0, [pc, #252]	; (80022a8 <GetData__stMPU_9255+0x260>)
 80021ac:	f001 fa6a 	bl	8003684 <HAL_I2C_Master_Receive>

		// Si no hay overflow
		if (!(magData[6] & MAG_OVERFLOW_BIT)) {
 80021b0:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11f      	bne.n	80021fc <GetData__stMPU_9255+0x1b4>
			raw[7] = (magData[1] << 8) | magData[0]; // MagX
 80021bc:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80021c0:	021b      	lsls	r3, r3, #8
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80021c8:	b21b      	sxth	r3, r3
 80021ca:	4313      	orrs	r3, r2
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
			raw[8] = (magData[3] << 8) | magData[2]; // MagY
 80021d0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	b21a      	sxth	r2, r3
 80021d8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80021dc:	b21b      	sxth	r3, r3
 80021de:	4313      	orrs	r3, r2
 80021e0:	b21b      	sxth	r3, r3
 80021e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			raw[9] = (magData[5] << 8) | magData[4]; // MagZ
 80021e6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21b      	sxth	r3, r3
 80021f8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		}
	}

	// Copiar a estructura
	result.AccXData  = (float)raw[0];
 80021fc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002200:	4618      	mov	r0, r3
 8002202:	f7fe fc9d 	bl	8000b40 <__aeabi_i2f>
 8002206:	4603      	mov	r3, r0
 8002208:	60bb      	str	r3, [r7, #8]
	result.AccYData  = (float)raw[1];
 800220a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe fc96 	bl	8000b40 <__aeabi_i2f>
 8002214:	4603      	mov	r3, r0
 8002216:	60fb      	str	r3, [r7, #12]
	result.AccZData  = (float)raw[2];
 8002218:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 800221c:	4618      	mov	r0, r3
 800221e:	f7fe fc8f 	bl	8000b40 <__aeabi_i2f>
 8002222:	4603      	mov	r3, r0
 8002224:	613b      	str	r3, [r7, #16]
	result.Temp      = (float)raw[3];
 8002226:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fc88 	bl	8000b40 <__aeabi_i2f>
 8002230:	4603      	mov	r3, r0
 8002232:	617b      	str	r3, [r7, #20]
	result.GyroXData = (float)raw[4];
 8002234:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fc81 	bl	8000b40 <__aeabi_i2f>
 800223e:	4603      	mov	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
	result.GyroYData = (float)raw[5];
 8002242:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8002246:	4618      	mov	r0, r3
 8002248:	f7fe fc7a 	bl	8000b40 <__aeabi_i2f>
 800224c:	4603      	mov	r3, r0
 800224e:	61fb      	str	r3, [r7, #28]
	result.GyroZData = (float)raw[6];
 8002250:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8002254:	4618      	mov	r0, r3
 8002256:	f7fe fc73 	bl	8000b40 <__aeabi_i2f>
 800225a:	4603      	mov	r3, r0
 800225c:	623b      	str	r3, [r7, #32]
	result.MagXData  = (float)raw[7];
 800225e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fc6c 	bl	8000b40 <__aeabi_i2f>
 8002268:	4603      	mov	r3, r0
 800226a:	627b      	str	r3, [r7, #36]	; 0x24
	result.MagYData  = (float)raw[8];
 800226c:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002270:	4618      	mov	r0, r3
 8002272:	f7fe fc65 	bl	8000b40 <__aeabi_i2f>
 8002276:	4603      	mov	r3, r0
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
	result.MagZData  = (float)raw[9];
 800227a:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 800227e:	4618      	mov	r0, r3
 8002280:	f7fe fc5e 	bl	8000b40 <__aeabi_i2f>
 8002284:	4603      	mov	r3, r0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c

	return result;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	461d      	mov	r5, r3
 800228c:	f107 0408 	add.w	r4, r7, #8
 8002290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002292:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002298:	e894 0003 	ldmia.w	r4, {r0, r1}
 800229c:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	3760      	adds	r7, #96	; 0x60
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bdb0      	pop	{r4, r5, r7, pc}
 80022a8:	20000158 	.word	0x20000158

080022ac <calibrate_magnetometer>:


MagCalibration calibrate_magnetometer(uint16_t samples) {
 80022ac:	b5b0      	push	{r4, r5, r7, lr}
 80022ae:	b09a      	sub	sp, #104	; 0x68
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
    float minX =  32767, minY =  32767, minZ =  32767;
 80022b8:	4b5b      	ldr	r3, [pc, #364]	; (8002428 <calibrate_magnetometer+0x17c>)
 80022ba:	667b      	str	r3, [r7, #100]	; 0x64
 80022bc:	4b5a      	ldr	r3, [pc, #360]	; (8002428 <calibrate_magnetometer+0x17c>)
 80022be:	663b      	str	r3, [r7, #96]	; 0x60
 80022c0:	4b59      	ldr	r3, [pc, #356]	; (8002428 <calibrate_magnetometer+0x17c>)
 80022c2:	65fb      	str	r3, [r7, #92]	; 0x5c
    float maxX = -32768, maxY = -32768, maxZ = -32768;
 80022c4:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80022c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80022ca:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80022ce:	657b      	str	r3, [r7, #84]	; 0x54
 80022d0:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80022d4:	653b      	str	r3, [r7, #80]	; 0x50

    for (uint16_t i = 0; i < samples; i++) {
 80022d6:	2300      	movs	r3, #0
 80022d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80022dc:	e048      	b.n	8002370 <calibrate_magnetometer+0xc4>
        IMU_Data lectura = GetData__stMPU_9255();
 80022de:	f107 030c 	add.w	r3, r7, #12
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff feb0 	bl	8002048 <GetData__stMPU_9255>

        if (lectura.MagXData < minX) minX = lectura.MagXData;
 80022e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ea:	4619      	mov	r1, r3
 80022ec:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80022ee:	f7fe fe37 	bl	8000f60 <__aeabi_fcmpgt>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <calibrate_magnetometer+0x50>
 80022f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fa:	667b      	str	r3, [r7, #100]	; 0x64
        if (lectura.MagYData < minY) minY = lectura.MagYData;
 80022fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fe:	4619      	mov	r1, r3
 8002300:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002302:	f7fe fe2d 	bl	8000f60 <__aeabi_fcmpgt>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <calibrate_magnetometer+0x64>
 800230c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800230e:	663b      	str	r3, [r7, #96]	; 0x60
        if (lectura.MagZData < minZ) minZ = lectura.MagZData;
 8002310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002312:	4619      	mov	r1, r3
 8002314:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002316:	f7fe fe23 	bl	8000f60 <__aeabi_fcmpgt>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <calibrate_magnetometer+0x78>
 8002320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002322:	65fb      	str	r3, [r7, #92]	; 0x5c

        if (lectura.MagXData > maxX) maxX = lectura.MagXData;
 8002324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002326:	4619      	mov	r1, r3
 8002328:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800232a:	f7fe fdfb 	bl	8000f24 <__aeabi_fcmplt>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <calibrate_magnetometer+0x8c>
 8002334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002336:	65bb      	str	r3, [r7, #88]	; 0x58
        if (lectura.MagYData > maxY) maxY = lectura.MagYData;
 8002338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800233a:	4619      	mov	r1, r3
 800233c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800233e:	f7fe fdf1 	bl	8000f24 <__aeabi_fcmplt>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d001      	beq.n	800234c <calibrate_magnetometer+0xa0>
 8002348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234a:	657b      	str	r3, [r7, #84]	; 0x54
        if (lectura.MagZData > maxZ) maxZ = lectura.MagZData;
 800234c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800234e:	4619      	mov	r1, r3
 8002350:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002352:	f7fe fde7 	bl	8000f24 <__aeabi_fcmplt>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d001      	beq.n	8002360 <calibrate_magnetometer+0xb4>
 800235c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235e:	653b      	str	r3, [r7, #80]	; 0x50

        HAL_Delay(10);
 8002360:	200a      	movs	r0, #10
 8002362:	f000 fc37 	bl	8002bd4 <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 8002366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800236a:	3301      	adds	r3, #1
 800236c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002370:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002374:	887b      	ldrh	r3, [r7, #2]
 8002376:	429a      	cmp	r2, r3
 8002378:	d3b1      	bcc.n	80022de <calibrate_magnetometer+0x32>
    }

    MagCalibration result;
    result.offsetX = (maxX + minX) / 2.0f;
 800237a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800237c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800237e:	f7fe fb2b 	bl	80009d8 <__addsf3>
 8002382:	4603      	mov	r3, r0
 8002384:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fce1 	bl	8000d50 <__aeabi_fdiv>
 800238e:	4603      	mov	r3, r0
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
    result.offsetY = (maxY + minY) / 2.0f;
 8002392:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002394:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002396:	f7fe fb1f 	bl	80009d8 <__addsf3>
 800239a:	4603      	mov	r3, r0
 800239c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe fcd5 	bl	8000d50 <__aeabi_fdiv>
 80023a6:	4603      	mov	r3, r0
 80023a8:	63bb      	str	r3, [r7, #56]	; 0x38
    result.offsetZ = (maxZ + minZ) / 2.0f;
 80023aa:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80023ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023ae:	f7fe fb13 	bl	80009d8 <__addsf3>
 80023b2:	4603      	mov	r3, r0
 80023b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023b8:	4618      	mov	r0, r3
 80023ba:	f7fe fcc9 	bl	8000d50 <__aeabi_fdiv>
 80023be:	4603      	mov	r3, r0
 80023c0:	63fb      	str	r3, [r7, #60]	; 0x3c

    result.scaleX = (maxX - minX) / 2.0f;
 80023c2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80023c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80023c6:	f7fe fb05 	bl	80009d4 <__aeabi_fsub>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7fe fcbd 	bl	8000d50 <__aeabi_fdiv>
 80023d6:	4603      	mov	r3, r0
 80023d8:	643b      	str	r3, [r7, #64]	; 0x40
    result.scaleY = (maxY - minY) / 2.0f;
 80023da:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80023dc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80023de:	f7fe faf9 	bl	80009d4 <__aeabi_fsub>
 80023e2:	4603      	mov	r3, r0
 80023e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe fcb1 	bl	8000d50 <__aeabi_fdiv>
 80023ee:	4603      	mov	r3, r0
 80023f0:	647b      	str	r3, [r7, #68]	; 0x44
    result.scaleZ = (maxZ - minZ) / 2.0f;
 80023f2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80023f4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80023f6:	f7fe faed 	bl	80009d4 <__aeabi_fsub>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fca5 	bl	8000d50 <__aeabi_fdiv>
 8002406:	4603      	mov	r3, r0
 8002408:	64bb      	str	r3, [r7, #72]	; 0x48

    return result;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	461d      	mov	r5, r3
 800240e:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002412:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002414:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002416:	e894 0003 	ldmia.w	r4, {r0, r1}
 800241a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	3768      	adds	r7, #104	; 0x68
 8002422:	46bd      	mov	sp, r7
 8002424:	bdb0      	pop	{r4, r5, r7, pc}
 8002426:	bf00      	nop
 8002428:	46fffe00 	.word	0x46fffe00

0800242c <calibrate_gyroZ>:

GyroCalibration calibrate_gyroZ(uint16_t samples) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b094      	sub	sp, #80	; 0x50
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	460b      	mov	r3, r1
 8002436:	807b      	strh	r3, [r7, #2]
    float minZ =  32767;
 8002438:	4b28      	ldr	r3, [pc, #160]	; (80024dc <calibrate_gyroZ+0xb0>)
 800243a:	64fb      	str	r3, [r7, #76]	; 0x4c
    float maxZ = -32768;
 800243c:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8002440:	64bb      	str	r3, [r7, #72]	; 0x48
    float sumZ = 0;
 8002442:	f04f 0300 	mov.w	r3, #0
 8002446:	647b      	str	r3, [r7, #68]	; 0x44

    for (uint16_t i = 0; i < samples; i++) {
 8002448:	2300      	movs	r3, #0
 800244a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800244e:	e026      	b.n	800249e <calibrate_gyroZ+0x72>
        IMU_Data lectura = GetData__stMPU_9255();
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fdf7 	bl	8002048 <GetData__stMPU_9255>
        float gyroZ = lectura.GyroZData;
 800245a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245c:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (gyroZ < minZ) minZ = gyroZ;
 800245e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002460:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002462:	f7fe fd5f 	bl	8000f24 <__aeabi_fcmplt>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <calibrate_gyroZ+0x44>
 800246c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800246e:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (gyroZ > maxZ) maxZ = gyroZ;
 8002470:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002472:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002474:	f7fe fd74 	bl	8000f60 <__aeabi_fcmpgt>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <calibrate_gyroZ+0x56>
 800247e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002480:	64bb      	str	r3, [r7, #72]	; 0x48

        sumZ += gyroZ;
 8002482:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002484:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002486:	f7fe faa7 	bl	80009d8 <__addsf3>
 800248a:	4603      	mov	r3, r0
 800248c:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_Delay(2);
 800248e:	2002      	movs	r0, #2
 8002490:	f000 fba0 	bl	8002bd4 <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 8002494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002498:	3301      	adds	r3, #1
 800249a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800249e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d3d3      	bcc.n	8002450 <calibrate_gyroZ+0x24>
    }

    GyroCalibration result;
    result.offsetZ = sumZ / samples;
 80024a8:	887b      	ldrh	r3, [r7, #2]
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7fe fb48 	bl	8000b40 <__aeabi_i2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	4619      	mov	r1, r3
 80024b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80024b6:	f7fe fc4b 	bl	8000d50 <__aeabi_fdiv>
 80024ba:	4603      	mov	r3, r0
 80024bc:	637b      	str	r3, [r7, #52]	; 0x34

    //Scaling removed chat said so
    //result.scaleZ = (maxZ - minZ) / 2.0f;
    result.scaleZ = 1.0f;  // No scaling
 80024be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80024c2:	63bb      	str	r3, [r7, #56]	; 0x38

    return result;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80024d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	3750      	adds	r7, #80	; 0x50
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	46fffe00 	.word	0x46fffe00

080024e0 <ReadIMU_Average>:



IMU_Data ReadIMU_Average(uint8_t samples) {
 80024e0:	b5b0      	push	{r4, r5, r7, lr}
 80024e2:	b098      	sub	sp, #96	; 0x60
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	70fb      	strb	r3, [r7, #3]
    IMU_Data avg = {0};
 80024ec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80024f0:	2228      	movs	r2, #40	; 0x28
 80024f2:	2100      	movs	r1, #0
 80024f4:	4618      	mov	r0, r3
 80024f6:	f003 fcc5 	bl	8005e84 <memset>

    for (uint8_t i = 0; i < samples; ) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002500:	e059      	b.n	80025b6 <ReadIMU_Average+0xd6>
        if (mpu_data_ready) {
 8002502:	4b6d      	ldr	r3, [pc, #436]	; (80026b8 <ReadIMU_Average+0x1d8>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	b2db      	uxtb	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d054      	beq.n	80025b6 <ReadIMU_Average+0xd6>
            mpu_data_ready = 0;
 800250c:	4b6a      	ldr	r3, [pc, #424]	; (80026b8 <ReadIMU_Average+0x1d8>)
 800250e:	2200      	movs	r2, #0
 8002510:	701a      	strb	r2, [r3, #0]

            IMU_Data lectura = GetData__stMPU_9255();
 8002512:	f107 030c 	add.w	r3, r7, #12
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff fd96 	bl	8002048 <GetData__stMPU_9255>
            avg.AccXData += lectura.AccXData;
 800251c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	4611      	mov	r1, r2
 8002522:	4618      	mov	r0, r3
 8002524:	f7fe fa58 	bl	80009d8 <__addsf3>
 8002528:	4603      	mov	r3, r0
 800252a:	637b      	str	r3, [r7, #52]	; 0x34
            avg.AccYData += lectura.AccYData;
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fa50 	bl	80009d8 <__addsf3>
 8002538:	4603      	mov	r3, r0
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
            avg.AccZData += lectura.AccZData;
 800253c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fa48 	bl	80009d8 <__addsf3>
 8002548:	4603      	mov	r3, r0
 800254a:	63fb      	str	r3, [r7, #60]	; 0x3c
            avg.GyroXData += lectura.GyroXData;
 800254c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f7fe fa40 	bl	80009d8 <__addsf3>
 8002558:	4603      	mov	r3, r0
 800255a:	647b      	str	r3, [r7, #68]	; 0x44
            avg.GyroYData += lectura.GyroYData;
 800255c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800255e:	6a3a      	ldr	r2, [r7, #32]
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f7fe fa38 	bl	80009d8 <__addsf3>
 8002568:	4603      	mov	r3, r0
 800256a:	64bb      	str	r3, [r7, #72]	; 0x48
            avg.GyroZData += lectura.GyroZData;
 800256c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002570:	4611      	mov	r1, r2
 8002572:	4618      	mov	r0, r3
 8002574:	f7fe fa30 	bl	80009d8 <__addsf3>
 8002578:	4603      	mov	r3, r0
 800257a:	64fb      	str	r3, [r7, #76]	; 0x4c
            avg.MagXData  += lectura.MagXData;
 800257c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800257e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fa28 	bl	80009d8 <__addsf3>
 8002588:	4603      	mov	r3, r0
 800258a:	653b      	str	r3, [r7, #80]	; 0x50
            avg.MagYData  += lectura.MagYData;
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800258e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002590:	4611      	mov	r1, r2
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fa20 	bl	80009d8 <__addsf3>
 8002598:	4603      	mov	r3, r0
 800259a:	657b      	str	r3, [r7, #84]	; 0x54
            avg.MagZData  += lectura.MagZData;
 800259c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800259e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fa18 	bl	80009d8 <__addsf3>
 80025a8:	4603      	mov	r3, r0
 80025aa:	65bb      	str	r3, [r7, #88]	; 0x58
            i++;
 80025ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80025b0:	3301      	adds	r3, #1
 80025b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    for (uint8_t i = 0; i < samples; ) {
 80025b6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3a0      	bcc.n	8002502 <ReadIMU_Average+0x22>
        }
    }

    avg.AccXData /= samples;
 80025c0:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80025c2:	78fb      	ldrb	r3, [r7, #3]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7fe fabb 	bl	8000b40 <__aeabi_i2f>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4619      	mov	r1, r3
 80025ce:	4620      	mov	r0, r4
 80025d0:	f7fe fbbe 	bl	8000d50 <__aeabi_fdiv>
 80025d4:	4603      	mov	r3, r0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
    avg.AccYData /= samples;
 80025d8:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe faaf 	bl	8000b40 <__aeabi_i2f>
 80025e2:	4603      	mov	r3, r0
 80025e4:	4619      	mov	r1, r3
 80025e6:	4620      	mov	r0, r4
 80025e8:	f7fe fbb2 	bl	8000d50 <__aeabi_fdiv>
 80025ec:	4603      	mov	r3, r0
 80025ee:	63bb      	str	r3, [r7, #56]	; 0x38
    avg.AccZData /= samples;
 80025f0:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80025f2:	78fb      	ldrb	r3, [r7, #3]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7fe faa3 	bl	8000b40 <__aeabi_i2f>
 80025fa:	4603      	mov	r3, r0
 80025fc:	4619      	mov	r1, r3
 80025fe:	4620      	mov	r0, r4
 8002600:	f7fe fba6 	bl	8000d50 <__aeabi_fdiv>
 8002604:	4603      	mov	r3, r0
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
    avg.GyroXData /= samples;
 8002608:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800260a:	78fb      	ldrb	r3, [r7, #3]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fe fa97 	bl	8000b40 <__aeabi_i2f>
 8002612:	4603      	mov	r3, r0
 8002614:	4619      	mov	r1, r3
 8002616:	4620      	mov	r0, r4
 8002618:	f7fe fb9a 	bl	8000d50 <__aeabi_fdiv>
 800261c:	4603      	mov	r3, r0
 800261e:	647b      	str	r3, [r7, #68]	; 0x44
    avg.GyroYData /= samples;
 8002620:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8002622:	78fb      	ldrb	r3, [r7, #3]
 8002624:	4618      	mov	r0, r3
 8002626:	f7fe fa8b 	bl	8000b40 <__aeabi_i2f>
 800262a:	4603      	mov	r3, r0
 800262c:	4619      	mov	r1, r3
 800262e:	4620      	mov	r0, r4
 8002630:	f7fe fb8e 	bl	8000d50 <__aeabi_fdiv>
 8002634:	4603      	mov	r3, r0
 8002636:	64bb      	str	r3, [r7, #72]	; 0x48
    avg.GyroZData /= samples;
 8002638:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fe fa7f 	bl	8000b40 <__aeabi_i2f>
 8002642:	4603      	mov	r3, r0
 8002644:	4619      	mov	r1, r3
 8002646:	4620      	mov	r0, r4
 8002648:	f7fe fb82 	bl	8000d50 <__aeabi_fdiv>
 800264c:	4603      	mov	r3, r0
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
    avg.MagXData  /= samples;
 8002650:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 8002652:	78fb      	ldrb	r3, [r7, #3]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fa73 	bl	8000b40 <__aeabi_i2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4619      	mov	r1, r3
 800265e:	4620      	mov	r0, r4
 8002660:	f7fe fb76 	bl	8000d50 <__aeabi_fdiv>
 8002664:	4603      	mov	r3, r0
 8002666:	653b      	str	r3, [r7, #80]	; 0x50
    avg.MagYData  /= samples;
 8002668:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 800266a:	78fb      	ldrb	r3, [r7, #3]
 800266c:	4618      	mov	r0, r3
 800266e:	f7fe fa67 	bl	8000b40 <__aeabi_i2f>
 8002672:	4603      	mov	r3, r0
 8002674:	4619      	mov	r1, r3
 8002676:	4620      	mov	r0, r4
 8002678:	f7fe fb6a 	bl	8000d50 <__aeabi_fdiv>
 800267c:	4603      	mov	r3, r0
 800267e:	657b      	str	r3, [r7, #84]	; 0x54
    avg.MagZData  /= samples;
 8002680:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fa5b 	bl	8000b40 <__aeabi_i2f>
 800268a:	4603      	mov	r3, r0
 800268c:	4619      	mov	r1, r3
 800268e:	4620      	mov	r0, r4
 8002690:	f7fe fb5e 	bl	8000d50 <__aeabi_fdiv>
 8002694:	4603      	mov	r3, r0
 8002696:	65bb      	str	r3, [r7, #88]	; 0x58

    return avg;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	461d      	mov	r5, r3
 800269c:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ac:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	3760      	adds	r7, #96	; 0x60
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bdb0      	pop	{r4, r5, r7, pc}
 80026b8:	2000024c 	.word	0x2000024c

080026bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026c0:	b672      	cpsid	i
}
 80026c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026c4:	e7fe      	b.n	80026c4 <Error_Handler+0x8>
	...

080026c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026ce:	4b15      	ldr	r3, [pc, #84]	; (8002724 <HAL_MspInit+0x5c>)
 80026d0:	699b      	ldr	r3, [r3, #24]
 80026d2:	4a14      	ldr	r2, [pc, #80]	; (8002724 <HAL_MspInit+0x5c>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6193      	str	r3, [r2, #24]
 80026da:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_MspInit+0x5c>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b0f      	ldr	r3, [pc, #60]	; (8002724 <HAL_MspInit+0x5c>)
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	4a0e      	ldr	r2, [pc, #56]	; (8002724 <HAL_MspInit+0x5c>)
 80026ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f0:	61d3      	str	r3, [r2, #28]
 80026f2:	4b0c      	ldr	r3, [pc, #48]	; (8002724 <HAL_MspInit+0x5c>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026fa:	607b      	str	r3, [r7, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <HAL_MspInit+0x60>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	4a04      	ldr	r2, [pc, #16]	; (8002728 <HAL_MspInit+0x60>)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800271a:	bf00      	nop
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	bc80      	pop	{r7}
 8002722:	4770      	bx	lr
 8002724:	40021000 	.word	0x40021000
 8002728:	40010000 	.word	0x40010000

0800272c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002734:	f107 0310 	add.w	r3, r7, #16
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	605a      	str	r2, [r3, #4]
 800273e:	609a      	str	r2, [r3, #8]
 8002740:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a16      	ldr	r2, [pc, #88]	; (80027a0 <HAL_I2C_MspInit+0x74>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d124      	bne.n	8002796 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <HAL_I2C_MspInit+0x78>)
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4a14      	ldr	r2, [pc, #80]	; (80027a4 <HAL_I2C_MspInit+0x78>)
 8002752:	f043 0308 	orr.w	r3, r3, #8
 8002756:	6193      	str	r3, [r2, #24]
 8002758:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <HAL_I2C_MspInit+0x78>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 0308 	and.w	r3, r3, #8
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002764:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002768:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800276a:	2312      	movs	r3, #18
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800276e:	2303      	movs	r3, #3
 8002770:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002772:	f107 0310 	add.w	r3, r7, #16
 8002776:	4619      	mov	r1, r3
 8002778:	480b      	ldr	r0, [pc, #44]	; (80027a8 <HAL_I2C_MspInit+0x7c>)
 800277a:	f000 fb5d 	bl	8002e38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <HAL_I2C_MspInit+0x78>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <HAL_I2C_MspInit+0x78>)
 8002784:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b06      	ldr	r3, [pc, #24]	; (80027a4 <HAL_I2C_MspInit+0x78>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002796:	bf00      	nop
 8002798:	3720      	adds	r7, #32
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	bf00      	nop
 80027a0:	40005800 	.word	0x40005800
 80027a4:	40021000 	.word	0x40021000
 80027a8:	40010c00 	.word	0x40010c00

080027ac <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0318 	add.w	r3, r7, #24
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d124      	bne.n	8002816 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027cc:	4b28      	ldr	r3, [pc, #160]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	4a27      	ldr	r2, [pc, #156]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	61d3      	str	r3, [r2, #28]
 80027d8:	4b25      	ldr	r3, [pc, #148]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 80027da:	69db      	ldr	r3, [r3, #28]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e4:	4b22      	ldr	r3, [pc, #136]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 80027e6:	699b      	ldr	r3, [r3, #24]
 80027e8:	4a21      	ldr	r2, [pc, #132]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	6193      	str	r3, [r2, #24]
 80027f0:	4b1f      	ldr	r3, [pc, #124]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80027fc:	2303      	movs	r3, #3
 80027fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002800:	2300      	movs	r3, #0
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002804:	2300      	movs	r3, #0
 8002806:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002808:	f107 0318 	add.w	r3, r7, #24
 800280c:	4619      	mov	r1, r3
 800280e:	4819      	ldr	r0, [pc, #100]	; (8002874 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002810:	f000 fb12 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002814:	e028      	b.n	8002868 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a17      	ldr	r2, [pc, #92]	; (8002878 <HAL_TIM_Encoder_MspInit+0xcc>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d123      	bne.n	8002868 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002820:	4b13      	ldr	r3, [pc, #76]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002822:	69db      	ldr	r3, [r3, #28]
 8002824:	4a12      	ldr	r2, [pc, #72]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002826:	f043 0302 	orr.w	r3, r3, #2
 800282a:	61d3      	str	r3, [r2, #28]
 800282c:	4b10      	ldr	r3, [pc, #64]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002838:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 800283e:	f043 0304 	orr.w	r3, r3, #4
 8002842:	6193      	str	r3, [r2, #24]
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	f003 0304 	and.w	r3, r3, #4
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002850:	23c0      	movs	r3, #192	; 0xc0
 8002852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002858:	2300      	movs	r3, #0
 800285a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285c:	f107 0318 	add.w	r3, r7, #24
 8002860:	4619      	mov	r1, r3
 8002862:	4804      	ldr	r0, [pc, #16]	; (8002874 <HAL_TIM_Encoder_MspInit+0xc8>)
 8002864:	f000 fae8 	bl	8002e38 <HAL_GPIO_Init>
}
 8002868:	bf00      	nop
 800286a:	3728      	adds	r7, #40	; 0x28
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	40021000 	.word	0x40021000
 8002874:	40010800 	.word	0x40010800
 8002878:	40000400 	.word	0x40000400

0800287c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800287c:	b480      	push	{r7}
 800287e:	b085      	sub	sp, #20
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a09      	ldr	r2, [pc, #36]	; (80028b0 <HAL_TIM_PWM_MspInit+0x34>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d10b      	bne.n	80028a6 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800288e:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_TIM_PWM_MspInit+0x38>)
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4a08      	ldr	r2, [pc, #32]	; (80028b4 <HAL_TIM_PWM_MspInit+0x38>)
 8002894:	f043 0304 	orr.w	r3, r3, #4
 8002898:	61d3      	str	r3, [r2, #28]
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_TIM_PWM_MspInit+0x38>)
 800289c:	69db      	ldr	r3, [r3, #28]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80028a6:	bf00      	nop
 80028a8:	3714      	adds	r7, #20
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bc80      	pop	{r7}
 80028ae:	4770      	bx	lr
 80028b0:	40000800 	.word	0x40000800
 80028b4:	40021000 	.word	0x40021000

080028b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 0310 	add.w	r3, r7, #16
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a10      	ldr	r2, [pc, #64]	; (8002914 <HAL_TIM_MspPostInit+0x5c>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d118      	bne.n	800290a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_TIM_MspPostInit+0x60>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <HAL_TIM_MspPostInit+0x60>)
 80028de:	f043 0308 	orr.w	r3, r3, #8
 80028e2:	6193      	str	r3, [r2, #24]
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_TIM_MspPostInit+0x60>)
 80028e6:	699b      	ldr	r3, [r3, #24]
 80028e8:	f003 0308 	and.w	r3, r3, #8
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028f0:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028fa:	2302      	movs	r3, #2
 80028fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028fe:	f107 0310 	add.w	r3, r7, #16
 8002902:	4619      	mov	r1, r3
 8002904:	4805      	ldr	r0, [pc, #20]	; (800291c <HAL_TIM_MspPostInit+0x64>)
 8002906:	f000 fa97 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800290a:	bf00      	nop
 800290c:	3720      	adds	r7, #32
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40000800 	.word	0x40000800
 8002918:	40021000 	.word	0x40021000
 800291c:	40010c00 	.word	0x40010c00

08002920 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b088      	sub	sp, #32
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002928:	f107 0310 	add.w	r3, r7, #16
 800292c:	2200      	movs	r2, #0
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	605a      	str	r2, [r3, #4]
 8002932:	609a      	str	r2, [r3, #8]
 8002934:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a1c      	ldr	r2, [pc, #112]	; (80029ac <HAL_UART_MspInit+0x8c>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d131      	bne.n	80029a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002940:	4b1b      	ldr	r3, [pc, #108]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	4a1a      	ldr	r2, [pc, #104]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800294a:	6193      	str	r3, [r2, #24]
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_UART_MspInit+0x90>)
 800294e:	699b      	ldr	r3, [r3, #24]
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002958:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <HAL_UART_MspInit+0x90>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <HAL_UART_MspInit+0x90>)
 800295e:	f043 0304 	orr.w	r3, r3, #4
 8002962:	6193      	str	r3, [r2, #24]
 8002964:	4b12      	ldr	r3, [pc, #72]	; (80029b0 <HAL_UART_MspInit+0x90>)
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	60bb      	str	r3, [r7, #8]
 800296e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002970:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002974:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002976:	2302      	movs	r3, #2
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800297a:	2303      	movs	r3, #3
 800297c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4619      	mov	r1, r3
 8002984:	480b      	ldr	r0, [pc, #44]	; (80029b4 <HAL_UART_MspInit+0x94>)
 8002986:	f000 fa57 	bl	8002e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800298a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800298e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002990:	2300      	movs	r3, #0
 8002992:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002998:	f107 0310 	add.w	r3, r7, #16
 800299c:	4619      	mov	r1, r3
 800299e:	4805      	ldr	r0, [pc, #20]	; (80029b4 <HAL_UART_MspInit+0x94>)
 80029a0:	f000 fa4a 	bl	8002e38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80029a4:	bf00      	nop
 80029a6:	3720      	adds	r7, #32
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40013800 	.word	0x40013800
 80029b0:	40021000 	.word	0x40021000
 80029b4:	40010800 	.word	0x40010800

080029b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029bc:	e7fe      	b.n	80029bc <NMI_Handler+0x4>

080029be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029be:	b480      	push	{r7}
 80029c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029c2:	e7fe      	b.n	80029c2 <HardFault_Handler+0x4>

080029c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <MemManage_Handler+0x4>

080029ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <BusFault_Handler+0x4>

080029d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <UsageFault_Handler+0x4>

080029d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029da:	bf00      	nop
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr

080029e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bc80      	pop	{r7}
 80029ec:	4770      	bx	lr

080029ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr

080029fa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fe:	f000 f8cd 	bl	8002b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a06:	b580      	push	{r7, lr}
 8002a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a0a:	2004      	movs	r0, #4
 8002a0c:	f000 fbe0 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002a18:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002a1c:	f000 fbd8 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002a20:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002a24:	f000 fbd4 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a28:	bf00      	nop
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_GPIO_EXTI_Callback>:

extern volatile int32_t encoder3_count;
extern volatile int32_t encoder4_count;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) { // ENC3 - Canal A
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a3c:	d113      	bne.n	8002a66 <HAL_GPIO_EXTI_Callback+0x3a>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 8002a3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002a42:	4819      	ldr	r0, [pc, #100]	; (8002aa8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002a44:	f000 fb7c 	bl	8003140 <HAL_GPIO_ReadPin>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d105      	bne.n	8002a5a <HAL_GPIO_EXTI_Callback+0x2e>
            encoder3_count++;
 8002a4e:	4b17      	ldr	r3, [pc, #92]	; (8002aac <HAL_GPIO_EXTI_Callback+0x80>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	3301      	adds	r3, #1
 8002a54:	4a15      	ldr	r2, [pc, #84]	; (8002aac <HAL_GPIO_EXTI_Callback+0x80>)
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e01c      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x68>
        else
            encoder3_count--;
 8002a5a:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_GPIO_EXTI_Callback+0x80>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	4a12      	ldr	r2, [pc, #72]	; (8002aac <HAL_GPIO_EXTI_Callback+0x80>)
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	e016      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x68>
    }

    else if (GPIO_Pin == GPIO_PIN_14) { // ENC4 - Canal A
 8002a66:	88fb      	ldrh	r3, [r7, #6]
 8002a68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a6c:	d112      	bne.n	8002a94 <HAL_GPIO_EXTI_Callback+0x68>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 8002a6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a72:	480d      	ldr	r0, [pc, #52]	; (8002aa8 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002a74:	f000 fb64 	bl	8003140 <HAL_GPIO_ReadPin>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_GPIO_EXTI_Callback+0x5e>
            encoder4_count++;
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	3301      	adds	r3, #1
 8002a84:	4a0a      	ldr	r2, [pc, #40]	; (8002ab0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002a86:	6013      	str	r3, [r2, #0]
 8002a88:	e004      	b.n	8002a94 <HAL_GPIO_EXTI_Callback+0x68>
        else
            encoder4_count--;
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_GPIO_EXTI_Callback+0x84>)
 8002a92:	6013      	str	r3, [r2, #0]
    }

    if (GPIO_Pin == GPIO_PIN_2)
 8002a94:	88fb      	ldrh	r3, [r7, #6]
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d102      	bne.n	8002aa0 <HAL_GPIO_EXTI_Callback+0x74>
    {
        mpu_data_ready = 1;  // Activa la bandera cuando hay nueva lectura
 8002a9a:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <HAL_GPIO_EXTI_Callback+0x88>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
    }
}
 8002aa0:	bf00      	nop
 8002aa2:	3708      	adds	r7, #8
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40010c00 	.word	0x40010c00
 8002aac:	20000108 	.word	0x20000108
 8002ab0:	2000010c 	.word	0x2000010c
 8002ab4:	2000024c 	.word	0x2000024c

08002ab8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002abc:	bf00      	nop
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bc80      	pop	{r7}
 8002ac2:	4770      	bx	lr

08002ac4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002ac4:	f7ff fff8 	bl	8002ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ac8:	480b      	ldr	r0, [pc, #44]	; (8002af8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002aca:	490c      	ldr	r1, [pc, #48]	; (8002afc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002acc:	4a0c      	ldr	r2, [pc, #48]	; (8002b00 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a09      	ldr	r2, [pc, #36]	; (8002b04 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ae0:	4c09      	ldr	r4, [pc, #36]	; (8002b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aee:	f003 f9a5 	bl	8005e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002af2:	f7fe fa7d 	bl	8000ff0 <main>
  bx lr
 8002af6:	4770      	bx	lr
  ldr r0, =_sdata
 8002af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002afc:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8002b00:	08005f1c 	.word	0x08005f1c
  ldr r2, =_sbss
 8002b04:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8002b08:	200002e4 	.word	0x200002e4

08002b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b0c:	e7fe      	b.n	8002b0c <ADC1_2_IRQHandler>
	...

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b14:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <HAL_Init+0x28>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a07      	ldr	r2, [pc, #28]	; (8002b38 <HAL_Init+0x28>)
 8002b1a:	f043 0310 	orr.w	r3, r3, #16
 8002b1e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b20:	2003      	movs	r0, #3
 8002b22:	f000 f947 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b26:	200f      	movs	r0, #15
 8002b28:	f000 f808 	bl	8002b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b2c:	f7ff fdcc 	bl	80026c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40022000 	.word	0x40022000

08002b3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b44:	4b12      	ldr	r3, [pc, #72]	; (8002b90 <HAL_InitTick+0x54>)
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	4b12      	ldr	r3, [pc, #72]	; (8002b94 <HAL_InitTick+0x58>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 f95f 	bl	8002e1e <HAL_SYSTICK_Config>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e00e      	b.n	8002b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b0f      	cmp	r3, #15
 8002b6e:	d80a      	bhi.n	8002b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b70:	2200      	movs	r2, #0
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	f04f 30ff 	mov.w	r0, #4294967295
 8002b78:	f000 f927 	bl	8002dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b7c:	4a06      	ldr	r2, [pc, #24]	; (8002b98 <HAL_InitTick+0x5c>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
 8002b84:	e000      	b.n	8002b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	20000010 	.word	0x20000010
 8002b94:	20000018 	.word	0x20000018
 8002b98:	20000014 	.word	0x20000014

08002b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ba0:	4b05      	ldr	r3, [pc, #20]	; (8002bb8 <HAL_IncTick+0x1c>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_IncTick+0x20>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4413      	add	r3, r2
 8002bac:	4a03      	ldr	r2, [pc, #12]	; (8002bbc <HAL_IncTick+0x20>)
 8002bae:	6013      	str	r3, [r2, #0]
}
 8002bb0:	bf00      	nop
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc80      	pop	{r7}
 8002bb6:	4770      	bx	lr
 8002bb8:	20000018 	.word	0x20000018
 8002bbc:	200002e0 	.word	0x200002e0

08002bc0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return uwTick;
 8002bc4:	4b02      	ldr	r3, [pc, #8]	; (8002bd0 <HAL_GetTick+0x10>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr
 8002bd0:	200002e0 	.word	0x200002e0

08002bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bdc:	f7ff fff0 	bl	8002bc0 <HAL_GetTick>
 8002be0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bec:	d005      	beq.n	8002bfa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_Delay+0x44>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bfa:	bf00      	nop
 8002bfc:	f7ff ffe0 	bl	8002bc0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	68fa      	ldr	r2, [r7, #12]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d8f7      	bhi.n	8002bfc <HAL_Delay+0x28>
  {
  }
}
 8002c0c:	bf00      	nop
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000018 	.word	0x20000018

08002c1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b085      	sub	sp, #20
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f003 0307 	and.w	r3, r3, #7
 8002c2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c2c:	4b0c      	ldr	r3, [pc, #48]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c4e:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <__NVIC_SetPriorityGrouping+0x44>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	60d3      	str	r3, [r2, #12]
}
 8002c54:	bf00      	nop
 8002c56:	3714      	adds	r7, #20
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bc80      	pop	{r7}
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	e000ed00 	.word	0xe000ed00

08002c64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c68:	4b04      	ldr	r3, [pc, #16]	; (8002c7c <__NVIC_GetPriorityGrouping+0x18>)
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	0a1b      	lsrs	r3, r3, #8
 8002c6e:	f003 0307 	and.w	r3, r3, #7
}
 8002c72:	4618      	mov	r0, r3
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bc80      	pop	{r7}
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	e000ed00 	.word	0xe000ed00

08002c80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	4603      	mov	r3, r0
 8002c88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	db0b      	blt.n	8002caa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c92:	79fb      	ldrb	r3, [r7, #7]
 8002c94:	f003 021f 	and.w	r2, r3, #31
 8002c98:	4906      	ldr	r1, [pc, #24]	; (8002cb4 <__NVIC_EnableIRQ+0x34>)
 8002c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c9e:	095b      	lsrs	r3, r3, #5
 8002ca0:	2001      	movs	r0, #1
 8002ca2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002caa:	bf00      	nop
 8002cac:	370c      	adds	r7, #12
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	e000e100 	.word	0xe000e100

08002cb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	6039      	str	r1, [r7, #0]
 8002cc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	db0a      	blt.n	8002ce2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	b2da      	uxtb	r2, r3
 8002cd0:	490c      	ldr	r1, [pc, #48]	; (8002d04 <__NVIC_SetPriority+0x4c>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	b2d2      	uxtb	r2, r2
 8002cda:	440b      	add	r3, r1
 8002cdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ce0:	e00a      	b.n	8002cf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	4908      	ldr	r1, [pc, #32]	; (8002d08 <__NVIC_SetPriority+0x50>)
 8002ce8:	79fb      	ldrb	r3, [r7, #7]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	3b04      	subs	r3, #4
 8002cf0:	0112      	lsls	r2, r2, #4
 8002cf2:	b2d2      	uxtb	r2, r2
 8002cf4:	440b      	add	r3, r1
 8002cf6:	761a      	strb	r2, [r3, #24]
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000e100 	.word	0xe000e100
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b089      	sub	sp, #36	; 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	f1c3 0307 	rsb	r3, r3, #7
 8002d26:	2b04      	cmp	r3, #4
 8002d28:	bf28      	it	cs
 8002d2a:	2304      	movcs	r3, #4
 8002d2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	3304      	adds	r3, #4
 8002d32:	2b06      	cmp	r3, #6
 8002d34:	d902      	bls.n	8002d3c <NVIC_EncodePriority+0x30>
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	3b03      	subs	r3, #3
 8002d3a:	e000      	b.n	8002d3e <NVIC_EncodePriority+0x32>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	f04f 32ff 	mov.w	r2, #4294967295
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43da      	mvns	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	401a      	ands	r2, r3
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d54:	f04f 31ff 	mov.w	r1, #4294967295
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	43d9      	mvns	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	4313      	orrs	r3, r2
         );
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3724      	adds	r7, #36	; 0x24
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bc80      	pop	{r7}
 8002d6e:	4770      	bx	lr

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff90 	bl	8002cb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff2d 	bl	8002c1c <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff42 	bl	8002c64 <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff90 	bl	8002d0c <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5f 	bl	8002cb8 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff35 	bl	8002c80 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
	...

08002e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b08b      	sub	sp, #44	; 0x2c
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
 8002e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e42:	2300      	movs	r3, #0
 8002e44:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e46:	2300      	movs	r3, #0
 8002e48:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e4a:	e169      	b.n	8003120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	69fa      	ldr	r2, [r7, #28]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	f040 8158 	bne.w	800311a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a9a      	ldr	r2, [pc, #616]	; (80030d8 <HAL_GPIO_Init+0x2a0>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d05e      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e74:	4a98      	ldr	r2, [pc, #608]	; (80030d8 <HAL_GPIO_Init+0x2a0>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d875      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e7a:	4a98      	ldr	r2, [pc, #608]	; (80030dc <HAL_GPIO_Init+0x2a4>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d058      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e80:	4a96      	ldr	r2, [pc, #600]	; (80030dc <HAL_GPIO_Init+0x2a4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d86f      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e86:	4a96      	ldr	r2, [pc, #600]	; (80030e0 <HAL_GPIO_Init+0x2a8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d052      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e8c:	4a94      	ldr	r2, [pc, #592]	; (80030e0 <HAL_GPIO_Init+0x2a8>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d869      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e92:	4a94      	ldr	r2, [pc, #592]	; (80030e4 <HAL_GPIO_Init+0x2ac>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04c      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002e98:	4a92      	ldr	r2, [pc, #584]	; (80030e4 <HAL_GPIO_Init+0x2ac>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d863      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002e9e:	4a92      	ldr	r2, [pc, #584]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d046      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
 8002ea4:	4a90      	ldr	r2, [pc, #576]	; (80030e8 <HAL_GPIO_Init+0x2b0>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d85d      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002eaa:	2b12      	cmp	r3, #18
 8002eac:	d82a      	bhi.n	8002f04 <HAL_GPIO_Init+0xcc>
 8002eae:	2b12      	cmp	r3, #18
 8002eb0:	d859      	bhi.n	8002f66 <HAL_GPIO_Init+0x12e>
 8002eb2:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <HAL_GPIO_Init+0x80>)
 8002eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb8:	08002f33 	.word	0x08002f33
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f1f 	.word	0x08002f1f
 8002ec4:	08002f61 	.word	0x08002f61
 8002ec8:	08002f67 	.word	0x08002f67
 8002ecc:	08002f67 	.word	0x08002f67
 8002ed0:	08002f67 	.word	0x08002f67
 8002ed4:	08002f67 	.word	0x08002f67
 8002ed8:	08002f67 	.word	0x08002f67
 8002edc:	08002f67 	.word	0x08002f67
 8002ee0:	08002f67 	.word	0x08002f67
 8002ee4:	08002f67 	.word	0x08002f67
 8002ee8:	08002f67 	.word	0x08002f67
 8002eec:	08002f67 	.word	0x08002f67
 8002ef0:	08002f67 	.word	0x08002f67
 8002ef4:	08002f67 	.word	0x08002f67
 8002ef8:	08002f67 	.word	0x08002f67
 8002efc:	08002f15 	.word	0x08002f15
 8002f00:	08002f29 	.word	0x08002f29
 8002f04:	4a79      	ldr	r2, [pc, #484]	; (80030ec <HAL_GPIO_Init+0x2b4>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d013      	beq.n	8002f32 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f0a:	e02c      	b.n	8002f66 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	623b      	str	r3, [r7, #32]
          break;
 8002f12:	e029      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	3304      	adds	r3, #4
 8002f1a:	623b      	str	r3, [r7, #32]
          break;
 8002f1c:	e024      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	3308      	adds	r3, #8
 8002f24:	623b      	str	r3, [r7, #32]
          break;
 8002f26:	e01f      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	330c      	adds	r3, #12
 8002f2e:	623b      	str	r3, [r7, #32]
          break;
 8002f30:	e01a      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f3a:	2304      	movs	r3, #4
 8002f3c:	623b      	str	r3, [r7, #32]
          break;
 8002f3e:	e013      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d105      	bne.n	8002f54 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f48:	2308      	movs	r3, #8
 8002f4a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69fa      	ldr	r2, [r7, #28]
 8002f50:	611a      	str	r2, [r3, #16]
          break;
 8002f52:	e009      	b.n	8002f68 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f54:	2308      	movs	r3, #8
 8002f56:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	615a      	str	r2, [r3, #20]
          break;
 8002f5e:	e003      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
          break;
 8002f64:	e000      	b.n	8002f68 <HAL_GPIO_Init+0x130>
          break;
 8002f66:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2bff      	cmp	r3, #255	; 0xff
 8002f6c:	d801      	bhi.n	8002f72 <HAL_GPIO_Init+0x13a>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	e001      	b.n	8002f76 <HAL_GPIO_Init+0x13e>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	3304      	adds	r3, #4
 8002f76:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	2bff      	cmp	r3, #255	; 0xff
 8002f7c:	d802      	bhi.n	8002f84 <HAL_GPIO_Init+0x14c>
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	e002      	b.n	8002f8a <HAL_GPIO_Init+0x152>
 8002f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f86:	3b08      	subs	r3, #8
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	210f      	movs	r1, #15
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	401a      	ands	r2, r3
 8002f9c:	6a39      	ldr	r1, [r7, #32]
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f000 80b1 	beq.w	800311a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002fb8:	4b4d      	ldr	r3, [pc, #308]	; (80030f0 <HAL_GPIO_Init+0x2b8>)
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	4a4c      	ldr	r2, [pc, #304]	; (80030f0 <HAL_GPIO_Init+0x2b8>)
 8002fbe:	f043 0301 	orr.w	r3, r3, #1
 8002fc2:	6193      	str	r3, [r2, #24]
 8002fc4:	4b4a      	ldr	r3, [pc, #296]	; (80030f0 <HAL_GPIO_Init+0x2b8>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002fd0:	4a48      	ldr	r2, [pc, #288]	; (80030f4 <HAL_GPIO_Init+0x2bc>)
 8002fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd4:	089b      	lsrs	r3, r3, #2
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fdc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	f003 0303 	and.w	r3, r3, #3
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	4a40      	ldr	r2, [pc, #256]	; (80030f8 <HAL_GPIO_Init+0x2c0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d013      	beq.n	8003024 <HAL_GPIO_Init+0x1ec>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a3f      	ldr	r2, [pc, #252]	; (80030fc <HAL_GPIO_Init+0x2c4>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00d      	beq.n	8003020 <HAL_GPIO_Init+0x1e8>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a3e      	ldr	r2, [pc, #248]	; (8003100 <HAL_GPIO_Init+0x2c8>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d007      	beq.n	800301c <HAL_GPIO_Init+0x1e4>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a3d      	ldr	r2, [pc, #244]	; (8003104 <HAL_GPIO_Init+0x2cc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d101      	bne.n	8003018 <HAL_GPIO_Init+0x1e0>
 8003014:	2303      	movs	r3, #3
 8003016:	e006      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 8003018:	2304      	movs	r3, #4
 800301a:	e004      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 800301c:	2302      	movs	r3, #2
 800301e:	e002      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_GPIO_Init+0x1ee>
 8003024:	2300      	movs	r3, #0
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	f002 0203 	and.w	r2, r2, #3
 800302c:	0092      	lsls	r2, r2, #2
 800302e:	4093      	lsls	r3, r2
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003036:	492f      	ldr	r1, [pc, #188]	; (80030f4 <HAL_GPIO_Init+0x2bc>)
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	089b      	lsrs	r3, r3, #2
 800303c:	3302      	adds	r3, #2
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d006      	beq.n	800305e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003050:	4b2d      	ldr	r3, [pc, #180]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003052:	689a      	ldr	r2, [r3, #8]
 8003054:	492c      	ldr	r1, [pc, #176]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	608b      	str	r3, [r1, #8]
 800305c:	e006      	b.n	800306c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800305e:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	43db      	mvns	r3, r3
 8003066:	4928      	ldr	r1, [pc, #160]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003068:	4013      	ands	r3, r2
 800306a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d006      	beq.n	8003086 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003078:	4b23      	ldr	r3, [pc, #140]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	4922      	ldr	r1, [pc, #136]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
 8003084:	e006      	b.n	8003094 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003086:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003088:	68da      	ldr	r2, [r3, #12]
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	43db      	mvns	r3, r3
 800308e:	491e      	ldr	r1, [pc, #120]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 8003090:	4013      	ands	r3, r2
 8003092:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d006      	beq.n	80030ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030a0:	4b19      	ldr	r3, [pc, #100]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	4918      	ldr	r1, [pc, #96]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	604b      	str	r3, [r1, #4]
 80030ac:	e006      	b.n	80030bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030ae:	4b16      	ldr	r3, [pc, #88]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4914      	ldr	r1, [pc, #80]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d021      	beq.n	800310c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030c8:	4b0f      	ldr	r3, [pc, #60]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	490e      	ldr	r1, [pc, #56]	; (8003108 <HAL_GPIO_Init+0x2d0>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	600b      	str	r3, [r1, #0]
 80030d4:	e021      	b.n	800311a <HAL_GPIO_Init+0x2e2>
 80030d6:	bf00      	nop
 80030d8:	10320000 	.word	0x10320000
 80030dc:	10310000 	.word	0x10310000
 80030e0:	10220000 	.word	0x10220000
 80030e4:	10210000 	.word	0x10210000
 80030e8:	10120000 	.word	0x10120000
 80030ec:	10110000 	.word	0x10110000
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40010000 	.word	0x40010000
 80030f8:	40010800 	.word	0x40010800
 80030fc:	40010c00 	.word	0x40010c00
 8003100:	40011000 	.word	0x40011000
 8003104:	40011400 	.word	0x40011400
 8003108:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800310c:	4b0b      	ldr	r3, [pc, #44]	; (800313c <HAL_GPIO_Init+0x304>)
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	43db      	mvns	r3, r3
 8003114:	4909      	ldr	r1, [pc, #36]	; (800313c <HAL_GPIO_Init+0x304>)
 8003116:	4013      	ands	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	3301      	adds	r3, #1
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003126:	fa22 f303 	lsr.w	r3, r2, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	f47f ae8e 	bne.w	8002e4c <HAL_GPIO_Init+0x14>
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	372c      	adds	r7, #44	; 0x2c
 8003136:	46bd      	mov	sp, r7
 8003138:	bc80      	pop	{r7}
 800313a:	4770      	bx	lr
 800313c:	40010400 	.word	0x40010400

08003140 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	460b      	mov	r3, r1
 800314a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	887b      	ldrh	r3, [r7, #2]
 8003152:	4013      	ands	r3, r2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d002      	beq.n	800315e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003158:	2301      	movs	r3, #1
 800315a:	73fb      	strb	r3, [r7, #15]
 800315c:	e001      	b.n	8003162 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800315e:	2300      	movs	r3, #0
 8003160:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003162:	7bfb      	ldrb	r3, [r7, #15]
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr

0800316e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800316e:	b480      	push	{r7}
 8003170:	b083      	sub	sp, #12
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
 800317a:	4613      	mov	r3, r2
 800317c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800317e:	787b      	ldrb	r3, [r7, #1]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003184:	887a      	ldrh	r2, [r7, #2]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800318a:	e003      	b.n	8003194 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800318c:	887b      	ldrh	r3, [r7, #2]
 800318e:	041a      	lsls	r2, r3, #16
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	611a      	str	r2, [r3, #16]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800319e:	b480      	push	{r7}
 80031a0:	b085      	sub	sp, #20
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80031b0:	887a      	ldrh	r2, [r7, #2]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	4013      	ands	r3, r2
 80031b6:	041a      	lsls	r2, r3, #16
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	43d9      	mvns	r1, r3
 80031bc:	887b      	ldrh	r3, [r7, #2]
 80031be:	400b      	ands	r3, r1
 80031c0:	431a      	orrs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	611a      	str	r2, [r3, #16]
}
 80031c6:	bf00      	nop
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7ff fc1c 	bl	8002a2c <HAL_GPIO_EXTI_Callback>
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d101      	bne.n	8003212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e12b      	b.n	800346a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d106      	bne.n	800322c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff fa80 	bl	800272c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2224      	movs	r2, #36	; 0x24
 8003230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f022 0201 	bic.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003252:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003262:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003264:	f001 fd58 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8003268:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4a81      	ldr	r2, [pc, #516]	; (8003474 <HAL_I2C_Init+0x274>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d807      	bhi.n	8003284 <HAL_I2C_Init+0x84>
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	4a80      	ldr	r2, [pc, #512]	; (8003478 <HAL_I2C_Init+0x278>)
 8003278:	4293      	cmp	r3, r2
 800327a:	bf94      	ite	ls
 800327c:	2301      	movls	r3, #1
 800327e:	2300      	movhi	r3, #0
 8003280:	b2db      	uxtb	r3, r3
 8003282:	e006      	b.n	8003292 <HAL_I2C_Init+0x92>
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4a7d      	ldr	r2, [pc, #500]	; (800347c <HAL_I2C_Init+0x27c>)
 8003288:	4293      	cmp	r3, r2
 800328a:	bf94      	ite	ls
 800328c:	2301      	movls	r3, #1
 800328e:	2300      	movhi	r3, #0
 8003290:	b2db      	uxtb	r3, r3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e0e7      	b.n	800346a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4a78      	ldr	r2, [pc, #480]	; (8003480 <HAL_I2C_Init+0x280>)
 800329e:	fba2 2303 	umull	r2, r3, r2, r3
 80032a2:	0c9b      	lsrs	r3, r3, #18
 80032a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	4a6a      	ldr	r2, [pc, #424]	; (8003474 <HAL_I2C_Init+0x274>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d802      	bhi.n	80032d4 <HAL_I2C_Init+0xd4>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	3301      	adds	r3, #1
 80032d2:	e009      	b.n	80032e8 <HAL_I2C_Init+0xe8>
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	4a69      	ldr	r2, [pc, #420]	; (8003484 <HAL_I2C_Init+0x284>)
 80032e0:	fba2 2303 	umull	r2, r3, r2, r3
 80032e4:	099b      	lsrs	r3, r3, #6
 80032e6:	3301      	adds	r3, #1
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	6812      	ldr	r2, [r2, #0]
 80032ec:	430b      	orrs	r3, r1
 80032ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	495c      	ldr	r1, [pc, #368]	; (8003474 <HAL_I2C_Init+0x274>)
 8003304:	428b      	cmp	r3, r1
 8003306:	d819      	bhi.n	800333c <HAL_I2C_Init+0x13c>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e59      	subs	r1, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fbb1 f3f3 	udiv	r3, r1, r3
 8003316:	1c59      	adds	r1, r3, #1
 8003318:	f640 73fc 	movw	r3, #4092	; 0xffc
 800331c:	400b      	ands	r3, r1
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_I2C_Init+0x138>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1e59      	subs	r1, r3, #1
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003330:	3301      	adds	r3, #1
 8003332:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003336:	e051      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 8003338:	2304      	movs	r3, #4
 800333a:	e04f      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d111      	bne.n	8003368 <HAL_I2C_Init+0x168>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	440b      	add	r3, r1
 8003352:	fbb0 f3f3 	udiv	r3, r0, r3
 8003356:	3301      	adds	r3, #1
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	2b00      	cmp	r3, #0
 800335e:	bf0c      	ite	eq
 8003360:	2301      	moveq	r3, #1
 8003362:	2300      	movne	r3, #0
 8003364:	b2db      	uxtb	r3, r3
 8003366:	e012      	b.n	800338e <HAL_I2C_Init+0x18e>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	1e58      	subs	r0, r3, #1
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6859      	ldr	r1, [r3, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	0099      	lsls	r1, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	fbb0 f3f3 	udiv	r3, r0, r3
 800337e:	3301      	adds	r3, #1
 8003380:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d001      	beq.n	8003396 <HAL_I2C_Init+0x196>
 8003392:	2301      	movs	r3, #1
 8003394:	e022      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10e      	bne.n	80033bc <HAL_I2C_Init+0x1bc>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	1e58      	subs	r0, r3, #1
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6859      	ldr	r1, [r3, #4]
 80033a6:	460b      	mov	r3, r1
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	440b      	add	r3, r1
 80033ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80033b0:	3301      	adds	r3, #1
 80033b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033ba:	e00f      	b.n	80033dc <HAL_I2C_Init+0x1dc>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1e58      	subs	r0, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6859      	ldr	r1, [r3, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	440b      	add	r3, r1
 80033ca:	0099      	lsls	r1, r3, #2
 80033cc:	440b      	add	r3, r1
 80033ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80033d2:	3301      	adds	r3, #1
 80033d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	6809      	ldr	r1, [r1, #0]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69da      	ldr	r2, [r3, #28]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a1b      	ldr	r3, [r3, #32]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800340a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6911      	ldr	r1, [r2, #16]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68d2      	ldr	r2, [r2, #12]
 8003416:	4311      	orrs	r1, r2
 8003418:	687a      	ldr	r2, [r7, #4]
 800341a:	6812      	ldr	r2, [r2, #0]
 800341c:	430b      	orrs	r3, r1
 800341e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695a      	ldr	r2, [r3, #20]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2220      	movs	r2, #32
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	000186a0 	.word	0x000186a0
 8003478:	001e847f 	.word	0x001e847f
 800347c:	003d08ff 	.word	0x003d08ff
 8003480:	431bde83 	.word	0x431bde83
 8003484:	10624dd3 	.word	0x10624dd3

08003488 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af02      	add	r7, sp, #8
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	607a      	str	r2, [r7, #4]
 8003492:	461a      	mov	r2, r3
 8003494:	460b      	mov	r3, r1
 8003496:	817b      	strh	r3, [r7, #10]
 8003498:	4613      	mov	r3, r2
 800349a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800349c:	f7ff fb90 	bl	8002bc0 <HAL_GetTick>
 80034a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b20      	cmp	r3, #32
 80034ac:	f040 80e0 	bne.w	8003670 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	2319      	movs	r3, #25
 80034b6:	2201      	movs	r2, #1
 80034b8:	4970      	ldr	r1, [pc, #448]	; (800367c <HAL_I2C_Master_Transmit+0x1f4>)
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fe2e 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034c6:	2302      	movs	r3, #2
 80034c8:	e0d3      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d101      	bne.n	80034d8 <HAL_I2C_Master_Transmit+0x50>
 80034d4:	2302      	movs	r3, #2
 80034d6:	e0cc      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1ea>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d007      	beq.n	80034fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f042 0201 	orr.w	r2, r2, #1
 80034fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2221      	movs	r2, #33	; 0x21
 8003512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2210      	movs	r2, #16
 800351a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	893a      	ldrh	r2, [r7, #8]
 800352e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003534:	b29a      	uxth	r2, r3
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	4a50      	ldr	r2, [pc, #320]	; (8003680 <HAL_I2C_Master_Transmit+0x1f8>)
 800353e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003540:	8979      	ldrh	r1, [r7, #10]
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	6a3a      	ldr	r2, [r7, #32]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 fc02 	bl	8003d50 <I2C_MasterRequestWrite>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e08d      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003556:	2300      	movs	r3, #0
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800356c:	e066      	b.n	800363c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6a39      	ldr	r1, [r7, #32]
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 feec 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2b04      	cmp	r3, #4
 8003584:	d107      	bne.n	8003596 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003594:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e06b      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	3b01      	subs	r3, #1
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b04      	cmp	r3, #4
 80035d6:	d11b      	bne.n	8003610 <HAL_I2C_Master_Transmit+0x188>
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d017      	beq.n	8003610 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f0:	1c5a      	adds	r2, r3, #1
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	3b01      	subs	r3, #1
 80035fe:	b29a      	uxth	r2, r3
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003608:	3b01      	subs	r3, #1
 800360a:	b29a      	uxth	r2, r3
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003610:	697a      	ldr	r2, [r7, #20]
 8003612:	6a39      	ldr	r1, [r7, #32]
 8003614:	68f8      	ldr	r0, [r7, #12]
 8003616:	f000 fee3 	bl	80043e0 <I2C_WaitOnBTFFlagUntilTimeout>
 800361a:	4603      	mov	r3, r0
 800361c:	2b00      	cmp	r3, #0
 800361e:	d00d      	beq.n	800363c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003624:	2b04      	cmp	r3, #4
 8003626:	d107      	bne.n	8003638 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003636:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e01a      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d194      	bne.n	800356e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003652:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	00100002 	.word	0x00100002
 8003680:	ffff0000 	.word	0xffff0000

08003684 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b08c      	sub	sp, #48	; 0x30
 8003688:	af02      	add	r7, sp, #8
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	607a      	str	r2, [r7, #4]
 800368e:	461a      	mov	r2, r3
 8003690:	460b      	mov	r3, r1
 8003692:	817b      	strh	r3, [r7, #10]
 8003694:	4613      	mov	r3, r2
 8003696:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003698:	2300      	movs	r3, #0
 800369a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800369c:	f7ff fa90 	bl	8002bc0 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	f040 824b 	bne.w	8003b46 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	2319      	movs	r3, #25
 80036b6:	2201      	movs	r2, #1
 80036b8:	497f      	ldr	r1, [pc, #508]	; (80038b8 <HAL_I2C_Master_Receive+0x234>)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 fd2e 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80036c6:	2302      	movs	r3, #2
 80036c8:	e23e      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d101      	bne.n	80036d8 <HAL_I2C_Master_Receive+0x54>
 80036d4:	2302      	movs	r3, #2
 80036d6:	e237      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d007      	beq.n	80036fe <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0201 	orr.w	r2, r2, #1
 80036fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2222      	movs	r2, #34	; 0x22
 8003712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2210      	movs	r2, #16
 800371a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	893a      	ldrh	r2, [r7, #8]
 800372e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	4a5f      	ldr	r2, [pc, #380]	; (80038bc <HAL_I2C_Master_Receive+0x238>)
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003740:	8979      	ldrh	r1, [r7, #10]
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 fb84 	bl	8003e54 <I2C_MasterRequestRead>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e1f8      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	2b00      	cmp	r3, #0
 800375c:	d113      	bne.n	8003786 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800375e:	2300      	movs	r3, #0
 8003760:	61fb      	str	r3, [r7, #28]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	695b      	ldr	r3, [r3, #20]
 8003768:	61fb      	str	r3, [r7, #28]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	61fb      	str	r3, [r7, #28]
 8003772:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	e1cc      	b.n	8003b20 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800378a:	2b01      	cmp	r3, #1
 800378c:	d11e      	bne.n	80037cc <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800379c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800379e:	b672      	cpsid	i
}
 80037a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a2:	2300      	movs	r3, #0
 80037a4:	61bb      	str	r3, [r7, #24]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	61bb      	str	r3, [r7, #24]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80037c8:	b662      	cpsie	i
}
 80037ca:	e035      	b.n	8003838 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d11e      	bne.n	8003812 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037e4:	b672      	cpsid	i
}
 80037e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037e8:	2300      	movs	r3, #0
 80037ea:	617b      	str	r3, [r7, #20]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	617b      	str	r3, [r7, #20]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	617b      	str	r3, [r7, #20]
 80037fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800380c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800380e:	b662      	cpsie	i
}
 8003810:	e012      	b.n	8003838 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003820:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003822:	2300      	movs	r3, #0
 8003824:	613b      	str	r3, [r7, #16]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	695b      	ldr	r3, [r3, #20]
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	613b      	str	r3, [r7, #16]
 8003836:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003838:	e172      	b.n	8003b20 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800383e:	2b03      	cmp	r3, #3
 8003840:	f200 811f 	bhi.w	8003a82 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003848:	2b01      	cmp	r3, #1
 800384a:	d123      	bne.n	8003894 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003850:	68f8      	ldr	r0, [r7, #12]
 8003852:	f000 fe0d 	bl	8004470 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e173      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	691a      	ldr	r2, [r3, #16]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003872:	1c5a      	adds	r2, r3, #1
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003892:	e145      	b.n	8003b20 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	2b02      	cmp	r3, #2
 800389a:	d152      	bne.n	8003942 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800389c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	2200      	movs	r2, #0
 80038a4:	4906      	ldr	r1, [pc, #24]	; (80038c0 <HAL_I2C_Master_Receive+0x23c>)
 80038a6:	68f8      	ldr	r0, [r7, #12]
 80038a8:	f000 fc38 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	e148      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
 80038b6:	bf00      	nop
 80038b8:	00100002 	.word	0x00100002
 80038bc:	ffff0000 	.word	0xffff0000
 80038c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80038c4:	b672      	cpsid	i
}
 80038c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691a      	ldr	r2, [r3, #16]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800390a:	b662      	cpsie	i
}
 800390c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	b2d2      	uxtb	r2, r2
 800391a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003920:	1c5a      	adds	r2, r3, #1
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800392a:	3b01      	subs	r3, #1
 800392c:	b29a      	uxth	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003940:	e0ee      	b.n	8003b20 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003948:	2200      	movs	r2, #0
 800394a:	4981      	ldr	r1, [pc, #516]	; (8003b50 <HAL_I2C_Master_Receive+0x4cc>)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 fbe5 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0f5      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800396a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800396c:	b672      	cpsid	i
}
 800396e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29b      	uxth	r3, r3
 800399a:	3b01      	subs	r3, #1
 800399c:	b29a      	uxth	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039a2:	4b6c      	ldr	r3, [pc, #432]	; (8003b54 <HAL_I2C_Master_Receive+0x4d0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	08db      	lsrs	r3, r3, #3
 80039a8:	4a6b      	ldr	r2, [pc, #428]	; (8003b58 <HAL_I2C_Master_Receive+0x4d4>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	0a1a      	lsrs	r2, r3, #8
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	00da      	lsls	r2, r3, #3
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	3b01      	subs	r3, #1
 80039c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d118      	bne.n	80039fa <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2200      	movs	r2, #0
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e2:	f043 0220 	orr.w	r2, r3, #32
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80039ea:	b662      	cpsie	i
}
 80039ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e0a6      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d1d9      	bne.n	80039bc <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	691a      	ldr	r2, [r3, #16]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a34:	3b01      	subs	r3, #1
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	3b01      	subs	r3, #1
 8003a44:	b29a      	uxth	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a4a:	b662      	cpsie	i
}
 8003a4c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	b2d2      	uxtb	r2, r2
 8003a5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	1c5a      	adds	r2, r3, #1
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a80:	e04e      	b.n	8003b20 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a86:	68f8      	ldr	r0, [r7, #12]
 8003a88:	f000 fcf2 	bl	8004470 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d001      	beq.n	8003a96 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e058      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	b2d2      	uxtb	r2, r2
 8003aa2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f003 0304 	and.w	r3, r3, #4
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d124      	bne.n	8003b20 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aec:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	691a      	ldr	r2, [r3, #16]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	b2d2      	uxtb	r2, r2
 8003afa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	1c5a      	adds	r2, r3, #1
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f47f ae88 	bne.w	800383a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003b46:	2302      	movs	r3, #2
  }
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3728      	adds	r7, #40	; 0x28
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	00010004 	.word	0x00010004
 8003b54:	20000010 	.word	0x20000010
 8003b58:	14f8b589 	.word	0x14f8b589

08003b5c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af02      	add	r7, sp, #8
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	4608      	mov	r0, r1
 8003b66:	4611      	mov	r1, r2
 8003b68:	461a      	mov	r2, r3
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	817b      	strh	r3, [r7, #10]
 8003b6e:	460b      	mov	r3, r1
 8003b70:	813b      	strh	r3, [r7, #8]
 8003b72:	4613      	mov	r3, r2
 8003b74:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b76:	f7ff f823 	bl	8002bc0 <HAL_GetTick>
 8003b7a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b20      	cmp	r3, #32
 8003b86:	f040 80d9 	bne.w	8003d3c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	9300      	str	r3, [sp, #0]
 8003b8e:	2319      	movs	r3, #25
 8003b90:	2201      	movs	r2, #1
 8003b92:	496d      	ldr	r1, [pc, #436]	; (8003d48 <HAL_I2C_Mem_Write+0x1ec>)
 8003b94:	68f8      	ldr	r0, [r7, #12]
 8003b96:	f000 fac1 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d001      	beq.n	8003ba4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	e0cc      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2C_Mem_Write+0x56>
 8003bae:	2302      	movs	r3, #2
 8003bb0:	e0c5      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d007      	beq.n	8003bd8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0201 	orr.w	r2, r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003be6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2221      	movs	r2, #33	; 0x21
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a3a      	ldr	r2, [r7, #32]
 8003c02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c0e:	b29a      	uxth	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	4a4d      	ldr	r2, [pc, #308]	; (8003d4c <HAL_I2C_Mem_Write+0x1f0>)
 8003c18:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c1a:	88f8      	ldrh	r0, [r7, #6]
 8003c1c:	893a      	ldrh	r2, [r7, #8]
 8003c1e:	8979      	ldrh	r1, [r7, #10]
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	9301      	str	r3, [sp, #4]
 8003c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c26:	9300      	str	r3, [sp, #0]
 8003c28:	4603      	mov	r3, r0
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 f9e0 	bl	8003ff0 <I2C_RequestMemoryWrite>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d052      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e081      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c3e:	68f8      	ldr	r0, [r7, #12]
 8003c40:	f000 fb86 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d00d      	beq.n	8003c66 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	d107      	bne.n	8003c62 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c60:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e06b      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	3b01      	subs	r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	b29a      	uxth	r2, r3
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	695b      	ldr	r3, [r3, #20]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b04      	cmp	r3, #4
 8003ca2:	d11b      	bne.n	8003cdc <HAL_I2C_Mem_Write+0x180>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d017      	beq.n	8003cdc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	781a      	ldrb	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd2:	b29b      	uxth	r3, r3
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	b29a      	uxth	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1aa      	bne.n	8003c3a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f000 fb79 	bl	80043e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00d      	beq.n	8003d10 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf8:	2b04      	cmp	r3, #4
 8003cfa:	d107      	bne.n	8003d0c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681a      	ldr	r2, [r3, #0]
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e016      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2220      	movs	r2, #32
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003d3c:	2302      	movs	r3, #2
  }
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	00100002 	.word	0x00100002
 8003d4c:	ffff0000 	.word	0xffff0000

08003d50 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af02      	add	r7, sp, #8
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	607a      	str	r2, [r7, #4]
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b08      	cmp	r3, #8
 8003d6a:	d006      	beq.n	8003d7a <I2C_MasterRequestWrite+0x2a>
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d003      	beq.n	8003d7a <I2C_MasterRequestWrite+0x2a>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d78:	d108      	bne.n	8003d8c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d88:	601a      	str	r2, [r3, #0]
 8003d8a:	e00b      	b.n	8003da4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d90:	2b12      	cmp	r3, #18
 8003d92:	d107      	bne.n	8003da4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003da2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f9b3 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00d      	beq.n	8003dd8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dca:	d103      	bne.n	8003dd4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e035      	b.n	8003e44 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de0:	d108      	bne.n	8003df4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003de2:	897b      	ldrh	r3, [r7, #10]
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	461a      	mov	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003df0:	611a      	str	r2, [r3, #16]
 8003df2:	e01b      	b.n	8003e2c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003df4:	897b      	ldrh	r3, [r7, #10]
 8003df6:	11db      	asrs	r3, r3, #7
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	f003 0306 	and.w	r3, r3, #6
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f063 030f 	orn	r3, r3, #15
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	490e      	ldr	r1, [pc, #56]	; (8003e4c <I2C_MasterRequestWrite+0xfc>)
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 f9fc 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e010      	b.n	8003e44 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003e22:	897b      	ldrh	r3, [r7, #10]
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	4907      	ldr	r1, [pc, #28]	; (8003e50 <I2C_MasterRequestWrite+0x100>)
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f9ec 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	00010008 	.word	0x00010008
 8003e50:	00010002 	.word	0x00010002

08003e54 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	603b      	str	r3, [r7, #0]
 8003e60:	460b      	mov	r3, r1
 8003e62:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e68:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e78:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d006      	beq.n	8003e8e <I2C_MasterRequestRead+0x3a>
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d003      	beq.n	8003e8e <I2C_MasterRequestRead+0x3a>
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e8c:	d108      	bne.n	8003ea0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e9c:	601a      	str	r2, [r3, #0]
 8003e9e:	e00b      	b.n	8003eb8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	2b11      	cmp	r3, #17
 8003ea6:	d107      	bne.n	8003eb8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003eb6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 f929 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00d      	beq.n	8003eec <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	d103      	bne.n	8003ee8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e079      	b.n	8003fe0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ef4:	d108      	bne.n	8003f08 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ef6:	897b      	ldrh	r3, [r7, #10]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e05f      	b.n	8003fc8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f08:	897b      	ldrh	r3, [r7, #10]
 8003f0a:	11db      	asrs	r3, r3, #7
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	f003 0306 	and.w	r3, r3, #6
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f063 030f 	orn	r3, r3, #15
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4930      	ldr	r1, [pc, #192]	; (8003fe8 <I2C_MasterRequestRead+0x194>)
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f000 f972 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d001      	beq.n	8003f36 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e054      	b.n	8003fe0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f36:	897b      	ldrh	r3, [r7, #10]
 8003f38:	b2da      	uxtb	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	687a      	ldr	r2, [r7, #4]
 8003f44:	4929      	ldr	r1, [pc, #164]	; (8003fec <I2C_MasterRequestRead+0x198>)
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f962 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e044      	b.n	8003fe0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	613b      	str	r3, [r7, #16]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	613b      	str	r3, [r7, #16]
 8003f6a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f7a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f88:	68f8      	ldr	r0, [r7, #12]
 8003f8a:	f000 f8c7 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00d      	beq.n	8003fb0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fa2:	d103      	bne.n	8003fac <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003faa:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e017      	b.n	8003fe0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003fb0:	897b      	ldrh	r3, [r7, #10]
 8003fb2:	11db      	asrs	r3, r3, #7
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 0306 	and.w	r3, r3, #6
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	f063 030e 	orn	r3, r3, #14
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4907      	ldr	r1, [pc, #28]	; (8003fec <I2C_MasterRequestRead+0x198>)
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 f91e 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d001      	beq.n	8003fde <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003fda:	2301      	movs	r3, #1
 8003fdc:	e000      	b.n	8003fe0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3718      	adds	r7, #24
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	00010008 	.word	0x00010008
 8003fec:	00010002 	.word	0x00010002

08003ff0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b088      	sub	sp, #32
 8003ff4:	af02      	add	r7, sp, #8
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	4608      	mov	r0, r1
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4603      	mov	r3, r0
 8004000:	817b      	strh	r3, [r7, #10]
 8004002:	460b      	mov	r3, r1
 8004004:	813b      	strh	r3, [r7, #8]
 8004006:	4613      	mov	r3, r2
 8004008:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004018:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	2200      	movs	r2, #0
 8004022:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 f878 	bl	800411c <I2C_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800403c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004040:	d103      	bne.n	800404a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004048:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e05f      	b.n	800410e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800404e:	897b      	ldrh	r3, [r7, #10]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800405c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004060:	6a3a      	ldr	r2, [r7, #32]
 8004062:	492d      	ldr	r1, [pc, #180]	; (8004118 <I2C_RequestMemoryWrite+0x128>)
 8004064:	68f8      	ldr	r0, [r7, #12]
 8004066:	f000 f8d3 	bl	8004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800406a:	4603      	mov	r3, r0
 800406c:	2b00      	cmp	r3, #0
 800406e:	d001      	beq.n	8004074 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	e04c      	b.n	800410e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004074:	2300      	movs	r3, #0
 8004076:	617b      	str	r3, [r7, #20]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	617b      	str	r3, [r7, #20]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	699b      	ldr	r3, [r3, #24]
 8004086:	617b      	str	r3, [r7, #20]
 8004088:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408c:	6a39      	ldr	r1, [r7, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 f95e 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d00d      	beq.n	80040b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	2b04      	cmp	r3, #4
 80040a0:	d107      	bne.n	80040b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e02b      	b.n	800410e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80040b6:	88fb      	ldrh	r3, [r7, #6]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040bc:	893b      	ldrh	r3, [r7, #8]
 80040be:	b2da      	uxtb	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	611a      	str	r2, [r3, #16]
 80040c6:	e021      	b.n	800410c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80040c8:	893b      	ldrh	r3, [r7, #8]
 80040ca:	0a1b      	lsrs	r3, r3, #8
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80040d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040d8:	6a39      	ldr	r1, [r7, #32]
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 f938 	bl	8004350 <I2C_WaitOnTXEFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00d      	beq.n	8004102 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d107      	bne.n	80040fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e005      	b.n	800410e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004102:	893b      	ldrh	r3, [r7, #8]
 8004104:	b2da      	uxtb	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800410c:	2300      	movs	r3, #0
}
 800410e:	4618      	mov	r0, r3
 8004110:	3718      	adds	r7, #24
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	00010002 	.word	0x00010002

0800411c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b084      	sub	sp, #16
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800412c:	e048      	b.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004134:	d044      	beq.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004136:	f7fe fd43 	bl	8002bc0 <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	429a      	cmp	r2, r3
 8004144:	d302      	bcc.n	800414c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d139      	bne.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0c1b      	lsrs	r3, r3, #16
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b01      	cmp	r3, #1
 8004154:	d10d      	bne.n	8004172 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	43da      	mvns	r2, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	4013      	ands	r3, r2
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	bf0c      	ite	eq
 8004168:	2301      	moveq	r3, #1
 800416a:	2300      	movne	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	461a      	mov	r2, r3
 8004170:	e00c      	b.n	800418c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	699b      	ldr	r3, [r3, #24]
 8004178:	43da      	mvns	r2, r3
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	4013      	ands	r3, r2
 800417e:	b29b      	uxth	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	429a      	cmp	r2, r3
 8004190:	d116      	bne.n	80041c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ac:	f043 0220 	orr.w	r2, r3, #32
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e023      	b.n	8004208 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	0c1b      	lsrs	r3, r3, #16
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d10d      	bne.n	80041e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	43da      	mvns	r2, r3
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	4013      	ands	r3, r2
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	bf0c      	ite	eq
 80041dc:	2301      	moveq	r3, #1
 80041de:	2300      	movne	r3, #0
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	e00c      	b.n	8004200 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	43da      	mvns	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4013      	ands	r3, r2
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	bf0c      	ite	eq
 80041f8:	2301      	moveq	r3, #1
 80041fa:	2300      	movne	r3, #0
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	461a      	mov	r2, r3
 8004200:	79fb      	ldrb	r3, [r7, #7]
 8004202:	429a      	cmp	r2, r3
 8004204:	d093      	beq.n	800412e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	607a      	str	r2, [r7, #4]
 800421c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800421e:	e071      	b.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	695b      	ldr	r3, [r3, #20]
 8004226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800422e:	d123      	bne.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800423e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004248:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2200      	movs	r2, #0
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e067      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d041      	beq.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004280:	f7fe fc9e 	bl	8002bc0 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d136      	bne.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	0c1b      	lsrs	r3, r3, #16
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d10c      	bne.n	80042ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	43da      	mvns	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	4013      	ands	r3, r2
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	bf14      	ite	ne
 80042b2:	2301      	movne	r3, #1
 80042b4:	2300      	moveq	r3, #0
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	e00b      	b.n	80042d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	43da      	mvns	r2, r3
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	4013      	ands	r3, r2
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d016      	beq.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	f043 0220 	orr.w	r2, r3, #32
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e021      	b.n	8004348 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	0c1b      	lsrs	r3, r3, #16
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b01      	cmp	r3, #1
 800430c:	d10c      	bne.n	8004328 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	43da      	mvns	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	4013      	ands	r3, r2
 800431a:	b29b      	uxth	r3, r3
 800431c:	2b00      	cmp	r3, #0
 800431e:	bf14      	ite	ne
 8004320:	2301      	movne	r3, #1
 8004322:	2300      	moveq	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e00b      	b.n	8004340 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf14      	ite	ne
 800433a:	2301      	movne	r3, #1
 800433c:	2300      	moveq	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f af6d 	bne.w	8004220 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b084      	sub	sp, #16
 8004354:	af00      	add	r7, sp, #0
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800435c:	e034      	b.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f8e3 	bl	800452a <I2C_IsAcknowledgeFailed>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e034      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004374:	d028      	beq.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004376:	f7fe fc23 	bl	8002bc0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	68ba      	ldr	r2, [r7, #8]
 8004382:	429a      	cmp	r2, r3
 8004384:	d302      	bcc.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d11d      	bne.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004396:	2b80      	cmp	r3, #128	; 0x80
 8004398:	d016      	beq.n	80043c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	f043 0220 	orr.w	r2, r3, #32
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e007      	b.n	80043d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d2:	2b80      	cmp	r3, #128	; 0x80
 80043d4:	d1c3      	bne.n	800435e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043ec:	e034      	b.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f89b 	bl	800452a <I2C_IsAcknowledgeFailed>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e034      	b.n	8004468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d028      	beq.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fbdb 	bl	8002bc0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d11d      	bne.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d016      	beq.n	8004458 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e007      	b.n	8004468 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	695b      	ldr	r3, [r3, #20]
 800445e:	f003 0304 	and.w	r3, r3, #4
 8004462:	2b04      	cmp	r3, #4
 8004464:	d1c3      	bne.n	80043ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800447c:	e049      	b.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f003 0310 	and.w	r3, r3, #16
 8004488:	2b10      	cmp	r3, #16
 800448a:	d119      	bne.n	80044c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f06f 0210 	mvn.w	r2, #16
 8004494:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2220      	movs	r2, #32
 80044a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e030      	b.n	8004522 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c0:	f7fe fb7e 	bl	8002bc0 <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	68ba      	ldr	r2, [r7, #8]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d302      	bcc.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d11d      	bne.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e0:	2b40      	cmp	r3, #64	; 0x40
 80044e2:	d016      	beq.n	8004512 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2220      	movs	r2, #32
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	f043 0220 	orr.w	r2, r3, #32
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e007      	b.n	8004522 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	695b      	ldr	r3, [r3, #20]
 8004518:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451c:	2b40      	cmp	r3, #64	; 0x40
 800451e:	d1ae      	bne.n	800447e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	695b      	ldr	r3, [r3, #20]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004540:	d11b      	bne.n	800457a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800454a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2220      	movs	r2, #32
 8004556:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	f043 0204 	orr.w	r2, r3, #4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	370c      	adds	r7, #12
 8004580:	46bd      	mov	sp, r7
 8004582:	bc80      	pop	{r7}
 8004584:	4770      	bx	lr
	...

08004588 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d101      	bne.n	800459a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e26c      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	f000 8087 	beq.w	80046b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045a8:	4b92      	ldr	r3, [pc, #584]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f003 030c 	and.w	r3, r3, #12
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d00c      	beq.n	80045ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80045b4:	4b8f      	ldr	r3, [pc, #572]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f003 030c 	and.w	r3, r3, #12
 80045bc:	2b08      	cmp	r3, #8
 80045be:	d112      	bne.n	80045e6 <HAL_RCC_OscConfig+0x5e>
 80045c0:	4b8c      	ldr	r3, [pc, #560]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d10b      	bne.n	80045e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045ce:	4b89      	ldr	r3, [pc, #548]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d06c      	beq.n	80046b4 <HAL_RCC_OscConfig+0x12c>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d168      	bne.n	80046b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e246      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ee:	d106      	bne.n	80045fe <HAL_RCC_OscConfig+0x76>
 80045f0:	4b80      	ldr	r3, [pc, #512]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a7f      	ldr	r2, [pc, #508]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80045f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045fa:	6013      	str	r3, [r2, #0]
 80045fc:	e02e      	b.n	800465c <HAL_RCC_OscConfig+0xd4>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d10c      	bne.n	8004620 <HAL_RCC_OscConfig+0x98>
 8004606:	4b7b      	ldr	r3, [pc, #492]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a7a      	ldr	r2, [pc, #488]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800460c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004610:	6013      	str	r3, [r2, #0]
 8004612:	4b78      	ldr	r3, [pc, #480]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a77      	ldr	r2, [pc, #476]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004618:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800461c:	6013      	str	r3, [r2, #0]
 800461e:	e01d      	b.n	800465c <HAL_RCC_OscConfig+0xd4>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004628:	d10c      	bne.n	8004644 <HAL_RCC_OscConfig+0xbc>
 800462a:	4b72      	ldr	r3, [pc, #456]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a71      	ldr	r2, [pc, #452]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004634:	6013      	str	r3, [r2, #0]
 8004636:	4b6f      	ldr	r3, [pc, #444]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a6e      	ldr	r2, [pc, #440]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800463c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004640:	6013      	str	r3, [r2, #0]
 8004642:	e00b      	b.n	800465c <HAL_RCC_OscConfig+0xd4>
 8004644:	4b6b      	ldr	r3, [pc, #428]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a6a      	ldr	r2, [pc, #424]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800464a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	4b68      	ldr	r3, [pc, #416]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a67      	ldr	r2, [pc, #412]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004664:	f7fe faac 	bl	8002bc0 <HAL_GetTick>
 8004668:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	e008      	b.n	800467e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800466c:	f7fe faa8 	bl	8002bc0 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	2b64      	cmp	r3, #100	; 0x64
 8004678:	d901      	bls.n	800467e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e1fa      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800467e:	4b5d      	ldr	r3, [pc, #372]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0f0      	beq.n	800466c <HAL_RCC_OscConfig+0xe4>
 800468a:	e014      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800468c:	f7fe fa98 	bl	8002bc0 <HAL_GetTick>
 8004690:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004692:	e008      	b.n	80046a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004694:	f7fe fa94 	bl	8002bc0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	2b64      	cmp	r3, #100	; 0x64
 80046a0:	d901      	bls.n	80046a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046a2:	2303      	movs	r3, #3
 80046a4:	e1e6      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046a6:	4b53      	ldr	r3, [pc, #332]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d1f0      	bne.n	8004694 <HAL_RCC_OscConfig+0x10c>
 80046b2:	e000      	b.n	80046b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d063      	beq.n	800478a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80046c2:	4b4c      	ldr	r3, [pc, #304]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d00b      	beq.n	80046e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80046ce:	4b49      	ldr	r3, [pc, #292]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d11c      	bne.n	8004714 <HAL_RCC_OscConfig+0x18c>
 80046da:	4b46      	ldr	r3, [pc, #280]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d116      	bne.n	8004714 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046e6:	4b43      	ldr	r3, [pc, #268]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_RCC_OscConfig+0x176>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d001      	beq.n	80046fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e1ba      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046fe:	4b3d      	ldr	r3, [pc, #244]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	4939      	ldr	r1, [pc, #228]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800470e:	4313      	orrs	r3, r2
 8004710:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004712:	e03a      	b.n	800478a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	691b      	ldr	r3, [r3, #16]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d020      	beq.n	800475e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800471c:	4b36      	ldr	r3, [pc, #216]	; (80047f8 <HAL_RCC_OscConfig+0x270>)
 800471e:	2201      	movs	r2, #1
 8004720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004722:	f7fe fa4d 	bl	8002bc0 <HAL_GetTick>
 8004726:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004728:	e008      	b.n	800473c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800472a:	f7fe fa49 	bl	8002bc0 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	2b02      	cmp	r3, #2
 8004736:	d901      	bls.n	800473c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004738:	2303      	movs	r3, #3
 800473a:	e19b      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800473c:	4b2d      	ldr	r3, [pc, #180]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d0f0      	beq.n	800472a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004748:	4b2a      	ldr	r3, [pc, #168]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	00db      	lsls	r3, r3, #3
 8004756:	4927      	ldr	r1, [pc, #156]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004758:	4313      	orrs	r3, r2
 800475a:	600b      	str	r3, [r1, #0]
 800475c:	e015      	b.n	800478a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800475e:	4b26      	ldr	r3, [pc, #152]	; (80047f8 <HAL_RCC_OscConfig+0x270>)
 8004760:	2200      	movs	r2, #0
 8004762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004764:	f7fe fa2c 	bl	8002bc0 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800476c:	f7fe fa28 	bl	8002bc0 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e17a      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0302 	and.w	r3, r3, #2
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1f0      	bne.n	800476c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f003 0308 	and.w	r3, r3, #8
 8004792:	2b00      	cmp	r3, #0
 8004794:	d03a      	beq.n	800480c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d019      	beq.n	80047d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800479e:	4b17      	ldr	r3, [pc, #92]	; (80047fc <HAL_RCC_OscConfig+0x274>)
 80047a0:	2201      	movs	r2, #1
 80047a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a4:	f7fe fa0c 	bl	8002bc0 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047ac:	f7fe fa08 	bl	8002bc0 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e15a      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <HAL_RCC_OscConfig+0x26c>)
 80047c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80047ca:	2001      	movs	r0, #1
 80047cc:	f000 facc 	bl	8004d68 <RCC_Delay>
 80047d0:	e01c      	b.n	800480c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80047d2:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <HAL_RCC_OscConfig+0x274>)
 80047d4:	2200      	movs	r2, #0
 80047d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047d8:	f7fe f9f2 	bl	8002bc0 <HAL_GetTick>
 80047dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047de:	e00f      	b.n	8004800 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047e0:	f7fe f9ee 	bl	8002bc0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d908      	bls.n	8004800 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e140      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
 80047f2:	bf00      	nop
 80047f4:	40021000 	.word	0x40021000
 80047f8:	42420000 	.word	0x42420000
 80047fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004800:	4b9e      	ldr	r3, [pc, #632]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1e9      	bne.n	80047e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a6 	beq.w	8004966 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800481e:	4b97      	ldr	r3, [pc, #604]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10d      	bne.n	8004846 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800482a:	4b94      	ldr	r3, [pc, #592]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 800482c:	69db      	ldr	r3, [r3, #28]
 800482e:	4a93      	ldr	r2, [pc, #588]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004834:	61d3      	str	r3, [r2, #28]
 8004836:	4b91      	ldr	r3, [pc, #580]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800483e:	60bb      	str	r3, [r7, #8]
 8004840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004842:	2301      	movs	r3, #1
 8004844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004846:	4b8e      	ldr	r3, [pc, #568]	; (8004a80 <HAL_RCC_OscConfig+0x4f8>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d118      	bne.n	8004884 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004852:	4b8b      	ldr	r3, [pc, #556]	; (8004a80 <HAL_RCC_OscConfig+0x4f8>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a8a      	ldr	r2, [pc, #552]	; (8004a80 <HAL_RCC_OscConfig+0x4f8>)
 8004858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800485e:	f7fe f9af 	bl	8002bc0 <HAL_GetTick>
 8004862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004864:	e008      	b.n	8004878 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004866:	f7fe f9ab 	bl	8002bc0 <HAL_GetTick>
 800486a:	4602      	mov	r2, r0
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	1ad3      	subs	r3, r2, r3
 8004870:	2b64      	cmp	r3, #100	; 0x64
 8004872:	d901      	bls.n	8004878 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004874:	2303      	movs	r3, #3
 8004876:	e0fd      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4b81      	ldr	r3, [pc, #516]	; (8004a80 <HAL_RCC_OscConfig+0x4f8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0f0      	beq.n	8004866 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <HAL_RCC_OscConfig+0x312>
 800488c:	4b7b      	ldr	r3, [pc, #492]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a7a      	ldr	r2, [pc, #488]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004892:	f043 0301 	orr.w	r3, r3, #1
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	e02d      	b.n	80048f6 <HAL_RCC_OscConfig+0x36e>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10c      	bne.n	80048bc <HAL_RCC_OscConfig+0x334>
 80048a2:	4b76      	ldr	r3, [pc, #472]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048a4:	6a1b      	ldr	r3, [r3, #32]
 80048a6:	4a75      	ldr	r2, [pc, #468]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048a8:	f023 0301 	bic.w	r3, r3, #1
 80048ac:	6213      	str	r3, [r2, #32]
 80048ae:	4b73      	ldr	r3, [pc, #460]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	4a72      	ldr	r2, [pc, #456]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048b4:	f023 0304 	bic.w	r3, r3, #4
 80048b8:	6213      	str	r3, [r2, #32]
 80048ba:	e01c      	b.n	80048f6 <HAL_RCC_OscConfig+0x36e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	2b05      	cmp	r3, #5
 80048c2:	d10c      	bne.n	80048de <HAL_RCC_OscConfig+0x356>
 80048c4:	4b6d      	ldr	r3, [pc, #436]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	4a6c      	ldr	r2, [pc, #432]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048ca:	f043 0304 	orr.w	r3, r3, #4
 80048ce:	6213      	str	r3, [r2, #32]
 80048d0:	4b6a      	ldr	r3, [pc, #424]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048d2:	6a1b      	ldr	r3, [r3, #32]
 80048d4:	4a69      	ldr	r2, [pc, #420]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	6213      	str	r3, [r2, #32]
 80048dc:	e00b      	b.n	80048f6 <HAL_RCC_OscConfig+0x36e>
 80048de:	4b67      	ldr	r3, [pc, #412]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	4a66      	ldr	r2, [pc, #408]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048e4:	f023 0301 	bic.w	r3, r3, #1
 80048e8:	6213      	str	r3, [r2, #32]
 80048ea:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	4a63      	ldr	r2, [pc, #396]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80048f0:	f023 0304 	bic.w	r3, r3, #4
 80048f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d015      	beq.n	800492a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048fe:	f7fe f95f 	bl	8002bc0 <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004904:	e00a      	b.n	800491c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004906:	f7fe f95b 	bl	8002bc0 <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	f241 3288 	movw	r2, #5000	; 0x1388
 8004914:	4293      	cmp	r3, r2
 8004916:	d901      	bls.n	800491c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004918:	2303      	movs	r3, #3
 800491a:	e0ab      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800491c:	4b57      	ldr	r3, [pc, #348]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f003 0302 	and.w	r3, r3, #2
 8004924:	2b00      	cmp	r3, #0
 8004926:	d0ee      	beq.n	8004906 <HAL_RCC_OscConfig+0x37e>
 8004928:	e014      	b.n	8004954 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492a:	f7fe f949 	bl	8002bc0 <HAL_GetTick>
 800492e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004930:	e00a      	b.n	8004948 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004932:	f7fe f945 	bl	8002bc0 <HAL_GetTick>
 8004936:	4602      	mov	r2, r0
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004940:	4293      	cmp	r3, r2
 8004942:	d901      	bls.n	8004948 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e095      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004948:	4b4c      	ldr	r3, [pc, #304]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 800494a:	6a1b      	ldr	r3, [r3, #32]
 800494c:	f003 0302 	and.w	r3, r3, #2
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ee      	bne.n	8004932 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004954:	7dfb      	ldrb	r3, [r7, #23]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d105      	bne.n	8004966 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800495a:	4b48      	ldr	r3, [pc, #288]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	4a47      	ldr	r2, [pc, #284]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004960:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004964:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	2b00      	cmp	r3, #0
 800496c:	f000 8081 	beq.w	8004a72 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004970:	4b42      	ldr	r3, [pc, #264]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 030c 	and.w	r3, r3, #12
 8004978:	2b08      	cmp	r3, #8
 800497a:	d061      	beq.n	8004a40 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	69db      	ldr	r3, [r3, #28]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d146      	bne.n	8004a12 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004984:	4b3f      	ldr	r3, [pc, #252]	; (8004a84 <HAL_RCC_OscConfig+0x4fc>)
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498a:	f7fe f919 	bl	8002bc0 <HAL_GetTick>
 800498e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004990:	e008      	b.n	80049a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004992:	f7fe f915 	bl	8002bc0 <HAL_GetTick>
 8004996:	4602      	mov	r2, r0
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	2b02      	cmp	r3, #2
 800499e:	d901      	bls.n	80049a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049a0:	2303      	movs	r3, #3
 80049a2:	e067      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049a4:	4b35      	ldr	r3, [pc, #212]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1f0      	bne.n	8004992 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049b8:	d108      	bne.n	80049cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80049ba:	4b30      	ldr	r3, [pc, #192]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	492d      	ldr	r1, [pc, #180]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80049cc:	4b2b      	ldr	r3, [pc, #172]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a19      	ldr	r1, [r3, #32]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049dc:	430b      	orrs	r3, r1
 80049de:	4927      	ldr	r1, [pc, #156]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049e4:	4b27      	ldr	r3, [pc, #156]	; (8004a84 <HAL_RCC_OscConfig+0x4fc>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ea:	f7fe f8e9 	bl	8002bc0 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f2:	f7fe f8e5 	bl	8002bc0 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e037      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a04:	4b1d      	ldr	r3, [pc, #116]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0f0      	beq.n	80049f2 <HAL_RCC_OscConfig+0x46a>
 8004a10:	e02f      	b.n	8004a72 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a12:	4b1c      	ldr	r3, [pc, #112]	; (8004a84 <HAL_RCC_OscConfig+0x4fc>)
 8004a14:	2200      	movs	r2, #0
 8004a16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a18:	f7fe f8d2 	bl	8002bc0 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a1e:	e008      	b.n	8004a32 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a20:	f7fe f8ce 	bl	8002bc0 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	2b02      	cmp	r3, #2
 8004a2c:	d901      	bls.n	8004a32 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e020      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d1f0      	bne.n	8004a20 <HAL_RCC_OscConfig+0x498>
 8004a3e:	e018      	b.n	8004a72 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	69db      	ldr	r3, [r3, #28]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d101      	bne.n	8004a4c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e013      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a4c:	4b0b      	ldr	r3, [pc, #44]	; (8004a7c <HAL_RCC_OscConfig+0x4f4>)
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a1b      	ldr	r3, [r3, #32]
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d106      	bne.n	8004a6e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d001      	beq.n	8004a72 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3718      	adds	r7, #24
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	40007000 	.word	0x40007000
 8004a84:	42420060 	.word	0x42420060

08004a88 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0d0      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a9c:	4b6a      	ldr	r3, [pc, #424]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0307 	and.w	r3, r3, #7
 8004aa4:	683a      	ldr	r2, [r7, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d910      	bls.n	8004acc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aaa:	4b67      	ldr	r3, [pc, #412]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f023 0207 	bic.w	r2, r3, #7
 8004ab2:	4965      	ldr	r1, [pc, #404]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004aba:	4b63      	ldr	r3, [pc, #396]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0307 	and.w	r3, r3, #7
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d001      	beq.n	8004acc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e0b8      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d020      	beq.n	8004b1a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d005      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ae4:	4b59      	ldr	r3, [pc, #356]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	4a58      	ldr	r2, [pc, #352]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004aea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d005      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004afc:	4b53      	ldr	r3, [pc, #332]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	4a52      	ldr	r2, [pc, #328]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b02:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b06:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b08:	4b50      	ldr	r3, [pc, #320]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	494d      	ldr	r1, [pc, #308]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d040      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d107      	bne.n	8004b3e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b2e:	4b47      	ldr	r3, [pc, #284]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d115      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e07f      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b02      	cmp	r3, #2
 8004b44:	d107      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b46:	4b41      	ldr	r3, [pc, #260]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d109      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e073      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b56:	4b3d      	ldr	r3, [pc, #244]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d101      	bne.n	8004b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e06b      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b66:	4b39      	ldr	r3, [pc, #228]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	f023 0203 	bic.w	r2, r3, #3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	4936      	ldr	r1, [pc, #216]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b78:	f7fe f822 	bl	8002bc0 <HAL_GetTick>
 8004b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b7e:	e00a      	b.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b80:	f7fe f81e 	bl	8002bc0 <HAL_GetTick>
 8004b84:	4602      	mov	r2, r0
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e053      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b96:	4b2d      	ldr	r3, [pc, #180]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f003 020c 	and.w	r2, r3, #12
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	009b      	lsls	r3, r3, #2
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	d1eb      	bne.n	8004b80 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d210      	bcs.n	8004bd8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b24      	ldr	r3, [pc, #144]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f023 0207 	bic.w	r2, r3, #7
 8004bbe:	4922      	ldr	r1, [pc, #136]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc6:	4b20      	ldr	r3, [pc, #128]	; (8004c48 <HAL_RCC_ClockConfig+0x1c0>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d001      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e032      	b.n	8004c3e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d008      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	4916      	ldr	r1, [pc, #88]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d009      	beq.n	8004c16 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	490e      	ldr	r1, [pc, #56]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c12:	4313      	orrs	r3, r2
 8004c14:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c16:	f000 f821 	bl	8004c5c <HAL_RCC_GetSysClockFreq>
 8004c1a:	4602      	mov	r2, r0
 8004c1c:	4b0b      	ldr	r3, [pc, #44]	; (8004c4c <HAL_RCC_ClockConfig+0x1c4>)
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	091b      	lsrs	r3, r3, #4
 8004c22:	f003 030f 	and.w	r3, r3, #15
 8004c26:	490a      	ldr	r1, [pc, #40]	; (8004c50 <HAL_RCC_ClockConfig+0x1c8>)
 8004c28:	5ccb      	ldrb	r3, [r1, r3]
 8004c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2e:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <HAL_RCC_ClockConfig+0x1cc>)
 8004c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_RCC_ClockConfig+0x1d0>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f7fd ff80 	bl	8002b3c <HAL_InitTick>

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3710      	adds	r7, #16
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}
 8004c46:	bf00      	nop
 8004c48:	40022000 	.word	0x40022000
 8004c4c:	40021000 	.word	0x40021000
 8004c50:	08005eb0 	.word	0x08005eb0
 8004c54:	20000010 	.word	0x20000010
 8004c58:	20000014 	.word	0x20000014

08004c5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b087      	sub	sp, #28
 8004c60:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60fb      	str	r3, [r7, #12]
 8004c66:	2300      	movs	r3, #0
 8004c68:	60bb      	str	r3, [r7, #8]
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c72:	2300      	movs	r3, #0
 8004c74:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c76:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
 8004c82:	2b04      	cmp	r3, #4
 8004c84:	d002      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x30>
 8004c86:	2b08      	cmp	r3, #8
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x36>
 8004c8a:	e027      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c8c:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8e:	613b      	str	r3, [r7, #16]
      break;
 8004c90:	e027      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	0c9b      	lsrs	r3, r3, #18
 8004c96:	f003 030f 	and.w	r3, r3, #15
 8004c9a:	4a17      	ldr	r2, [pc, #92]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c9c:	5cd3      	ldrb	r3, [r2, r3]
 8004c9e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d010      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	0c5b      	lsrs	r3, r3, #17
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	4a11      	ldr	r2, [pc, #68]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004cb6:	5cd3      	ldrb	r3, [r2, r3]
 8004cb8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a0d      	ldr	r2, [pc, #52]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cbe:	fb02 f203 	mul.w	r2, r2, r3
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	617b      	str	r3, [r7, #20]
 8004cca:	e004      	b.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a0c      	ldr	r2, [pc, #48]	; (8004d00 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004cd0:	fb02 f303 	mul.w	r3, r2, r3
 8004cd4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	613b      	str	r3, [r7, #16]
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004cde:	613b      	str	r3, [r7, #16]
      break;
 8004ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce2:	693b      	ldr	r3, [r7, #16]
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	371c      	adds	r7, #28
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bc80      	pop	{r7}
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	007a1200 	.word	0x007a1200
 8004cf8:	08005ec8 	.word	0x08005ec8
 8004cfc:	08005ed8 	.word	0x08005ed8
 8004d00:	003d0900 	.word	0x003d0900

08004d04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d08:	4b02      	ldr	r3, [pc, #8]	; (8004d14 <HAL_RCC_GetHCLKFreq+0x10>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bc80      	pop	{r7}
 8004d12:	4770      	bx	lr
 8004d14:	20000010 	.word	0x20000010

08004d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d1c:	f7ff fff2 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d20:	4602      	mov	r2, r0
 8004d22:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	0a1b      	lsrs	r3, r3, #8
 8004d28:	f003 0307 	and.w	r3, r3, #7
 8004d2c:	4903      	ldr	r1, [pc, #12]	; (8004d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2e:	5ccb      	ldrb	r3, [r1, r3]
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	08005ec0 	.word	0x08005ec0

08004d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d44:	f7ff ffde 	bl	8004d04 <HAL_RCC_GetHCLKFreq>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	4b05      	ldr	r3, [pc, #20]	; (8004d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	0adb      	lsrs	r3, r3, #11
 8004d50:	f003 0307 	and.w	r3, r3, #7
 8004d54:	4903      	ldr	r1, [pc, #12]	; (8004d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d56:	5ccb      	ldrb	r3, [r1, r3]
 8004d58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	40021000 	.word	0x40021000
 8004d64:	08005ec0 	.word	0x08005ec0

08004d68 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d70:	4b0a      	ldr	r3, [pc, #40]	; (8004d9c <RCC_Delay+0x34>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0a      	ldr	r2, [pc, #40]	; (8004da0 <RCC_Delay+0x38>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	0a5b      	lsrs	r3, r3, #9
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d84:	bf00      	nop
  }
  while (Delay --);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1e5a      	subs	r2, r3, #1
 8004d8a:	60fa      	str	r2, [r7, #12]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1f9      	bne.n	8004d84 <RCC_Delay+0x1c>
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bc80      	pop	{r7}
 8004d9a:	4770      	bx	lr
 8004d9c:	20000010 	.word	0x20000010
 8004da0:	10624dd3 	.word	0x10624dd3

08004da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e041      	b.n	8004e3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f7fd fd56 	bl	800287c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fac2 	bl	800536c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3708      	adds	r7, #8
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d109      	bne.n	8004e68 <HAL_TIM_PWM_Start+0x24>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	bf14      	ite	ne
 8004e60:	2301      	movne	r3, #1
 8004e62:	2300      	moveq	r3, #0
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	e022      	b.n	8004eae <HAL_TIM_PWM_Start+0x6a>
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	2b04      	cmp	r3, #4
 8004e6c:	d109      	bne.n	8004e82 <HAL_TIM_PWM_Start+0x3e>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	e015      	b.n	8004eae <HAL_TIM_PWM_Start+0x6a>
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	2b08      	cmp	r3, #8
 8004e86:	d109      	bne.n	8004e9c <HAL_TIM_PWM_Start+0x58>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e8e:	b2db      	uxtb	r3, r3
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e008      	b.n	8004eae <HAL_TIM_PWM_Start+0x6a>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	2b01      	cmp	r3, #1
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e05e      	b.n	8004f74 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0x82>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ec4:	e013      	b.n	8004eee <HAL_TIM_PWM_Start+0xaa>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b04      	cmp	r3, #4
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_PWM_Start+0x92>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ed4:	e00b      	b.n	8004eee <HAL_TIM_PWM_Start+0xaa>
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	2b08      	cmp	r3, #8
 8004eda:	d104      	bne.n	8004ee6 <HAL_TIM_PWM_Start+0xa2>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee4:	e003      	b.n	8004eee <HAL_TIM_PWM_Start+0xaa>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2202      	movs	r2, #2
 8004eea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	6839      	ldr	r1, [r7, #0]
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fc2e 	bl	8005758 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1e      	ldr	r2, [pc, #120]	; (8004f7c <HAL_TIM_PWM_Start+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a18      	ldr	r2, [pc, #96]	; (8004f7c <HAL_TIM_PWM_Start+0x138>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <HAL_TIM_PWM_Start+0xfa>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f28:	d009      	beq.n	8004f3e <HAL_TIM_PWM_Start+0xfa>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a14      	ldr	r2, [pc, #80]	; (8004f80 <HAL_TIM_PWM_Start+0x13c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <HAL_TIM_PWM_Start+0xfa>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a12      	ldr	r2, [pc, #72]	; (8004f84 <HAL_TIM_PWM_Start+0x140>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d111      	bne.n	8004f62 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2b06      	cmp	r3, #6
 8004f4e:	d010      	beq.n	8004f72 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0201 	orr.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f60:	e007      	b.n	8004f72 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40000400 	.word	0x40000400
 8004f84:	40000800 	.word	0x40000800

08004f88 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e093      	b.n	80050c4 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fd fbfb 	bl	80027ac <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	6812      	ldr	r2, [r2, #0]
 8004fc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fcc:	f023 0307 	bic.w	r3, r3, #7
 8004fd0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3304      	adds	r3, #4
 8004fda:	4619      	mov	r1, r3
 8004fdc:	4610      	mov	r0, r2
 8004fde:	f000 f9c5 	bl	800536c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	6a1b      	ldr	r3, [r3, #32]
 8004ff8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800500a:	f023 0303 	bic.w	r3, r3, #3
 800500e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	021b      	lsls	r3, r3, #8
 800501a:	4313      	orrs	r3, r2
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005028:	f023 030c 	bic.w	r3, r3, #12
 800502c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005038:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68da      	ldr	r2, [r3, #12]
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	69db      	ldr	r3, [r3, #28]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	4313      	orrs	r3, r2
 8005046:	693a      	ldr	r2, [r7, #16]
 8005048:	4313      	orrs	r3, r2
 800504a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	011a      	lsls	r2, r3, #4
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6a1b      	ldr	r3, [r3, #32]
 8005056:	031b      	lsls	r3, r3, #12
 8005058:	4313      	orrs	r3, r2
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	4313      	orrs	r3, r2
 800505e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005066:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	4313      	orrs	r3, r2
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68fa      	ldr	r2, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2201      	movs	r2, #1
 800509e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3718      	adds	r7, #24
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d110      	bne.n	800511e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d102      	bne.n	8005108 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005102:	7b7b      	ldrb	r3, [r7, #13]
 8005104:	2b01      	cmp	r3, #1
 8005106:	d001      	beq.n	800510c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e069      	b.n	80051e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2202      	movs	r2, #2
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800511c:	e031      	b.n	8005182 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	2b04      	cmp	r3, #4
 8005122:	d110      	bne.n	8005146 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005124:	7bbb      	ldrb	r3, [r7, #14]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d102      	bne.n	8005130 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800512a:	7b3b      	ldrb	r3, [r7, #12]
 800512c:	2b01      	cmp	r3, #1
 800512e:	d001      	beq.n	8005134 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e055      	b.n	80051e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2202      	movs	r2, #2
 8005138:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2202      	movs	r2, #2
 8005140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005144:	e01d      	b.n	8005182 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d108      	bne.n	800515e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800514c:	7bbb      	ldrb	r3, [r7, #14]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d105      	bne.n	800515e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005152:	7b7b      	ldrb	r3, [r7, #13]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d102      	bne.n	800515e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005158:	7b3b      	ldrb	r3, [r7, #12]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d001      	beq.n	8005162 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e03e      	b.n	80051e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2202      	movs	r2, #2
 8005166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2202      	movs	r2, #2
 800516e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2202      	movs	r2, #2
 8005176:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_TIM_Encoder_Start+0xc4>
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2b04      	cmp	r3, #4
 800518c:	d008      	beq.n	80051a0 <HAL_TIM_Encoder_Start+0xd4>
 800518e:	e00f      	b.n	80051b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	2100      	movs	r1, #0
 8005198:	4618      	mov	r0, r3
 800519a:	f000 fadd 	bl	8005758 <TIM_CCxChannelCmd>
      break;
 800519e:	e016      	b.n	80051ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	2201      	movs	r2, #1
 80051a6:	2104      	movs	r1, #4
 80051a8:	4618      	mov	r0, r3
 80051aa:	f000 fad5 	bl	8005758 <TIM_CCxChannelCmd>
      break;
 80051ae:	e00e      	b.n	80051ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	2100      	movs	r1, #0
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 facd 	bl	8005758 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	2104      	movs	r1, #4
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 fac6 	bl	8005758 <TIM_CCxChannelCmd>
      break;
 80051cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f042 0201 	orr.w	r2, r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	60f8      	str	r0, [r7, #12]
 80051f0:	60b9      	str	r1, [r7, #8]
 80051f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80051f4:	2300      	movs	r3, #0
 80051f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d101      	bne.n	8005206 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005202:	2302      	movs	r3, #2
 8005204:	e0ae      	b.n	8005364 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b0c      	cmp	r3, #12
 8005212:	f200 809f 	bhi.w	8005354 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	08005251 	.word	0x08005251
 8005220:	08005355 	.word	0x08005355
 8005224:	08005355 	.word	0x08005355
 8005228:	08005355 	.word	0x08005355
 800522c:	08005291 	.word	0x08005291
 8005230:	08005355 	.word	0x08005355
 8005234:	08005355 	.word	0x08005355
 8005238:	08005355 	.word	0x08005355
 800523c:	080052d3 	.word	0x080052d3
 8005240:	08005355 	.word	0x08005355
 8005244:	08005355 	.word	0x08005355
 8005248:	08005355 	.word	0x08005355
 800524c:	08005313 	.word	0x08005313
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	4618      	mov	r0, r3
 8005258:	f000 f8f6 	bl	8005448 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	699a      	ldr	r2, [r3, #24]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0208 	orr.w	r2, r2, #8
 800526a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f022 0204 	bic.w	r2, r2, #4
 800527a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6999      	ldr	r1, [r3, #24]
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	691a      	ldr	r2, [r3, #16]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	619a      	str	r2, [r3, #24]
      break;
 800528e:	e064      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68b9      	ldr	r1, [r7, #8]
 8005296:	4618      	mov	r0, r3
 8005298:	f000 f93c 	bl	8005514 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	699a      	ldr	r2, [r3, #24]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699a      	ldr	r2, [r3, #24]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	6999      	ldr	r1, [r3, #24]
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	021a      	lsls	r2, r3, #8
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	619a      	str	r2, [r3, #24]
      break;
 80052d0:	e043      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68b9      	ldr	r1, [r7, #8]
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f985 	bl	80055e8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69da      	ldr	r2, [r3, #28]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f042 0208 	orr.w	r2, r2, #8
 80052ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69da      	ldr	r2, [r3, #28]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f022 0204 	bic.w	r2, r2, #4
 80052fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69d9      	ldr	r1, [r3, #28]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	61da      	str	r2, [r3, #28]
      break;
 8005310:	e023      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68b9      	ldr	r1, [r7, #8]
 8005318:	4618      	mov	r0, r3
 800531a:	f000 f9cf 	bl	80056bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69da      	ldr	r2, [r3, #28]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800532c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69d9      	ldr	r1, [r3, #28]
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	021a      	lsls	r2, r3, #8
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	61da      	str	r2, [r3, #28]
      break;
 8005352:	e002      	b.n	800535a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	75fb      	strb	r3, [r7, #23]
      break;
 8005358:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005362:	7dfb      	ldrb	r3, [r7, #23]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3718      	adds	r7, #24
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2f      	ldr	r2, [pc, #188]	; (800543c <TIM_Base_SetConfig+0xd0>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_Base_SetConfig+0x30>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0x30>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a2c      	ldr	r2, [pc, #176]	; (8005440 <TIM_Base_SetConfig+0xd4>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0x30>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a2b      	ldr	r2, [pc, #172]	; (8005444 <TIM_Base_SetConfig+0xd8>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <TIM_Base_SetConfig+0xd0>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00b      	beq.n	80053ce <TIM_Base_SetConfig+0x62>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d007      	beq.n	80053ce <TIM_Base_SetConfig+0x62>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	; (8005440 <TIM_Base_SetConfig+0xd4>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d003      	beq.n	80053ce <TIM_Base_SetConfig+0x62>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1e      	ldr	r2, [pc, #120]	; (8005444 <TIM_Base_SetConfig+0xd8>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d108      	bne.n	80053e0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	689a      	ldr	r2, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a0d      	ldr	r2, [pc, #52]	; (800543c <TIM_Base_SetConfig+0xd0>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d103      	bne.n	8005414 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	691a      	ldr	r2, [r3, #16]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d005      	beq.n	8005432 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f023 0201 	bic.w	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	611a      	str	r2, [r3, #16]
  }
}
 8005432:	bf00      	nop
 8005434:	3714      	adds	r7, #20
 8005436:	46bd      	mov	sp, r7
 8005438:	bc80      	pop	{r7}
 800543a:	4770      	bx	lr
 800543c:	40012c00 	.word	0x40012c00
 8005440:	40000400 	.word	0x40000400
 8005444:	40000800 	.word	0x40000800

08005448 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a1b      	ldr	r3, [r3, #32]
 800545c:	f023 0201 	bic.w	r2, r3, #1
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0303 	bic.w	r3, r3, #3
 800547e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 0302 	bic.w	r3, r3, #2
 8005490:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a1c      	ldr	r2, [pc, #112]	; (8005510 <TIM_OC1_SetConfig+0xc8>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d10c      	bne.n	80054be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 0308 	bic.w	r3, r3, #8
 80054aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	f023 0304 	bic.w	r3, r3, #4
 80054bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a13      	ldr	r2, [pc, #76]	; (8005510 <TIM_OC1_SetConfig+0xc8>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d111      	bne.n	80054ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	695b      	ldr	r3, [r3, #20]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	693a      	ldr	r2, [r7, #16]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68fa      	ldr	r2, [r7, #12]
 80054f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	621a      	str	r2, [r3, #32]
}
 8005504:	bf00      	nop
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	bc80      	pop	{r7}
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	40012c00 	.word	0x40012c00

08005514 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005514:	b480      	push	{r7}
 8005516:	b087      	sub	sp, #28
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6a1b      	ldr	r3, [r3, #32]
 8005522:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f023 0210 	bic.w	r2, r3, #16
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	699b      	ldr	r3, [r3, #24]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800554a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	021b      	lsls	r3, r3, #8
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4313      	orrs	r3, r2
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0320 	bic.w	r3, r3, #32
 800555e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	697a      	ldr	r2, [r7, #20]
 8005568:	4313      	orrs	r3, r2
 800556a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a1d      	ldr	r2, [pc, #116]	; (80055e4 <TIM_OC2_SetConfig+0xd0>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10d      	bne.n	8005590 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a14      	ldr	r2, [pc, #80]	; (80055e4 <TIM_OC2_SetConfig+0xd0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d113      	bne.n	80055c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800559e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	693a      	ldr	r2, [r7, #16]
 80055bc:	4313      	orrs	r3, r2
 80055be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	697a      	ldr	r2, [r7, #20]
 80055d8:	621a      	str	r2, [r3, #32]
}
 80055da:	bf00      	nop
 80055dc:	371c      	adds	r7, #28
 80055de:	46bd      	mov	sp, r7
 80055e0:	bc80      	pop	{r7}
 80055e2:	4770      	bx	lr
 80055e4:	40012c00 	.word	0x40012c00

080055e8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b087      	sub	sp, #28
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0303 	bic.w	r3, r3, #3
 800561e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005630:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	021b      	lsls	r3, r3, #8
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a1d      	ldr	r2, [pc, #116]	; (80056b8 <TIM_OC3_SetConfig+0xd0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d10d      	bne.n	8005662 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800564c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	697a      	ldr	r2, [r7, #20]
 8005656:	4313      	orrs	r3, r2
 8005658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a14      	ldr	r2, [pc, #80]	; (80056b8 <TIM_OC3_SetConfig+0xd0>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d113      	bne.n	8005692 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005670:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005678:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	011b      	lsls	r3, r3, #4
 8005680:	693a      	ldr	r2, [r7, #16]
 8005682:	4313      	orrs	r3, r2
 8005684:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	699b      	ldr	r3, [r3, #24]
 800568a:	011b      	lsls	r3, r3, #4
 800568c:	693a      	ldr	r2, [r7, #16]
 800568e:	4313      	orrs	r3, r2
 8005690:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bc80      	pop	{r7}
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40012c00 	.word	0x40012c00

080056bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056bc:	b480      	push	{r7}
 80056be:	b087      	sub	sp, #28
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a1b      	ldr	r3, [r3, #32]
 80056d0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	69db      	ldr	r3, [r3, #28]
 80056e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	021b      	lsls	r3, r3, #8
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	4313      	orrs	r3, r2
 80056fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	031b      	lsls	r3, r3, #12
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0f      	ldr	r2, [pc, #60]	; (8005754 <TIM_OC4_SetConfig+0x98>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d109      	bne.n	8005730 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005722:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	695b      	ldr	r3, [r3, #20]
 8005728:	019b      	lsls	r3, r3, #6
 800572a:	697a      	ldr	r2, [r7, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	693a      	ldr	r2, [r7, #16]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	40012c00 	.word	0x40012c00

08005758 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	f003 031f 	and.w	r3, r3, #31
 800576a:	2201      	movs	r2, #1
 800576c:	fa02 f303 	lsl.w	r3, r2, r3
 8005770:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	6a1a      	ldr	r2, [r3, #32]
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	43db      	mvns	r3, r3
 800577a:	401a      	ands	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 031f 	and.w	r3, r3, #31
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	fa01 f303 	lsl.w	r3, r1, r3
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	bc80      	pop	{r7}
 800579e:	4770      	bx	lr

080057a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d101      	bne.n	80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057b4:	2302      	movs	r3, #2
 80057b6:	e046      	b.n	8005846 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685b      	ldr	r3, [r3, #4]
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	68fa      	ldr	r2, [r7, #12]
 80057f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a16      	ldr	r2, [pc, #88]	; (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00e      	beq.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005804:	d009      	beq.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a12      	ldr	r2, [pc, #72]	; (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d004      	beq.n	800581a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a10      	ldr	r2, [pc, #64]	; (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d10c      	bne.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	4313      	orrs	r3, r2
 800582a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3714      	adds	r7, #20
 800584a:	46bd      	mov	sp, r7
 800584c:	bc80      	pop	{r7}
 800584e:	4770      	bx	lr
 8005850:	40012c00 	.word	0x40012c00
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800

0800585c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800585c:	b580      	push	{r7, lr}
 800585e:	b082      	sub	sp, #8
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800586a:	2301      	movs	r3, #1
 800586c:	e042      	b.n	80058f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d106      	bne.n	8005888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7fd f84c 	bl	8002920 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2224      	movs	r2, #36	; 0x24
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	68da      	ldr	r2, [r3, #12]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800589e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f82b 	bl	80058fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	691a      	ldr	r2, [r3, #16]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	695a      	ldr	r2, [r3, #20]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	68da      	ldr	r2, [r3, #12]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2200      	movs	r2, #0
 80058da:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2220      	movs	r2, #32
 80058e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2220      	movs	r2, #32
 80058e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3708      	adds	r7, #8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689a      	ldr	r2, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	695b      	ldr	r3, [r3, #20]
 8005928:	4313      	orrs	r3, r2
 800592a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005936:	f023 030c 	bic.w	r3, r3, #12
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	430b      	orrs	r3, r1
 8005942:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699a      	ldr	r2, [r3, #24]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <UART_SetConfig+0x114>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005964:	f7ff f9ec 	bl	8004d40 <HAL_RCC_GetPCLK2Freq>
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	e002      	b.n	8005972 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800596c:	f7ff f9d4 	bl	8004d18 <HAL_RCC_GetPCLK1Freq>
 8005970:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4613      	mov	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	4413      	add	r3, r2
 800597a:	009a      	lsls	r2, r3, #2
 800597c:	441a      	add	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	fbb2 f3f3 	udiv	r3, r2, r3
 8005988:	4a22      	ldr	r2, [pc, #136]	; (8005a14 <UART_SetConfig+0x118>)
 800598a:	fba2 2303 	umull	r2, r3, r2, r3
 800598e:	095b      	lsrs	r3, r3, #5
 8005990:	0119      	lsls	r1, r3, #4
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	4613      	mov	r3, r2
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	009a      	lsls	r2, r3, #2
 800599c:	441a      	add	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	009b      	lsls	r3, r3, #2
 80059a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80059a8:	4b1a      	ldr	r3, [pc, #104]	; (8005a14 <UART_SetConfig+0x118>)
 80059aa:	fba3 0302 	umull	r0, r3, r3, r2
 80059ae:	095b      	lsrs	r3, r3, #5
 80059b0:	2064      	movs	r0, #100	; 0x64
 80059b2:	fb00 f303 	mul.w	r3, r0, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	011b      	lsls	r3, r3, #4
 80059ba:	3332      	adds	r3, #50	; 0x32
 80059bc:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <UART_SetConfig+0x118>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	095b      	lsrs	r3, r3, #5
 80059c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059c8:	4419      	add	r1, r3
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4613      	mov	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4413      	add	r3, r2
 80059d2:	009a      	lsls	r2, r3, #2
 80059d4:	441a      	add	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e0:	4b0c      	ldr	r3, [pc, #48]	; (8005a14 <UART_SetConfig+0x118>)
 80059e2:	fba3 0302 	umull	r0, r3, r3, r2
 80059e6:	095b      	lsrs	r3, r3, #5
 80059e8:	2064      	movs	r0, #100	; 0x64
 80059ea:	fb00 f303 	mul.w	r3, r0, r3
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	3332      	adds	r3, #50	; 0x32
 80059f4:	4a07      	ldr	r2, [pc, #28]	; (8005a14 <UART_SetConfig+0x118>)
 80059f6:	fba2 2303 	umull	r2, r3, r2, r3
 80059fa:	095b      	lsrs	r3, r3, #5
 80059fc:	f003 020f 	and.w	r2, r3, #15
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	440a      	add	r2, r1
 8005a06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a08:	bf00      	nop
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}
 8005a10:	40013800 	.word	0x40013800
 8005a14:	51eb851f 	.word	0x51eb851f

08005a18 <atan2f>:
 8005a18:	f000 b822 	b.w	8005a60 <__ieee754_atan2f>

08005a1c <sqrtf>:
 8005a1c:	b538      	push	{r3, r4, r5, lr}
 8005a1e:	4605      	mov	r5, r0
 8005a20:	f000 f8a4 	bl	8005b6c <__ieee754_sqrtf>
 8005a24:	4b0d      	ldr	r3, [pc, #52]	; (8005a5c <sqrtf+0x40>)
 8005a26:	4604      	mov	r4, r0
 8005a28:	f993 3000 	ldrsb.w	r3, [r3]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	d012      	beq.n	8005a56 <sqrtf+0x3a>
 8005a30:	4629      	mov	r1, r5
 8005a32:	4628      	mov	r0, r5
 8005a34:	f7fb fa9e 	bl	8000f74 <__aeabi_fcmpun>
 8005a38:	b968      	cbnz	r0, 8005a56 <sqrtf+0x3a>
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	4628      	mov	r0, r5
 8005a3e:	f7fb fa71 	bl	8000f24 <__aeabi_fcmplt>
 8005a42:	b140      	cbz	r0, 8005a56 <sqrtf+0x3a>
 8005a44:	f000 f9f4 	bl	8005e30 <__errno>
 8005a48:	2321      	movs	r3, #33	; 0x21
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	6003      	str	r3, [r0, #0]
 8005a4e:	4608      	mov	r0, r1
 8005a50:	f7fb f97e 	bl	8000d50 <__aeabi_fdiv>
 8005a54:	4604      	mov	r4, r0
 8005a56:	4620      	mov	r0, r4
 8005a58:	bd38      	pop	{r3, r4, r5, pc}
 8005a5a:	bf00      	nop
 8005a5c:	20000019 	.word	0x20000019

08005a60 <__ieee754_atan2f>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005a66:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	dc05      	bgt.n	8005a7a <__ieee754_atan2f+0x1a>
 8005a6e:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005a72:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005a76:	4607      	mov	r7, r0
 8005a78:	dd04      	ble.n	8005a84 <__ieee754_atan2f+0x24>
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f7fa ffac 	bl	80009d8 <__addsf3>
 8005a80:	4603      	mov	r3, r0
 8005a82:	e011      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005a84:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005a88:	d103      	bne.n	8005a92 <__ieee754_atan2f+0x32>
 8005a8a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a8e:	f000 b8bf 	b.w	8005c10 <atanf>
 8005a92:	178c      	asrs	r4, r1, #30
 8005a94:	f004 0402 	and.w	r4, r4, #2
 8005a98:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005a9c:	b932      	cbnz	r2, 8005aac <__ieee754_atan2f+0x4c>
 8005a9e:	2c02      	cmp	r4, #2
 8005aa0:	d04c      	beq.n	8005b3c <__ieee754_atan2f+0xdc>
 8005aa2:	2c03      	cmp	r4, #3
 8005aa4:	d100      	bne.n	8005aa8 <__ieee754_atan2f+0x48>
 8005aa6:	4b29      	ldr	r3, [pc, #164]	; (8005b4c <__ieee754_atan2f+0xec>)
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aac:	b91e      	cbnz	r6, 8005ab6 <__ieee754_atan2f+0x56>
 8005aae:	2f00      	cmp	r7, #0
 8005ab0:	da4a      	bge.n	8005b48 <__ieee754_atan2f+0xe8>
 8005ab2:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <__ieee754_atan2f+0xf0>)
 8005ab4:	e7f8      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005ab6:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005aba:	d10e      	bne.n	8005ada <__ieee754_atan2f+0x7a>
 8005abc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ac0:	f104 34ff 	add.w	r4, r4, #4294967295
 8005ac4:	d105      	bne.n	8005ad2 <__ieee754_atan2f+0x72>
 8005ac6:	2c02      	cmp	r4, #2
 8005ac8:	d83a      	bhi.n	8005b40 <__ieee754_atan2f+0xe0>
 8005aca:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <__ieee754_atan2f+0xf4>)
 8005acc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005ad0:	e7ea      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005ad2:	2c02      	cmp	r4, #2
 8005ad4:	d836      	bhi.n	8005b44 <__ieee754_atan2f+0xe4>
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <__ieee754_atan2f+0xf8>)
 8005ad8:	e7f8      	b.n	8005acc <__ieee754_atan2f+0x6c>
 8005ada:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ade:	d0e6      	beq.n	8005aae <__ieee754_atan2f+0x4e>
 8005ae0:	1b92      	subs	r2, r2, r6
 8005ae2:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8005ae6:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8005aea:	da17      	bge.n	8005b1c <__ieee754_atan2f+0xbc>
 8005aec:	2900      	cmp	r1, #0
 8005aee:	da01      	bge.n	8005af4 <__ieee754_atan2f+0x94>
 8005af0:	303c      	adds	r0, #60	; 0x3c
 8005af2:	db15      	blt.n	8005b20 <__ieee754_atan2f+0xc0>
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7fb f92b 	bl	8000d50 <__aeabi_fdiv>
 8005afa:	f000 f995 	bl	8005e28 <fabsf>
 8005afe:	f000 f887 	bl	8005c10 <atanf>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2c01      	cmp	r4, #1
 8005b06:	d00d      	beq.n	8005b24 <__ieee754_atan2f+0xc4>
 8005b08:	2c02      	cmp	r4, #2
 8005b0a:	d00e      	beq.n	8005b2a <__ieee754_atan2f+0xca>
 8005b0c:	2c00      	cmp	r4, #0
 8005b0e:	d0cb      	beq.n	8005aa8 <__ieee754_atan2f+0x48>
 8005b10:	4912      	ldr	r1, [pc, #72]	; (8005b5c <__ieee754_atan2f+0xfc>)
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fa ff60 	bl	80009d8 <__addsf3>
 8005b18:	4911      	ldr	r1, [pc, #68]	; (8005b60 <__ieee754_atan2f+0x100>)
 8005b1a:	e00c      	b.n	8005b36 <__ieee754_atan2f+0xd6>
 8005b1c:	4b11      	ldr	r3, [pc, #68]	; (8005b64 <__ieee754_atan2f+0x104>)
 8005b1e:	e7f1      	b.n	8005b04 <__ieee754_atan2f+0xa4>
 8005b20:	2300      	movs	r3, #0
 8005b22:	e7ef      	b.n	8005b04 <__ieee754_atan2f+0xa4>
 8005b24:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005b28:	e7be      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005b2a:	490c      	ldr	r1, [pc, #48]	; (8005b5c <__ieee754_atan2f+0xfc>)
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa ff53 	bl	80009d8 <__addsf3>
 8005b32:	4601      	mov	r1, r0
 8005b34:	480a      	ldr	r0, [pc, #40]	; (8005b60 <__ieee754_atan2f+0x100>)
 8005b36:	f7fa ff4d 	bl	80009d4 <__aeabi_fsub>
 8005b3a:	e7a1      	b.n	8005a80 <__ieee754_atan2f+0x20>
 8005b3c:	4b08      	ldr	r3, [pc, #32]	; (8005b60 <__ieee754_atan2f+0x100>)
 8005b3e:	e7b3      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005b40:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <__ieee754_atan2f+0x108>)
 8005b42:	e7b1      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005b44:	2300      	movs	r3, #0
 8005b46:	e7af      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005b48:	4b06      	ldr	r3, [pc, #24]	; (8005b64 <__ieee754_atan2f+0x104>)
 8005b4a:	e7ad      	b.n	8005aa8 <__ieee754_atan2f+0x48>
 8005b4c:	c0490fdb 	.word	0xc0490fdb
 8005b50:	bfc90fdb 	.word	0xbfc90fdb
 8005b54:	08005edc 	.word	0x08005edc
 8005b58:	08005ee8 	.word	0x08005ee8
 8005b5c:	33bbbd2e 	.word	0x33bbbd2e
 8005b60:	40490fdb 	.word	0x40490fdb
 8005b64:	3fc90fdb 	.word	0x3fc90fdb
 8005b68:	3f490fdb 	.word	0x3f490fdb

08005b6c <__ieee754_sqrtf>:
 8005b6c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005b70:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	4603      	mov	r3, r0
 8005b78:	4604      	mov	r4, r0
 8005b7a:	d309      	bcc.n	8005b90 <__ieee754_sqrtf+0x24>
 8005b7c:	4601      	mov	r1, r0
 8005b7e:	f7fb f833 	bl	8000be8 <__aeabi_fmul>
 8005b82:	4601      	mov	r1, r0
 8005b84:	4620      	mov	r0, r4
 8005b86:	f7fa ff27 	bl	80009d8 <__addsf3>
 8005b8a:	4604      	mov	r4, r0
 8005b8c:	4620      	mov	r0, r4
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	2a00      	cmp	r2, #0
 8005b92:	d0fb      	beq.n	8005b8c <__ieee754_sqrtf+0x20>
 8005b94:	2800      	cmp	r0, #0
 8005b96:	da06      	bge.n	8005ba6 <__ieee754_sqrtf+0x3a>
 8005b98:	4601      	mov	r1, r0
 8005b9a:	f7fa ff1b 	bl	80009d4 <__aeabi_fsub>
 8005b9e:	4601      	mov	r1, r0
 8005ba0:	f7fb f8d6 	bl	8000d50 <__aeabi_fdiv>
 8005ba4:	e7f1      	b.n	8005b8a <__ieee754_sqrtf+0x1e>
 8005ba6:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8005baa:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8005bae:	d029      	beq.n	8005c04 <__ieee754_sqrtf+0x98>
 8005bb0:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8005bb4:	07cb      	lsls	r3, r1, #31
 8005bb6:	f04f 0300 	mov.w	r3, #0
 8005bba:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8005bbe:	f04f 0419 	mov.w	r4, #25
 8005bc2:	461e      	mov	r6, r3
 8005bc4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005bc8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005bcc:	bf58      	it	pl
 8005bce:	0052      	lslpl	r2, r2, #1
 8005bd0:	1040      	asrs	r0, r0, #1
 8005bd2:	0052      	lsls	r2, r2, #1
 8005bd4:	1875      	adds	r5, r6, r1
 8005bd6:	4295      	cmp	r5, r2
 8005bd8:	bfde      	ittt	le
 8005bda:	186e      	addle	r6, r5, r1
 8005bdc:	1b52      	suble	r2, r2, r5
 8005bde:	185b      	addle	r3, r3, r1
 8005be0:	3c01      	subs	r4, #1
 8005be2:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005be6:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005bea:	d1f3      	bne.n	8005bd4 <__ieee754_sqrtf+0x68>
 8005bec:	b112      	cbz	r2, 8005bf4 <__ieee754_sqrtf+0x88>
 8005bee:	3301      	adds	r3, #1
 8005bf0:	f023 0301 	bic.w	r3, r3, #1
 8005bf4:	105c      	asrs	r4, r3, #1
 8005bf6:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005bfa:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8005bfe:	e7c5      	b.n	8005b8c <__ieee754_sqrtf+0x20>
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	3201      	adds	r2, #1
 8005c04:	0218      	lsls	r0, r3, #8
 8005c06:	d5fb      	bpl.n	8005c00 <__ieee754_sqrtf+0x94>
 8005c08:	3a01      	subs	r2, #1
 8005c0a:	1a89      	subs	r1, r1, r2
 8005c0c:	e7d0      	b.n	8005bb0 <__ieee754_sqrtf+0x44>
	...

08005c10 <atanf>:
 8005c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c14:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005c18:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005c1c:	4604      	mov	r4, r0
 8005c1e:	4680      	mov	r8, r0
 8005c20:	db0e      	blt.n	8005c40 <atanf+0x30>
 8005c22:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005c26:	dd04      	ble.n	8005c32 <atanf+0x22>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	f7fa fed5 	bl	80009d8 <__addsf3>
 8005c2e:	4604      	mov	r4, r0
 8005c30:	e003      	b.n	8005c3a <atanf+0x2a>
 8005c32:	2800      	cmp	r0, #0
 8005c34:	f300 80ce 	bgt.w	8005dd4 <atanf+0x1c4>
 8005c38:	4c67      	ldr	r4, [pc, #412]	; (8005dd8 <atanf+0x1c8>)
 8005c3a:	4620      	mov	r0, r4
 8005c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c40:	4b66      	ldr	r3, [pc, #408]	; (8005ddc <atanf+0x1cc>)
 8005c42:	429d      	cmp	r5, r3
 8005c44:	dc0e      	bgt.n	8005c64 <atanf+0x54>
 8005c46:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005c4a:	da08      	bge.n	8005c5e <atanf+0x4e>
 8005c4c:	4964      	ldr	r1, [pc, #400]	; (8005de0 <atanf+0x1d0>)
 8005c4e:	f7fa fec3 	bl	80009d8 <__addsf3>
 8005c52:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c56:	f7fb f983 	bl	8000f60 <__aeabi_fcmpgt>
 8005c5a:	2800      	cmp	r0, #0
 8005c5c:	d1ed      	bne.n	8005c3a <atanf+0x2a>
 8005c5e:	f04f 36ff 	mov.w	r6, #4294967295
 8005c62:	e01c      	b.n	8005c9e <atanf+0x8e>
 8005c64:	f000 f8e0 	bl	8005e28 <fabsf>
 8005c68:	4b5e      	ldr	r3, [pc, #376]	; (8005de4 <atanf+0x1d4>)
 8005c6a:	4604      	mov	r4, r0
 8005c6c:	429d      	cmp	r5, r3
 8005c6e:	dc7c      	bgt.n	8005d6a <atanf+0x15a>
 8005c70:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005c74:	429d      	cmp	r5, r3
 8005c76:	dc67      	bgt.n	8005d48 <atanf+0x138>
 8005c78:	4601      	mov	r1, r0
 8005c7a:	f7fa fead 	bl	80009d8 <__addsf3>
 8005c7e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005c82:	f7fa fea7 	bl	80009d4 <__aeabi_fsub>
 8005c86:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c8a:	4605      	mov	r5, r0
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f7fa fea3 	bl	80009d8 <__addsf3>
 8005c92:	4601      	mov	r1, r0
 8005c94:	4628      	mov	r0, r5
 8005c96:	f7fb f85b 	bl	8000d50 <__aeabi_fdiv>
 8005c9a:	2600      	movs	r6, #0
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	f7fa ffa1 	bl	8000be8 <__aeabi_fmul>
 8005ca6:	4601      	mov	r1, r0
 8005ca8:	4607      	mov	r7, r0
 8005caa:	f7fa ff9d 	bl	8000be8 <__aeabi_fmul>
 8005cae:	4605      	mov	r5, r0
 8005cb0:	494d      	ldr	r1, [pc, #308]	; (8005de8 <atanf+0x1d8>)
 8005cb2:	f7fa ff99 	bl	8000be8 <__aeabi_fmul>
 8005cb6:	494d      	ldr	r1, [pc, #308]	; (8005dec <atanf+0x1dc>)
 8005cb8:	f7fa fe8e 	bl	80009d8 <__addsf3>
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	f7fa ff93 	bl	8000be8 <__aeabi_fmul>
 8005cc2:	494b      	ldr	r1, [pc, #300]	; (8005df0 <atanf+0x1e0>)
 8005cc4:	f7fa fe88 	bl	80009d8 <__addsf3>
 8005cc8:	4629      	mov	r1, r5
 8005cca:	f7fa ff8d 	bl	8000be8 <__aeabi_fmul>
 8005cce:	4949      	ldr	r1, [pc, #292]	; (8005df4 <atanf+0x1e4>)
 8005cd0:	f7fa fe82 	bl	80009d8 <__addsf3>
 8005cd4:	4629      	mov	r1, r5
 8005cd6:	f7fa ff87 	bl	8000be8 <__aeabi_fmul>
 8005cda:	4947      	ldr	r1, [pc, #284]	; (8005df8 <atanf+0x1e8>)
 8005cdc:	f7fa fe7c 	bl	80009d8 <__addsf3>
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa ff81 	bl	8000be8 <__aeabi_fmul>
 8005ce6:	4945      	ldr	r1, [pc, #276]	; (8005dfc <atanf+0x1ec>)
 8005ce8:	f7fa fe76 	bl	80009d8 <__addsf3>
 8005cec:	4639      	mov	r1, r7
 8005cee:	f7fa ff7b 	bl	8000be8 <__aeabi_fmul>
 8005cf2:	4943      	ldr	r1, [pc, #268]	; (8005e00 <atanf+0x1f0>)
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f7fa ff76 	bl	8000be8 <__aeabi_fmul>
 8005cfc:	4941      	ldr	r1, [pc, #260]	; (8005e04 <atanf+0x1f4>)
 8005cfe:	f7fa fe69 	bl	80009d4 <__aeabi_fsub>
 8005d02:	4629      	mov	r1, r5
 8005d04:	f7fa ff70 	bl	8000be8 <__aeabi_fmul>
 8005d08:	493f      	ldr	r1, [pc, #252]	; (8005e08 <atanf+0x1f8>)
 8005d0a:	f7fa fe63 	bl	80009d4 <__aeabi_fsub>
 8005d0e:	4629      	mov	r1, r5
 8005d10:	f7fa ff6a 	bl	8000be8 <__aeabi_fmul>
 8005d14:	493d      	ldr	r1, [pc, #244]	; (8005e0c <atanf+0x1fc>)
 8005d16:	f7fa fe5d 	bl	80009d4 <__aeabi_fsub>
 8005d1a:	4629      	mov	r1, r5
 8005d1c:	f7fa ff64 	bl	8000be8 <__aeabi_fmul>
 8005d20:	493b      	ldr	r1, [pc, #236]	; (8005e10 <atanf+0x200>)
 8005d22:	f7fa fe57 	bl	80009d4 <__aeabi_fsub>
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa ff5e 	bl	8000be8 <__aeabi_fmul>
 8005d2c:	4601      	mov	r1, r0
 8005d2e:	4638      	mov	r0, r7
 8005d30:	f7fa fe52 	bl	80009d8 <__addsf3>
 8005d34:	4621      	mov	r1, r4
 8005d36:	f7fa ff57 	bl	8000be8 <__aeabi_fmul>
 8005d3a:	1c73      	adds	r3, r6, #1
 8005d3c:	4601      	mov	r1, r0
 8005d3e:	d133      	bne.n	8005da8 <atanf+0x198>
 8005d40:	4620      	mov	r0, r4
 8005d42:	f7fa fe47 	bl	80009d4 <__aeabi_fsub>
 8005d46:	e772      	b.n	8005c2e <atanf+0x1e>
 8005d48:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d4c:	f7fa fe42 	bl	80009d4 <__aeabi_fsub>
 8005d50:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d54:	4605      	mov	r5, r0
 8005d56:	4620      	mov	r0, r4
 8005d58:	f7fa fe3e 	bl	80009d8 <__addsf3>
 8005d5c:	4601      	mov	r1, r0
 8005d5e:	4628      	mov	r0, r5
 8005d60:	f7fa fff6 	bl	8000d50 <__aeabi_fdiv>
 8005d64:	2601      	movs	r6, #1
 8005d66:	4604      	mov	r4, r0
 8005d68:	e799      	b.n	8005c9e <atanf+0x8e>
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <atanf+0x204>)
 8005d6c:	429d      	cmp	r5, r3
 8005d6e:	dc14      	bgt.n	8005d9a <atanf+0x18a>
 8005d70:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005d74:	f7fa fe2e 	bl	80009d4 <__aeabi_fsub>
 8005d78:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	4620      	mov	r0, r4
 8005d80:	f7fa ff32 	bl	8000be8 <__aeabi_fmul>
 8005d84:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d88:	f7fa fe26 	bl	80009d8 <__addsf3>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4628      	mov	r0, r5
 8005d90:	f7fa ffde 	bl	8000d50 <__aeabi_fdiv>
 8005d94:	2602      	movs	r6, #2
 8005d96:	4604      	mov	r4, r0
 8005d98:	e781      	b.n	8005c9e <atanf+0x8e>
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	481e      	ldr	r0, [pc, #120]	; (8005e18 <atanf+0x208>)
 8005d9e:	f7fa ffd7 	bl	8000d50 <__aeabi_fdiv>
 8005da2:	2603      	movs	r6, #3
 8005da4:	4604      	mov	r4, r0
 8005da6:	e77a      	b.n	8005c9e <atanf+0x8e>
 8005da8:	4b1c      	ldr	r3, [pc, #112]	; (8005e1c <atanf+0x20c>)
 8005daa:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005dae:	f7fa fe11 	bl	80009d4 <__aeabi_fsub>
 8005db2:	4621      	mov	r1, r4
 8005db4:	f7fa fe0e 	bl	80009d4 <__aeabi_fsub>
 8005db8:	4b19      	ldr	r3, [pc, #100]	; (8005e20 <atanf+0x210>)
 8005dba:	4601      	mov	r1, r0
 8005dbc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005dc0:	f7fa fe08 	bl	80009d4 <__aeabi_fsub>
 8005dc4:	f1b8 0f00 	cmp.w	r8, #0
 8005dc8:	4604      	mov	r4, r0
 8005dca:	f6bf af36 	bge.w	8005c3a <atanf+0x2a>
 8005dce:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005dd2:	e72c      	b.n	8005c2e <atanf+0x1e>
 8005dd4:	4c13      	ldr	r4, [pc, #76]	; (8005e24 <atanf+0x214>)
 8005dd6:	e730      	b.n	8005c3a <atanf+0x2a>
 8005dd8:	bfc90fdb 	.word	0xbfc90fdb
 8005ddc:	3edfffff 	.word	0x3edfffff
 8005de0:	7149f2ca 	.word	0x7149f2ca
 8005de4:	3f97ffff 	.word	0x3f97ffff
 8005de8:	3c8569d7 	.word	0x3c8569d7
 8005dec:	3d4bda59 	.word	0x3d4bda59
 8005df0:	3d886b35 	.word	0x3d886b35
 8005df4:	3dba2e6e 	.word	0x3dba2e6e
 8005df8:	3e124925 	.word	0x3e124925
 8005dfc:	3eaaaaab 	.word	0x3eaaaaab
 8005e00:	bd15a221 	.word	0xbd15a221
 8005e04:	3d6ef16b 	.word	0x3d6ef16b
 8005e08:	3d9d8795 	.word	0x3d9d8795
 8005e0c:	3de38e38 	.word	0x3de38e38
 8005e10:	3e4ccccd 	.word	0x3e4ccccd
 8005e14:	401bffff 	.word	0x401bffff
 8005e18:	bf800000 	.word	0xbf800000
 8005e1c:	08005f04 	.word	0x08005f04
 8005e20:	08005ef4 	.word	0x08005ef4
 8005e24:	3fc90fdb 	.word	0x3fc90fdb

08005e28 <fabsf>:
 8005e28:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005e2c:	4770      	bx	lr
	...

08005e30 <__errno>:
 8005e30:	4b01      	ldr	r3, [pc, #4]	; (8005e38 <__errno+0x8>)
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	2000001c 	.word	0x2000001c

08005e3c <__libc_init_array>:
 8005e3c:	b570      	push	{r4, r5, r6, lr}
 8005e3e:	2600      	movs	r6, #0
 8005e40:	4d0c      	ldr	r5, [pc, #48]	; (8005e74 <__libc_init_array+0x38>)
 8005e42:	4c0d      	ldr	r4, [pc, #52]	; (8005e78 <__libc_init_array+0x3c>)
 8005e44:	1b64      	subs	r4, r4, r5
 8005e46:	10a4      	asrs	r4, r4, #2
 8005e48:	42a6      	cmp	r6, r4
 8005e4a:	d109      	bne.n	8005e60 <__libc_init_array+0x24>
 8005e4c:	f000 f822 	bl	8005e94 <_init>
 8005e50:	2600      	movs	r6, #0
 8005e52:	4d0a      	ldr	r5, [pc, #40]	; (8005e7c <__libc_init_array+0x40>)
 8005e54:	4c0a      	ldr	r4, [pc, #40]	; (8005e80 <__libc_init_array+0x44>)
 8005e56:	1b64      	subs	r4, r4, r5
 8005e58:	10a4      	asrs	r4, r4, #2
 8005e5a:	42a6      	cmp	r6, r4
 8005e5c:	d105      	bne.n	8005e6a <__libc_init_array+0x2e>
 8005e5e:	bd70      	pop	{r4, r5, r6, pc}
 8005e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e64:	4798      	blx	r3
 8005e66:	3601      	adds	r6, #1
 8005e68:	e7ee      	b.n	8005e48 <__libc_init_array+0xc>
 8005e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e6e:	4798      	blx	r3
 8005e70:	3601      	adds	r6, #1
 8005e72:	e7f2      	b.n	8005e5a <__libc_init_array+0x1e>
 8005e74:	08005f14 	.word	0x08005f14
 8005e78:	08005f14 	.word	0x08005f14
 8005e7c:	08005f14 	.word	0x08005f14
 8005e80:	08005f18 	.word	0x08005f18

08005e84 <memset>:
 8005e84:	4603      	mov	r3, r0
 8005e86:	4402      	add	r2, r0
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d100      	bne.n	8005e8e <memset+0xa>
 8005e8c:	4770      	bx	lr
 8005e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8005e92:	e7f9      	b.n	8005e88 <memset+0x4>

08005e94 <_init>:
 8005e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e96:	bf00      	nop
 8005e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e9a:	bc08      	pop	{r3}
 8005e9c:	469e      	mov	lr, r3
 8005e9e:	4770      	bx	lr

08005ea0 <_fini>:
 8005ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea2:	bf00      	nop
 8005ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ea6:	bc08      	pop	{r3}
 8005ea8:	469e      	mov	lr, r3
 8005eaa:	4770      	bx	lr
