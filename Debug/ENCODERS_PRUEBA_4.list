
ENCODERS_PRUEBA_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e84  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005f94  08005f94  00015f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08005ffc  08005ffc  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ffc  08005ffc  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006000  08006000  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08006004  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000008c  08006090  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08006090  000202f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fa93  00000000  00000000  000200b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c11  00000000  00000000  0002fb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  00031760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e08  00000000  00000000  000325e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e52  00000000  00000000  000333f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000103fc  00000000  00000000  0004b242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dae2  00000000  00000000  0005b63e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e9120  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000427c  00000000  00000000  000e9174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000008c 	.word	0x2000008c
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f7c 	.word	0x08005f7c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000090 	.word	0x20000090
 800014c:	08005f7c 	.word	0x08005f7c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2uiz>:
 80008ec:	004a      	lsls	r2, r1, #1
 80008ee:	d211      	bcs.n	8000914 <__aeabi_d2uiz+0x28>
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d211      	bcs.n	800091a <__aeabi_d2uiz+0x2e>
 80008f6:	d50d      	bpl.n	8000914 <__aeabi_d2uiz+0x28>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d40e      	bmi.n	8000920 <__aeabi_d2uiz+0x34>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	fa23 f002 	lsr.w	r0, r3, r2
 8000912:	4770      	bx	lr
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	4770      	bx	lr
 800091a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800091e:	d102      	bne.n	8000926 <__aeabi_d2uiz+0x3a>
 8000920:	f04f 30ff 	mov.w	r0, #4294967295
 8000924:	4770      	bx	lr
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	4770      	bx	lr

0800092c <__aeabi_d2f>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000934:	bf24      	itt	cs
 8000936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800093a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800093e:	d90d      	bls.n	800095c <__aeabi_d2f+0x30>
 8000940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800094c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000954:	bf08      	it	eq
 8000956:	f020 0001 	biceq.w	r0, r0, #1
 800095a:	4770      	bx	lr
 800095c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000960:	d121      	bne.n	80009a6 <__aeabi_d2f+0x7a>
 8000962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000966:	bfbc      	itt	lt
 8000968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800096c:	4770      	bxlt	lr
 800096e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000972:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000976:	f1c2 0218 	rsb	r2, r2, #24
 800097a:	f1c2 0c20 	rsb	ip, r2, #32
 800097e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000982:	fa20 f002 	lsr.w	r0, r0, r2
 8000986:	bf18      	it	ne
 8000988:	f040 0001 	orrne.w	r0, r0, #1
 800098c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000994:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000998:	ea40 000c 	orr.w	r0, r0, ip
 800099c:	fa23 f302 	lsr.w	r3, r3, r2
 80009a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009a4:	e7cc      	b.n	8000940 <__aeabi_d2f+0x14>
 80009a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009aa:	d107      	bne.n	80009bc <__aeabi_d2f+0x90>
 80009ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009b0:	bf1e      	ittt	ne
 80009b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009ba:	4770      	bxne	lr
 80009bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_frsub>:
 80009cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	e002      	b.n	80009d8 <__addsf3>
 80009d2:	bf00      	nop

080009d4 <__aeabi_fsub>:
 80009d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009d8 <__addsf3>:
 80009d8:	0042      	lsls	r2, r0, #1
 80009da:	bf1f      	itttt	ne
 80009dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009e0:	ea92 0f03 	teqne	r2, r3
 80009e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ec:	d06a      	beq.n	8000ac4 <__addsf3+0xec>
 80009ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009f6:	bfc1      	itttt	gt
 80009f8:	18d2      	addgt	r2, r2, r3
 80009fa:	4041      	eorgt	r1, r0
 80009fc:	4048      	eorgt	r0, r1
 80009fe:	4041      	eorgt	r1, r0
 8000a00:	bfb8      	it	lt
 8000a02:	425b      	neglt	r3, r3
 8000a04:	2b19      	cmp	r3, #25
 8000a06:	bf88      	it	hi
 8000a08:	4770      	bxhi	lr
 8000a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000a16:	bf18      	it	ne
 8000a18:	4240      	negne	r0, r0
 8000a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4249      	negne	r1, r1
 8000a2a:	ea92 0f03 	teq	r2, r3
 8000a2e:	d03f      	beq.n	8000ab0 <__addsf3+0xd8>
 8000a30:	f1a2 0201 	sub.w	r2, r2, #1
 8000a34:	fa41 fc03 	asr.w	ip, r1, r3
 8000a38:	eb10 000c 	adds.w	r0, r0, ip
 8000a3c:	f1c3 0320 	rsb	r3, r3, #32
 8000a40:	fa01 f103 	lsl.w	r1, r1, r3
 8000a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a48:	d502      	bpl.n	8000a50 <__addsf3+0x78>
 8000a4a:	4249      	negs	r1, r1
 8000a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a54:	d313      	bcc.n	8000a7e <__addsf3+0xa6>
 8000a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a5a:	d306      	bcc.n	8000a6a <__addsf3+0x92>
 8000a5c:	0840      	lsrs	r0, r0, #1
 8000a5e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a62:	f102 0201 	add.w	r2, r2, #1
 8000a66:	2afe      	cmp	r2, #254	; 0xfe
 8000a68:	d251      	bcs.n	8000b0e <__addsf3+0x136>
 8000a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a72:	bf08      	it	eq
 8000a74:	f020 0001 	biceq.w	r0, r0, #1
 8000a78:	ea40 0003 	orr.w	r0, r0, r3
 8000a7c:	4770      	bx	lr
 8000a7e:	0049      	lsls	r1, r1, #1
 8000a80:	eb40 0000 	adc.w	r0, r0, r0
 8000a84:	3a01      	subs	r2, #1
 8000a86:	bf28      	it	cs
 8000a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a8c:	d2ed      	bcs.n	8000a6a <__addsf3+0x92>
 8000a8e:	fab0 fc80 	clz	ip, r0
 8000a92:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a96:	ebb2 020c 	subs.w	r2, r2, ip
 8000a9a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a9e:	bfaa      	itet	ge
 8000aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000aa4:	4252      	neglt	r2, r2
 8000aa6:	4318      	orrge	r0, r3
 8000aa8:	bfbc      	itt	lt
 8000aaa:	40d0      	lsrlt	r0, r2
 8000aac:	4318      	orrlt	r0, r3
 8000aae:	4770      	bx	lr
 8000ab0:	f092 0f00 	teq	r2, #0
 8000ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000ab8:	bf06      	itte	eq
 8000aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000abe:	3201      	addeq	r2, #1
 8000ac0:	3b01      	subne	r3, #1
 8000ac2:	e7b5      	b.n	8000a30 <__addsf3+0x58>
 8000ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000acc:	bf18      	it	ne
 8000ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ad2:	d021      	beq.n	8000b18 <__addsf3+0x140>
 8000ad4:	ea92 0f03 	teq	r2, r3
 8000ad8:	d004      	beq.n	8000ae4 <__addsf3+0x10c>
 8000ada:	f092 0f00 	teq	r2, #0
 8000ade:	bf08      	it	eq
 8000ae0:	4608      	moveq	r0, r1
 8000ae2:	4770      	bx	lr
 8000ae4:	ea90 0f01 	teq	r0, r1
 8000ae8:	bf1c      	itt	ne
 8000aea:	2000      	movne	r0, #0
 8000aec:	4770      	bxne	lr
 8000aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000af2:	d104      	bne.n	8000afe <__addsf3+0x126>
 8000af4:	0040      	lsls	r0, r0, #1
 8000af6:	bf28      	it	cs
 8000af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000afc:	4770      	bx	lr
 8000afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000b02:	bf3c      	itt	cc
 8000b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000b08:	4770      	bxcc	lr
 8000b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b16:	4770      	bx	lr
 8000b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b1c:	bf16      	itet	ne
 8000b1e:	4608      	movne	r0, r1
 8000b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b24:	4601      	movne	r1, r0
 8000b26:	0242      	lsls	r2, r0, #9
 8000b28:	bf06      	itte	eq
 8000b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b2e:	ea90 0f01 	teqeq	r0, r1
 8000b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b36:	4770      	bx	lr

08000b38 <__aeabi_ui2f>:
 8000b38:	f04f 0300 	mov.w	r3, #0
 8000b3c:	e004      	b.n	8000b48 <__aeabi_i2f+0x8>
 8000b3e:	bf00      	nop

08000b40 <__aeabi_i2f>:
 8000b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	bf48      	it	mi
 8000b46:	4240      	negmi	r0, r0
 8000b48:	ea5f 0c00 	movs.w	ip, r0
 8000b4c:	bf08      	it	eq
 8000b4e:	4770      	bxeq	lr
 8000b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b54:	4601      	mov	r1, r0
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	e01c      	b.n	8000b96 <__aeabi_l2f+0x2a>

08000b5c <__aeabi_ul2f>:
 8000b5c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b60:	bf08      	it	eq
 8000b62:	4770      	bxeq	lr
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e00a      	b.n	8000b80 <__aeabi_l2f+0x14>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_l2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b78:	d502      	bpl.n	8000b80 <__aeabi_l2f+0x14>
 8000b7a:	4240      	negs	r0, r0
 8000b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b80:	ea5f 0c01 	movs.w	ip, r1
 8000b84:	bf02      	ittt	eq
 8000b86:	4684      	moveq	ip, r0
 8000b88:	4601      	moveq	r1, r0
 8000b8a:	2000      	moveq	r0, #0
 8000b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b90:	bf08      	it	eq
 8000b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b9a:	fabc f28c 	clz	r2, ip
 8000b9e:	3a08      	subs	r2, #8
 8000ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ba4:	db10      	blt.n	8000bc8 <__aeabi_l2f+0x5c>
 8000ba6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000baa:	4463      	add	r3, ip
 8000bac:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000bb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f102 0220 	add.w	r2, r2, #32
 8000bcc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bd0:	f1c2 0220 	rsb	r2, r2, #32
 8000bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bd8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bdc:	eb43 0002 	adc.w	r0, r3, r2
 8000be0:	bf08      	it	eq
 8000be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_fmul>:
 8000be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bf0:	bf1e      	ittt	ne
 8000bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bf6:	ea92 0f0c 	teqne	r2, ip
 8000bfa:	ea93 0f0c 	teqne	r3, ip
 8000bfe:	d06f      	beq.n	8000ce0 <__aeabi_fmul+0xf8>
 8000c00:	441a      	add	r2, r3
 8000c02:	ea80 0c01 	eor.w	ip, r0, r1
 8000c06:	0240      	lsls	r0, r0, #9
 8000c08:	bf18      	it	ne
 8000c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000c0e:	d01e      	beq.n	8000c4e <__aeabi_fmul+0x66>
 8000c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000c1c:	fba0 3101 	umull	r3, r1, r0, r1
 8000c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c28:	bf3e      	ittt	cc
 8000c2a:	0049      	lslcc	r1, r1, #1
 8000c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c30:	005b      	lslcc	r3, r3, #1
 8000c32:	ea40 0001 	orr.w	r0, r0, r1
 8000c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c3a:	2afd      	cmp	r2, #253	; 0xfd
 8000c3c:	d81d      	bhi.n	8000c7a <__aeabi_fmul+0x92>
 8000c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	4770      	bx	lr
 8000c4e:	f090 0f00 	teq	r0, #0
 8000c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c56:	bf08      	it	eq
 8000c58:	0249      	lsleq	r1, r1, #9
 8000c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c62:	3a7f      	subs	r2, #127	; 0x7f
 8000c64:	bfc2      	ittt	gt
 8000c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c6e:	4770      	bxgt	lr
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	3a01      	subs	r2, #1
 8000c7a:	dc5d      	bgt.n	8000d38 <__aeabi_fmul+0x150>
 8000c7c:	f112 0f19 	cmn.w	r2, #25
 8000c80:	bfdc      	itt	le
 8000c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c86:	4770      	bxle	lr
 8000c88:	f1c2 0200 	rsb	r2, r2, #0
 8000c8c:	0041      	lsls	r1, r0, #1
 8000c8e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c92:	f1c2 0220 	rsb	r2, r2, #32
 8000c96:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c9a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c9e:	f140 0000 	adc.w	r0, r0, #0
 8000ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000ca6:	bf08      	it	eq
 8000ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cac:	4770      	bx	lr
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000cb6:	bf02      	ittt	eq
 8000cb8:	0040      	lsleq	r0, r0, #1
 8000cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000cbe:	3a01      	subeq	r2, #1
 8000cc0:	d0f9      	beq.n	8000cb6 <__aeabi_fmul+0xce>
 8000cc2:	ea40 000c 	orr.w	r0, r0, ip
 8000cc6:	f093 0f00 	teq	r3, #0
 8000cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cce:	bf02      	ittt	eq
 8000cd0:	0049      	lsleq	r1, r1, #1
 8000cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cd6:	3b01      	subeq	r3, #1
 8000cd8:	d0f9      	beq.n	8000cce <__aeabi_fmul+0xe6>
 8000cda:	ea41 010c 	orr.w	r1, r1, ip
 8000cde:	e78f      	b.n	8000c00 <__aeabi_fmul+0x18>
 8000ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ce4:	ea92 0f0c 	teq	r2, ip
 8000ce8:	bf18      	it	ne
 8000cea:	ea93 0f0c 	teqne	r3, ip
 8000cee:	d00a      	beq.n	8000d06 <__aeabi_fmul+0x11e>
 8000cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cf4:	bf18      	it	ne
 8000cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cfa:	d1d8      	bne.n	8000cae <__aeabi_fmul+0xc6>
 8000cfc:	ea80 0001 	eor.w	r0, r0, r1
 8000d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d04:	4770      	bx	lr
 8000d06:	f090 0f00 	teq	r0, #0
 8000d0a:	bf17      	itett	ne
 8000d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000d10:	4608      	moveq	r0, r1
 8000d12:	f091 0f00 	teqne	r1, #0
 8000d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000d1a:	d014      	beq.n	8000d46 <__aeabi_fmul+0x15e>
 8000d1c:	ea92 0f0c 	teq	r2, ip
 8000d20:	d101      	bne.n	8000d26 <__aeabi_fmul+0x13e>
 8000d22:	0242      	lsls	r2, r0, #9
 8000d24:	d10f      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d26:	ea93 0f0c 	teq	r3, ip
 8000d2a:	d103      	bne.n	8000d34 <__aeabi_fmul+0x14c>
 8000d2c:	024b      	lsls	r3, r1, #9
 8000d2e:	bf18      	it	ne
 8000d30:	4608      	movne	r0, r1
 8000d32:	d108      	bne.n	8000d46 <__aeabi_fmul+0x15e>
 8000d34:	ea80 0001 	eor.w	r0, r0, r1
 8000d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d4e:	4770      	bx	lr

08000d50 <__aeabi_fdiv>:
 8000d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d58:	bf1e      	ittt	ne
 8000d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d5e:	ea92 0f0c 	teqne	r2, ip
 8000d62:	ea93 0f0c 	teqne	r3, ip
 8000d66:	d069      	beq.n	8000e3c <__aeabi_fdiv+0xec>
 8000d68:	eba2 0203 	sub.w	r2, r2, r3
 8000d6c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d70:	0249      	lsls	r1, r1, #9
 8000d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d76:	d037      	beq.n	8000de8 <__aeabi_fdiv+0x98>
 8000d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	bf38      	it	cc
 8000d8c:	005b      	lslcc	r3, r3, #1
 8000d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d96:	428b      	cmp	r3, r1
 8000d98:	bf24      	itt	cs
 8000d9a:	1a5b      	subcs	r3, r3, r1
 8000d9c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000da4:	bf24      	itt	cs
 8000da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000db2:	bf24      	itt	cs
 8000db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000dc0:	bf24      	itt	cs
 8000dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000dca:	011b      	lsls	r3, r3, #4
 8000dcc:	bf18      	it	ne
 8000dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000dd2:	d1e0      	bne.n	8000d96 <__aeabi_fdiv+0x46>
 8000dd4:	2afd      	cmp	r2, #253	; 0xfd
 8000dd6:	f63f af50 	bhi.w	8000c7a <__aeabi_fmul+0x92>
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de0:	bf08      	it	eq
 8000de2:	f020 0001 	biceq.w	r0, r0, #1
 8000de6:	4770      	bx	lr
 8000de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df0:	327f      	adds	r2, #127	; 0x7f
 8000df2:	bfc2      	ittt	gt
 8000df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dfc:	4770      	bxgt	lr
 8000dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e02:	f04f 0300 	mov.w	r3, #0
 8000e06:	3a01      	subs	r2, #1
 8000e08:	e737      	b.n	8000c7a <__aeabi_fmul+0x92>
 8000e0a:	f092 0f00 	teq	r2, #0
 8000e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e12:	bf02      	ittt	eq
 8000e14:	0040      	lsleq	r0, r0, #1
 8000e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e1a:	3a01      	subeq	r2, #1
 8000e1c:	d0f9      	beq.n	8000e12 <__aeabi_fdiv+0xc2>
 8000e1e:	ea40 000c 	orr.w	r0, r0, ip
 8000e22:	f093 0f00 	teq	r3, #0
 8000e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e2a:	bf02      	ittt	eq
 8000e2c:	0049      	lsleq	r1, r1, #1
 8000e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e32:	3b01      	subeq	r3, #1
 8000e34:	d0f9      	beq.n	8000e2a <__aeabi_fdiv+0xda>
 8000e36:	ea41 010c 	orr.w	r1, r1, ip
 8000e3a:	e795      	b.n	8000d68 <__aeabi_fdiv+0x18>
 8000e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e40:	ea92 0f0c 	teq	r2, ip
 8000e44:	d108      	bne.n	8000e58 <__aeabi_fdiv+0x108>
 8000e46:	0242      	lsls	r2, r0, #9
 8000e48:	f47f af7d 	bne.w	8000d46 <__aeabi_fmul+0x15e>
 8000e4c:	ea93 0f0c 	teq	r3, ip
 8000e50:	f47f af70 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e54:	4608      	mov	r0, r1
 8000e56:	e776      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e58:	ea93 0f0c 	teq	r3, ip
 8000e5c:	d104      	bne.n	8000e68 <__aeabi_fdiv+0x118>
 8000e5e:	024b      	lsls	r3, r1, #9
 8000e60:	f43f af4c 	beq.w	8000cfc <__aeabi_fmul+0x114>
 8000e64:	4608      	mov	r0, r1
 8000e66:	e76e      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e6c:	bf18      	it	ne
 8000e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e72:	d1ca      	bne.n	8000e0a <__aeabi_fdiv+0xba>
 8000e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e78:	f47f af5c 	bne.w	8000d34 <__aeabi_fmul+0x14c>
 8000e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e80:	f47f af3c 	bne.w	8000cfc <__aeabi_fmul+0x114>
 8000e84:	e75f      	b.n	8000d46 <__aeabi_fmul+0x15e>
 8000e86:	bf00      	nop

08000e88 <__gesf2>:
 8000e88:	f04f 3cff 	mov.w	ip, #4294967295
 8000e8c:	e006      	b.n	8000e9c <__cmpsf2+0x4>
 8000e8e:	bf00      	nop

08000e90 <__lesf2>:
 8000e90:	f04f 0c01 	mov.w	ip, #1
 8000e94:	e002      	b.n	8000e9c <__cmpsf2+0x4>
 8000e96:	bf00      	nop

08000e98 <__cmpsf2>:
 8000e98:	f04f 0c01 	mov.w	ip, #1
 8000e9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ea0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ea4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ea8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eac:	bf18      	it	ne
 8000eae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000eb2:	d011      	beq.n	8000ed8 <__cmpsf2+0x40>
 8000eb4:	b001      	add	sp, #4
 8000eb6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000eba:	bf18      	it	ne
 8000ebc:	ea90 0f01 	teqne	r0, r1
 8000ec0:	bf58      	it	pl
 8000ec2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ec6:	bf88      	it	hi
 8000ec8:	17c8      	asrhi	r0, r1, #31
 8000eca:	bf38      	it	cc
 8000ecc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ed0:	bf18      	it	ne
 8000ed2:	f040 0001 	orrne.w	r0, r0, #1
 8000ed6:	4770      	bx	lr
 8000ed8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000edc:	d102      	bne.n	8000ee4 <__cmpsf2+0x4c>
 8000ede:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ee2:	d105      	bne.n	8000ef0 <__cmpsf2+0x58>
 8000ee4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ee8:	d1e4      	bne.n	8000eb4 <__cmpsf2+0x1c>
 8000eea:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000eee:	d0e1      	beq.n	8000eb4 <__cmpsf2+0x1c>
 8000ef0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop

08000ef8 <__aeabi_cfrcmple>:
 8000ef8:	4684      	mov	ip, r0
 8000efa:	4608      	mov	r0, r1
 8000efc:	4661      	mov	r1, ip
 8000efe:	e7ff      	b.n	8000f00 <__aeabi_cfcmpeq>

08000f00 <__aeabi_cfcmpeq>:
 8000f00:	b50f      	push	{r0, r1, r2, r3, lr}
 8000f02:	f7ff ffc9 	bl	8000e98 <__cmpsf2>
 8000f06:	2800      	cmp	r0, #0
 8000f08:	bf48      	it	mi
 8000f0a:	f110 0f00 	cmnmi.w	r0, #0
 8000f0e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000f10 <__aeabi_fcmpeq>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff fff4 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f18:	bf0c      	ite	eq
 8000f1a:	2001      	moveq	r0, #1
 8000f1c:	2000      	movne	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmplt>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffea 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f2c:	bf34      	ite	cc
 8000f2e:	2001      	movcc	r0, #1
 8000f30:	2000      	movcs	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmple>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffe0 	bl	8000f00 <__aeabi_cfcmpeq>
 8000f40:	bf94      	ite	ls
 8000f42:	2001      	movls	r0, #1
 8000f44:	2000      	movhi	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_fcmpge>:
 8000f4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f50:	f7ff ffd2 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f54:	bf94      	ite	ls
 8000f56:	2001      	movls	r0, #1
 8000f58:	2000      	movhi	r0, #0
 8000f5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f5e:	bf00      	nop

08000f60 <__aeabi_fcmpgt>:
 8000f60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f64:	f7ff ffc8 	bl	8000ef8 <__aeabi_cfrcmple>
 8000f68:	bf34      	ite	cc
 8000f6a:	2001      	movcc	r0, #1
 8000f6c:	2000      	movcs	r0, #0
 8000f6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f72:	bf00      	nop

08000f74 <__aeabi_fcmpun>:
 8000f74:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f80:	d102      	bne.n	8000f88 <__aeabi_fcmpun+0x14>
 8000f82:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f86:	d108      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f88:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000f8c:	d102      	bne.n	8000f94 <__aeabi_fcmpun+0x20>
 8000f8e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000f92:	d102      	bne.n	8000f9a <__aeabi_fcmpun+0x26>
 8000f94:	f04f 0000 	mov.w	r0, #0
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0001 	mov.w	r0, #1
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2iz>:
 8000fa0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30f      	bcc.n	8000fca <__aeabi_f2iz+0x2a>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d90d      	bls.n	8000fd0 <__aeabi_f2iz+0x30>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000fc0:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc4:	bf18      	it	ne
 8000fc6:	4240      	negne	r0, r0
 8000fc8:	4770      	bx	lr
 8000fca:	f04f 0000 	mov.w	r0, #0
 8000fce:	4770      	bx	lr
 8000fd0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fd4:	d101      	bne.n	8000fda <__aeabi_f2iz+0x3a>
 8000fd6:	0242      	lsls	r2, r0, #9
 8000fd8:	d105      	bne.n	8000fe6 <__aeabi_f2iz+0x46>
 8000fda:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000fde:	bf08      	it	eq
 8000fe0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000fe4:	4770      	bx	lr
 8000fe6:	f04f 0000 	mov.w	r0, #0
 8000fea:	4770      	bx	lr
 8000fec:	0000      	movs	r0, r0
	...

08000ff0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b09e      	sub	sp, #120	; 0x78
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ff6:	f001 fdff 	bl	8002bf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ffa:	f000 fb65 	bl	80016c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ffe:	f000 fd23 	bl	8001a48 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001002:	f000 fbd5 	bl	80017b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001006:	f000 fc27 	bl	8001858 <MX_TIM3_Init>
  MX_TIM4_Init();
 800100a:	f000 fc79 	bl	8001900 <MX_TIM4_Init>
  MX_I2C2_Init();
 800100e:	f000 fba1 	bl	8001754 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8001012:	f000 fcef 	bl	80019f4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //IMU
  HAL_Delay(100);
 8001016:	2064      	movs	r0, #100	; 0x64
 8001018:	f001 fe50 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 800101c:	2200      	movs	r2, #0
 800101e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001022:	48ad      	ldr	r0, [pc, #692]	; (80012d8 <main+0x2e8>)
 8001024:	f002 f917 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001028:	2064      	movs	r0, #100	; 0x64
 800102a:	f001 fe47 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 800102e:	2201      	movs	r2, #1
 8001030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001034:	48a8      	ldr	r0, [pc, #672]	; (80012d8 <main+0x2e8>)
 8001036:	f002 f90e 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800103a:	2064      	movs	r0, #100	; 0x64
 800103c:	f001 fe3e 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	48a4      	ldr	r0, [pc, #656]	; (80012d8 <main+0x2e8>)
 8001048:	f002 f905 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800104c:	2064      	movs	r0, #100	; 0x64
 800104e:	f001 fe35 	bl	8002cbc <HAL_Delay>

  Init_IMU();
 8001052:	f000 fec3 	bl	8001ddc <Init_IMU>
  HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f001 fe30 	bl	8002cbc <HAL_Delay>
  GyroCalibration gyroCal = calibrate_gyroZ(500);
 800105c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001060:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fa55 	bl	8002514 <calibrate_gyroZ>
  HAL_Delay(100);
 800106a:	2064      	movs	r0, #100	; 0x64
 800106c:	f001 fe26 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001076:	4898      	ldr	r0, [pc, #608]	; (80012d8 <main+0x2e8>)
 8001078:	f002 f8ed 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800107c:	2064      	movs	r0, #100	; 0x64
 800107e:	f001 fe1d 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 8001082:	2201      	movs	r2, #1
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	4893      	ldr	r0, [pc, #588]	; (80012d8 <main+0x2e8>)
 800108a:	f002 f8e4 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f001 fe14 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800109a:	488f      	ldr	r0, [pc, #572]	; (80012d8 <main+0x2e8>)
 800109c:	f002 f8db 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010a0:	2064      	movs	r0, #100	; 0x64
 80010a2:	f001 fe0b 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80010a6:	2201      	movs	r2, #1
 80010a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ac:	488a      	ldr	r0, [pc, #552]	; (80012d8 <main+0x2e8>)
 80010ae:	f002 f8d2 	bl	8003256 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80010b2:	2064      	movs	r0, #100	; 0x64
 80010b4:	f001 fe02 	bl	8002cbc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010be:	4886      	ldr	r0, [pc, #536]	; (80012d8 <main+0x2e8>)
 80010c0:	f002 f8c9 	bl	8003256 <HAL_GPIO_WritePin>

  magCal = calibrate_magnetometer(500);
 80010c4:	4c85      	ldr	r4, [pc, #532]	; (80012dc <main+0x2ec>)
 80010c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ca:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80010ce:	4618      	mov	r0, r3
 80010d0:	f001 f960 	bl	8002394 <calibrate_magnetometer>
 80010d4:	4625      	mov	r5, r4
 80010d6:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010e2:	e885 0003 	stmia.w	r5, {r0, r1}

  //Calcular Heading Inicial
  lecturasIMU = GetData__stMPU_9255();
 80010e6:	4c7e      	ldr	r4, [pc, #504]	; (80012e0 <main+0x2f0>)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 f820 	bl	8002130 <GetData__stMPU_9255>
 80010f0:	4625      	mov	r5, r4
 80010f2:	463c      	mov	r4, r7
 80010f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001100:	e885 0003 	stmia.w	r5, {r0, r1}
  float mx = (lecturasIMU.MagXData - magCal.offsetX) / magCal.scaleX;
 8001104:	4b76      	ldr	r3, [pc, #472]	; (80012e0 <main+0x2f0>)
 8001106:	69db      	ldr	r3, [r3, #28]
 8001108:	4a74      	ldr	r2, [pc, #464]	; (80012dc <main+0x2ec>)
 800110a:	6812      	ldr	r2, [r2, #0]
 800110c:	4611      	mov	r1, r2
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fc60 	bl	80009d4 <__aeabi_fsub>
 8001114:	4603      	mov	r3, r0
 8001116:	461a      	mov	r2, r3
 8001118:	4b70      	ldr	r3, [pc, #448]	; (80012dc <main+0x2ec>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f7ff fe16 	bl	8000d50 <__aeabi_fdiv>
 8001124:	4603      	mov	r3, r0
 8001126:	66bb      	str	r3, [r7, #104]	; 0x68
  float my = (lecturasIMU.MagYData - magCal.offsetY) / magCal.scaleY;
 8001128:	4b6d      	ldr	r3, [pc, #436]	; (80012e0 <main+0x2f0>)
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4a6b      	ldr	r2, [pc, #428]	; (80012dc <main+0x2ec>)
 800112e:	6852      	ldr	r2, [r2, #4]
 8001130:	4611      	mov	r1, r2
 8001132:	4618      	mov	r0, r3
 8001134:	f7ff fc4e 	bl	80009d4 <__aeabi_fsub>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b67      	ldr	r3, [pc, #412]	; (80012dc <main+0x2ec>)
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	4619      	mov	r1, r3
 8001142:	4610      	mov	r0, r2
 8001144:	f7ff fe04 	bl	8000d50 <__aeabi_fdiv>
 8001148:	4603      	mov	r3, r0
 800114a:	667b      	str	r3, [r7, #100]	; 0x64
  float norm = sqrtf(mx * mx + my * my);
 800114c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800114e:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001150:	f7ff fd4a 	bl	8000be8 <__aeabi_fmul>
 8001154:	4603      	mov	r3, r0
 8001156:	461c      	mov	r4, r3
 8001158:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800115a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800115c:	f7ff fd44 	bl	8000be8 <__aeabi_fmul>
 8001160:	4603      	mov	r3, r0
 8001162:	4619      	mov	r1, r3
 8001164:	4620      	mov	r0, r4
 8001166:	f7ff fc37 	bl	80009d8 <__addsf3>
 800116a:	4603      	mov	r3, r0
 800116c:	4618      	mov	r0, r3
 800116e:	f004 fcc9 	bl	8005b04 <sqrtf>
 8001172:	6638      	str	r0, [r7, #96]	; 0x60
  mx /= norm;
 8001174:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001176:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001178:	f7ff fdea 	bl	8000d50 <__aeabi_fdiv>
 800117c:	4603      	mov	r3, r0
 800117e:	66bb      	str	r3, [r7, #104]	; 0x68
  my /= norm;
 8001180:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001182:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001184:	f7ff fde4 	bl	8000d50 <__aeabi_fdiv>
 8001188:	4603      	mov	r3, r0
 800118a:	667b      	str	r3, [r7, #100]	; 0x64

  float heading_inicial = atan2f(my, mx) * (180.0f / M_PI);
 800118c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800118e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001190:	f004 fcb6 	bl	8005b00 <atan2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f93e 	bl	8000418 <__aeabi_f2d>
 800119c:	a34c      	add	r3, pc, #304	; (adr r3, 80012d0 <main+0x2e0>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f991 	bl	80004c8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fbbd 	bl	800092c <__aeabi_d2f>
 80011b2:	4603      	mov	r3, r0
 80011b4:	677b      	str	r3, [r7, #116]	; 0x74
  if (heading_inicial < 0) heading_inicial += 360.0f;
 80011b6:	f04f 0100 	mov.w	r1, #0
 80011ba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011bc:	f7ff feb2 	bl	8000f24 <__aeabi_fcmplt>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d005      	beq.n	80011d2 <main+0x1e2>
 80011c6:	4947      	ldr	r1, [pc, #284]	; (80012e4 <main+0x2f4>)
 80011c8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011ca:	f7ff fc05 	bl	80009d8 <__addsf3>
 80011ce:	4603      	mov	r3, r0
 80011d0:	677b      	str	r3, [r7, #116]	; 0x74

  // Objetivo: 90 grados más
  heading_target = heading_inicial + 90.0f;
 80011d2:	4945      	ldr	r1, [pc, #276]	; (80012e8 <main+0x2f8>)
 80011d4:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80011d6:	f7ff fbff 	bl	80009d8 <__addsf3>
 80011da:	4603      	mov	r3, r0
 80011dc:	461a      	mov	r2, r3
 80011de:	4b43      	ldr	r3, [pc, #268]	; (80012ec <main+0x2fc>)
 80011e0:	601a      	str	r2, [r3, #0]
  if (heading_target >= 360.0f) heading_target -= 360.0f;
 80011e2:	4b42      	ldr	r3, [pc, #264]	; (80012ec <main+0x2fc>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	493f      	ldr	r1, [pc, #252]	; (80012e4 <main+0x2f4>)
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff feaf 	bl	8000f4c <__aeabi_fcmpge>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <main+0x218>
 80011f4:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <main+0x2fc>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	493a      	ldr	r1, [pc, #232]	; (80012e4 <main+0x2f4>)
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fbea 	bl	80009d4 <__aeabi_fsub>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b39      	ldr	r3, [pc, #228]	; (80012ec <main+0x2fc>)
 8001206:	601a      	str	r2, [r3, #0]
  //fin imu

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001208:	213c      	movs	r1, #60	; 0x3c
 800120a:	4839      	ldr	r0, [pc, #228]	; (80012f0 <main+0x300>)
 800120c:	f003 ffd2 	bl	80051b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001210:	213c      	movs	r1, #60	; 0x3c
 8001212:	4838      	ldr	r0, [pc, #224]	; (80012f4 <main+0x304>)
 8001214:	f003 ffce 	bl	80051b4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001218:	2100      	movs	r1, #0
 800121a:	4837      	ldr	r0, [pc, #220]	; (80012f8 <main+0x308>)
 800121c:	f003 fe86 	bl	8004f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001220:	2104      	movs	r1, #4
 8001222:	4835      	ldr	r0, [pc, #212]	; (80012f8 <main+0x308>)
 8001224:	f003 fe82 	bl	8004f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001228:	2108      	movs	r1, #8
 800122a:	4833      	ldr	r0, [pc, #204]	; (80012f8 <main+0x308>)
 800122c:	f003 fe7e 	bl	8004f2c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001230:	210c      	movs	r1, #12
 8001232:	4831      	ldr	r0, [pc, #196]	; (80012f8 <main+0x308>)
 8001234:	f003 fe7a 	bl	8004f2c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <main+0x308>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2200      	movs	r2, #0
 800123e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8001240:	4b2d      	ldr	r3, [pc, #180]	; (80012f8 <main+0x308>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8001248:	4b2b      	ldr	r3, [pc, #172]	; (80012f8 <main+0x308>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2200      	movs	r2, #0
 800124e:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8001250:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <main+0x308>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	641a      	str	r2, [r3, #64]	; 0x40
  // Leer posición inicial
  enc1_ini = __HAL_TIM_GET_COUNTER(&htim2); // Encoder 1
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <main+0x300>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125e:	461a      	mov	r2, r3
 8001260:	4b26      	ldr	r3, [pc, #152]	; (80012fc <main+0x30c>)
 8001262:	601a      	str	r2, [r3, #0]
  enc2_ini = __HAL_TIM_GET_COUNTER(&htim3); // Encoder 2
 8001264:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <main+0x304>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	461a      	mov	r2, r3
 800126c:	4b24      	ldr	r3, [pc, #144]	; (8001300 <main+0x310>)
 800126e:	601a      	str	r2, [r3, #0]
  enc3_ini = encoder3_count; // Encoder 3 por interrupción
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <main+0x314>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a24      	ldr	r2, [pc, #144]	; (8001308 <main+0x318>)
 8001276:	6013      	str	r3, [r2, #0]
  enc4_ini = encoder4_count; // Encoder 4 por interrupción
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <main+0x31c>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a24      	ldr	r2, [pc, #144]	; (8001310 <main+0x320>)
 800127e:	6013      	str	r3, [r2, #0]

  objetivo1 = distancia_cm;  //Calcular pulsos
 8001280:	4b24      	ldr	r3, [pc, #144]	; (8001314 <main+0x324>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff fe8b 	bl	8000fa0 <__aeabi_f2iz>
 800128a:	4603      	mov	r3, r0
 800128c:	4a22      	ldr	r2, [pc, #136]	; (8001318 <main+0x328>)
 800128e:	6013      	str	r3, [r2, #0]
  objetivo2 = distancia_cm;
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <main+0x324>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fe83 	bl	8000fa0 <__aeabi_f2iz>
 800129a:	4603      	mov	r3, r0
 800129c:	4a1f      	ldr	r2, [pc, #124]	; (800131c <main+0x32c>)
 800129e:	6013      	str	r3, [r2, #0]
  objetivo3 = distancia_cm;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	; (8001314 <main+0x324>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fe7b 	bl	8000fa0 <__aeabi_f2iz>
 80012aa:	4603      	mov	r3, r0
 80012ac:	4a1c      	ldr	r2, [pc, #112]	; (8001320 <main+0x330>)
 80012ae:	6013      	str	r3, [r2, #0]
  objetivo4 = distancia_cm;
 80012b0:	4b18      	ldr	r3, [pc, #96]	; (8001314 <main+0x324>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4618      	mov	r0, r3
 80012b6:	f7ff fe73 	bl	8000fa0 <__aeabi_f2iz>
 80012ba:	4603      	mov	r3, r0
 80012bc:	4a19      	ldr	r2, [pc, #100]	; (8001324 <main+0x334>)
 80012be:	6013      	str	r3, [r2, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

enc1_ini = __HAL_TIM_GET_COUNTER(&htim2); // Usa TIM2 o el que te interese
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <main+0x300>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c6:	461a      	mov	r2, r3
 80012c8:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <main+0x30c>)
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e02c      	b.n	8001328 <main+0x338>
 80012ce:	bf00      	nop
 80012d0:	1a63c1f8 	.word	0x1a63c1f8
 80012d4:	404ca5dc 	.word	0x404ca5dc
 80012d8:	40011000 	.word	0x40011000
 80012dc:	20000200 	.word	0x20000200
 80012e0:	200000a8 	.word	0x200000a8
 80012e4:	43b40000 	.word	0x43b40000
 80012e8:	42b40000 	.word	0x42b40000
 80012ec:	20000004 	.word	0x20000004
 80012f0:	200002ac 	.word	0x200002ac
 80012f4:	20000218 	.word	0x20000218
 80012f8:	20000124 	.word	0x20000124
 80012fc:	200000e0 	.word	0x200000e0
 8001300:	200000e4 	.word	0x200000e4
 8001304:	2000011c 	.word	0x2000011c
 8001308:	200000e8 	.word	0x200000e8
 800130c:	20000120 	.word	0x20000120
 8001310:	200000ec 	.word	0x200000ec
 8001314:	2000000c 	.word	0x2000000c
 8001318:	20000100 	.word	0x20000100
 800131c:	20000104 	.word	0x20000104
 8001320:	20000108 	.word	0x20000108
 8001324:	2000010c 	.word	0x2000010c

while (1)
{
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8001328:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800132c:	4886      	ldr	r0, [pc, #536]	; (8001548 <main+0x558>)
 800132e:	f001 ffaa 	bl	8003286 <HAL_GPIO_TogglePin>
    lecturasIMU = ReadIMU_Average(10);  // ← 10 lecturas → dt = 0.1 s
 8001332:	4c86      	ldr	r4, [pc, #536]	; (800154c <main+0x55c>)
 8001334:	463b      	mov	r3, r7
 8001336:	210a      	movs	r1, #10
 8001338:	4618      	mov	r0, r3
 800133a:	f001 f945 	bl	80025c8 <ReadIMU_Average>
 800133e:	4625      	mov	r5, r4
 8001340:	463c      	mov	r4, r7
 8001342:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001344:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001346:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001348:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800134e:	e885 0003 	stmia.w	r5, {r0, r1}

    // GIROSCOPIO Y MAGNETÓMETRO
    float gz = (lecturasIMU.GyroZData - gyroCal.offsetZ) / gyroCal.scaleZ;
 8001352:	4b7e      	ldr	r3, [pc, #504]	; (800154c <main+0x55c>)
 8001354:	699b      	ldr	r3, [r3, #24]
 8001356:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fb3a 	bl	80009d4 <__aeabi_fsub>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001366:	4619      	mov	r1, r3
 8001368:	4610      	mov	r0, r2
 800136a:	f7ff fcf1 	bl	8000d50 <__aeabi_fdiv>
 800136e:	4603      	mov	r3, r0
 8001370:	65fb      	str	r3, [r7, #92]	; 0x5c
    gz *= 0.00763f; // Convierte a grados por segundo
 8001372:	4977      	ldr	r1, [pc, #476]	; (8001550 <main+0x560>)
 8001374:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001376:	f7ff fc37 	bl	8000be8 <__aeabi_fmul>
 800137a:	4603      	mov	r3, r0
 800137c:	65fb      	str	r3, [r7, #92]	; 0x5c

    float mx = (lecturasIMU.MagXData - magCal.offsetX) / magCal.scaleX;
 800137e:	4b73      	ldr	r3, [pc, #460]	; (800154c <main+0x55c>)
 8001380:	69db      	ldr	r3, [r3, #28]
 8001382:	4a74      	ldr	r2, [pc, #464]	; (8001554 <main+0x564>)
 8001384:	6812      	ldr	r2, [r2, #0]
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fb23 	bl	80009d4 <__aeabi_fsub>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	4b70      	ldr	r3, [pc, #448]	; (8001554 <main+0x564>)
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	4619      	mov	r1, r3
 8001398:	4610      	mov	r0, r2
 800139a:	f7ff fcd9 	bl	8000d50 <__aeabi_fdiv>
 800139e:	4603      	mov	r3, r0
 80013a0:	673b      	str	r3, [r7, #112]	; 0x70
    float my = (lecturasIMU.MagYData - magCal.offsetY) / magCal.scaleY;
 80013a2:	4b6a      	ldr	r3, [pc, #424]	; (800154c <main+0x55c>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a6b      	ldr	r2, [pc, #428]	; (8001554 <main+0x564>)
 80013a8:	6852      	ldr	r2, [r2, #4]
 80013aa:	4611      	mov	r1, r2
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff fb11 	bl	80009d4 <__aeabi_fsub>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b67      	ldr	r3, [pc, #412]	; (8001554 <main+0x564>)
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fcc7 	bl	8000d50 <__aeabi_fdiv>
 80013c2:	4603      	mov	r3, r0
 80013c4:	66fb      	str	r3, [r7, #108]	; 0x6c
    float mz = (lecturasIMU.MagZData - magCal.offsetZ) / magCal.scaleZ;
 80013c6:	4b61      	ldr	r3, [pc, #388]	; (800154c <main+0x55c>)
 80013c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ca:	4a62      	ldr	r2, [pc, #392]	; (8001554 <main+0x564>)
 80013cc:	6892      	ldr	r2, [r2, #8]
 80013ce:	4611      	mov	r1, r2
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff faff 	bl	80009d4 <__aeabi_fsub>
 80013d6:	4603      	mov	r3, r0
 80013d8:	461a      	mov	r2, r3
 80013da:	4b5e      	ldr	r3, [pc, #376]	; (8001554 <main+0x564>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	4619      	mov	r1, r3
 80013e0:	4610      	mov	r0, r2
 80013e2:	f7ff fcb5 	bl	8000d50 <__aeabi_fdiv>
 80013e6:	4603      	mov	r3, r0
 80013e8:	65bb      	str	r3, [r7, #88]	; 0x58

    float norm = sqrtf(mx * mx + my * my + mz * mz);
 80013ea:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80013ec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80013ee:	f7ff fbfb 	bl	8000be8 <__aeabi_fmul>
 80013f2:	4603      	mov	r3, r0
 80013f4:	461c      	mov	r4, r3
 80013f6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80013f8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80013fa:	f7ff fbf5 	bl	8000be8 <__aeabi_fmul>
 80013fe:	4603      	mov	r3, r0
 8001400:	4619      	mov	r1, r3
 8001402:	4620      	mov	r0, r4
 8001404:	f7ff fae8 	bl	80009d8 <__addsf3>
 8001408:	4603      	mov	r3, r0
 800140a:	461c      	mov	r4, r3
 800140c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800140e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001410:	f7ff fbea 	bl	8000be8 <__aeabi_fmul>
 8001414:	4603      	mov	r3, r0
 8001416:	4619      	mov	r1, r3
 8001418:	4620      	mov	r0, r4
 800141a:	f7ff fadd 	bl	80009d8 <__addsf3>
 800141e:	4603      	mov	r3, r0
 8001420:	4618      	mov	r0, r3
 8001422:	f004 fb6f 	bl	8005b04 <sqrtf>
 8001426:	6578      	str	r0, [r7, #84]	; 0x54
    if (norm != 0.0f) {
 8001428:	f04f 0100 	mov.w	r1, #0
 800142c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800142e:	f7ff fd6f 	bl	8000f10 <__aeabi_fcmpeq>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d111      	bne.n	800145c <main+0x46c>
        mx /= norm;
 8001438:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800143a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800143c:	f7ff fc88 	bl	8000d50 <__aeabi_fdiv>
 8001440:	4603      	mov	r3, r0
 8001442:	673b      	str	r3, [r7, #112]	; 0x70
        my /= norm;
 8001444:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001446:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001448:	f7ff fc82 	bl	8000d50 <__aeabi_fdiv>
 800144c:	4603      	mov	r3, r0
 800144e:	66fb      	str	r3, [r7, #108]	; 0x6c
        mz /= norm;
 8001450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001452:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001454:	f7ff fc7c 	bl	8000d50 <__aeabi_fdiv>
 8001458:	4603      	mov	r3, r0
 800145a:	65bb      	str	r3, [r7, #88]	; 0x58
    }

    // Cálculo de heading solo informativo (ya no se usa para el giro)
    heading = atan2f(my, mx) * (180.0f / M_PI);
 800145c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800145e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001460:	f004 fb4e 	bl	8005b00 <atan2f>
 8001464:	4603      	mov	r3, r0
 8001466:	4618      	mov	r0, r3
 8001468:	f7fe ffd6 	bl	8000418 <__aeabi_f2d>
 800146c:	a334      	add	r3, pc, #208	; (adr r3, 8001540 <main+0x550>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f829 	bl	80004c8 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff fa55 	bl	800092c <__aeabi_d2f>
 8001482:	4603      	mov	r3, r0
 8001484:	4a34      	ldr	r2, [pc, #208]	; (8001558 <main+0x568>)
 8001486:	6013      	str	r3, [r2, #0]
    if (heading < 0) heading += 360.0f;
 8001488:	4b33      	ldr	r3, [pc, #204]	; (8001558 <main+0x568>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f04f 0100 	mov.w	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fd47 	bl	8000f24 <__aeabi_fcmplt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d009      	beq.n	80014b0 <main+0x4c0>
 800149c:	4b2e      	ldr	r3, [pc, #184]	; (8001558 <main+0x568>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	492e      	ldr	r1, [pc, #184]	; (800155c <main+0x56c>)
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff fa98 	bl	80009d8 <__addsf3>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <main+0x568>)
 80014ae:	601a      	str	r2, [r3, #0]

    actualizarAvances();
 80014b0:	f000 fb5e 	bl	8001b70 <actualizarAvances>
    float promedio_cm = calcularPromedioTrasero();
 80014b4:	f000 fc24 	bl	8001d00 <calcularPromedioTrasero>
 80014b8:	6538      	str	r0, [r7, #80]	; 0x50

    if (!en_giro) {
 80014ba:	4b29      	ldr	r3, [pc, #164]	; (8001560 <main+0x570>)
 80014bc:	781b      	ldrb	r3, [r3, #0]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d15c      	bne.n	800157c <main+0x58c>
        if (promedio_cm < distancia_cm) {
 80014c2:	4b28      	ldr	r3, [pc, #160]	; (8001564 <main+0x574>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4619      	mov	r1, r3
 80014c8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80014ca:	f7ff fd2b 	bl	8000f24 <__aeabi_fcmplt>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <main+0x4f0>
            moverMotores(pwmValue);
 80014d4:	4b24      	ldr	r3, [pc, #144]	; (8001568 <main+0x578>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f000 fc29 	bl	8001d30 <moverMotores>
 80014de:	e0cc      	b.n	800167a <main+0x68a>
        } else {
            detenerMotores();
 80014e0:	f000 fc64 	bl	8001dac <detenerMotores>
            en_giro = 1;
 80014e4:	4b1e      	ldr	r3, [pc, #120]	; (8001560 <main+0x570>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
            // Fijar dirección de giro manualmente por paso
            if (paso_actual == 0 || paso_actual == 1 || paso_actual == 2 || paso_actual == 3) {
 80014ea:	4b20      	ldr	r3, [pc, #128]	; (800156c <main+0x57c>)
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <main+0x51a>
 80014f2:	4b1e      	ldr	r3, [pc, #120]	; (800156c <main+0x57c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d007      	beq.n	800150a <main+0x51a>
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <main+0x57c>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d003      	beq.n	800150a <main+0x51a>
 8001502:	4b1a      	ldr	r3, [pc, #104]	; (800156c <main+0x57c>)
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d103      	bne.n	8001512 <main+0x522>
                sentido_giro = 1; // izquierda
 800150a:	4b19      	ldr	r3, [pc, #100]	; (8001570 <main+0x580>)
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
 8001510:	e002      	b.n	8001518 <main+0x528>
            } else {
                sentido_giro = -1; // derecha si algún día quisieras probar
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <main+0x580>)
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	701a      	strb	r2, [r3, #0]
            }

            // Reiniciar ángulo
            angulo_giro_actual = 0.0f;
 8001518:	4b16      	ldr	r3, [pc, #88]	; (8001574 <main+0x584>)
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
            tiempo_inicio_giro = HAL_GetTick();
 8001520:	f001 fbc2 	bl	8002ca8 <HAL_GetTick>
 8001524:	4603      	mov	r3, r0
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <main+0x588>)
 8001528:	6013      	str	r3, [r2, #0]


            // Reiniciar integración del giro
            angulo_giro_actual = 0.0f;
 800152a:	4b12      	ldr	r3, [pc, #72]	; (8001574 <main+0x584>)
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

            tiempo_inicio_giro = HAL_GetTick();
 8001532:	f001 fbb9 	bl	8002ca8 <HAL_GetTick>
 8001536:	4603      	mov	r3, r0
 8001538:	4a0f      	ldr	r2, [pc, #60]	; (8001578 <main+0x588>)
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	e09d      	b.n	800167a <main+0x68a>
 800153e:	bf00      	nop
 8001540:	1a63c1f8 	.word	0x1a63c1f8
 8001544:	404ca5dc 	.word	0x404ca5dc
 8001548:	40011000 	.word	0x40011000
 800154c:	200000a8 	.word	0x200000a8
 8001550:	3bfa0514 	.word	0x3bfa0514
 8001554:	20000200 	.word	0x20000200
 8001558:	200000d4 	.word	0x200000d4
 800155c:	43b40000 	.word	0x43b40000
 8001560:	20000111 	.word	0x20000111
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000008 	.word	0x20000008
 800156c:	20000110 	.word	0x20000110
 8001570:	20000018 	.word	0x20000018
 8001574:	20000118 	.word	0x20000118
 8001578:	20000114 	.word	0x20000114
        }
    } else {
        // 1. Integrar ángulo girado con giroscopio
        angulo_giro_actual += gz * dt;
 800157c:	4b41      	ldr	r3, [pc, #260]	; (8001684 <main+0x694>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fb30 	bl	8000be8 <__aeabi_fmul>
 8001588:	4603      	mov	r3, r0
 800158a:	461a      	mov	r2, r3
 800158c:	4b3e      	ldr	r3, [pc, #248]	; (8001688 <main+0x698>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	4610      	mov	r0, r2
 8001594:	f7ff fa20 	bl	80009d8 <__addsf3>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b3a      	ldr	r3, [pc, #232]	; (8001688 <main+0x698>)
 800159e:	601a      	str	r2, [r3, #0]

        // 2. Calcular cuánto falta para completar los 90°
        float error_giro = angulo_objetivo_giro - fabs(angulo_giro_actual);
 80015a0:	4b3a      	ldr	r3, [pc, #232]	; (800168c <main+0x69c>)
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	4b38      	ldr	r3, [pc, #224]	; (8001688 <main+0x698>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015ac:	4619      	mov	r1, r3
 80015ae:	4610      	mov	r0, r2
 80015b0:	f7ff fa10 	bl	80009d4 <__aeabi_fsub>
 80015b4:	4603      	mov	r3, r0
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c

        if (fabs(error_giro) > 3.0f) {
 80015b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80015ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015be:	4934      	ldr	r1, [pc, #208]	; (8001690 <main+0x6a0>)
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fccd 	bl	8000f60 <__aeabi_fcmpgt>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d02a      	beq.n	8001622 <main+0x632>
            // Gira en el sentido adecuado
        	if (sentido_giro == 1) {
 80015cc:	4b31      	ldr	r3, [pc, #196]	; (8001694 <main+0x6a4>)
 80015ce:	f993 3000 	ldrsb.w	r3, [r3]
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d112      	bne.n	80015fc <main+0x60c>
        	    // Gira izquierda
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwmValue);
 80015d6:	4b30      	ldr	r3, [pc, #192]	; (8001698 <main+0x6a8>)
 80015d8:	781a      	ldrb	r2, [r3, #0]
 80015da:	4b30      	ldr	r3, [pc, #192]	; (800169c <main+0x6ac>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 80015e0:	4b2e      	ldr	r3, [pc, #184]	; (800169c <main+0x6ac>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2200      	movs	r2, #0
 80015e6:	639a      	str	r2, [r3, #56]	; 0x38
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwmValue);
 80015e8:	4b2b      	ldr	r3, [pc, #172]	; (8001698 <main+0x6a8>)
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4b2b      	ldr	r3, [pc, #172]	; (800169c <main+0x6ac>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	63da      	str	r2, [r3, #60]	; 0x3c
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 80015f2:	4b2a      	ldr	r3, [pc, #168]	; (800169c <main+0x6ac>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	2200      	movs	r2, #0
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
 80015fa:	e03e      	b.n	800167a <main+0x68a>
        	} else {
        	    // Gira derecha
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 80015fc:	4b27      	ldr	r3, [pc, #156]	; (800169c <main+0x6ac>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	635a      	str	r2, [r3, #52]	; 0x34
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwmValue);
 8001604:	4b24      	ldr	r3, [pc, #144]	; (8001698 <main+0x6a8>)
 8001606:	781a      	ldrb	r2, [r3, #0]
 8001608:	4b24      	ldr	r3, [pc, #144]	; (800169c <main+0x6ac>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 800160e:	4b23      	ldr	r3, [pc, #140]	; (800169c <main+0x6ac>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2200      	movs	r2, #0
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c
        	    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwmValue);
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <main+0x6a8>)
 8001618:	781a      	ldrb	r2, [r3, #0]
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <main+0x6ac>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
 8001620:	e02b      	b.n	800167a <main+0x68a>
        	}

        } else {
            // Giro completado
            detenerMotores();
 8001622:	f000 fbc3 	bl	8001dac <detenerMotores>

            // Esperar 10 segundos
            if (HAL_GetTick() - tiempo_inicio_giro >= 10000) {
 8001626:	f001 fb3f 	bl	8002ca8 <HAL_GetTick>
 800162a:	4602      	mov	r2, r0
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <main+0x6b0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	f242 720f 	movw	r2, #9999	; 0x270f
 8001636:	4293      	cmp	r3, r2
 8001638:	d91f      	bls.n	800167a <main+0x68a>
                paso_actual++;
 800163a:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <main+0x6b4>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	b2da      	uxtb	r2, r3
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <main+0x6b4>)
 8001644:	701a      	strb	r2, [r3, #0]
                if (paso_actual >= total_pasos) {
 8001646:	4b17      	ldr	r3, [pc, #92]	; (80016a4 <main+0x6b4>)
 8001648:	781a      	ldrb	r2, [r3, #0]
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <main+0x6b8>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d300      	bcc.n	8001654 <main+0x664>
                    // Terminó el cuadrado
                    while (1); // Se queda detenido
 8001652:	e7fe      	b.n	8001652 <main+0x662>
                }

                // Reiniciar variables de avance
                enc3_ini = encoder3_count;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <main+0x6bc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <main+0x6c0>)
 800165a:	6013      	str	r3, [r2, #0]
                enc4_ini = encoder4_count;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <main+0x6c4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a15      	ldr	r2, [pc, #84]	; (80016b8 <main+0x6c8>)
 8001662:	6013      	str	r3, [r2, #0]
                avance3 = 0;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <main+0x6cc>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
                avance4 = 0;
 800166c:	4b14      	ldr	r3, [pc, #80]	; (80016c0 <main+0x6d0>)
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
                en_giro = 0;
 8001674:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <main+0x6d4>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    HAL_Delay(10); // para mantener tiempo de ciclo estable
 800167a:	200a      	movs	r0, #10
 800167c:	f001 fb1e 	bl	8002cbc <HAL_Delay>
{
 8001680:	e652      	b.n	8001328 <main+0x338>
 8001682:	bf00      	nop
 8001684:	20000000 	.word	0x20000000
 8001688:	20000118 	.word	0x20000118
 800168c:	20000014 	.word	0x20000014
 8001690:	40400000 	.word	0x40400000
 8001694:	20000018 	.word	0x20000018
 8001698:	20000008 	.word	0x20000008
 800169c:	20000124 	.word	0x20000124
 80016a0:	20000114 	.word	0x20000114
 80016a4:	20000110 	.word	0x20000110
 80016a8:	20000010 	.word	0x20000010
 80016ac:	2000011c 	.word	0x2000011c
 80016b0:	200000e8 	.word	0x200000e8
 80016b4:	20000120 	.word	0x20000120
 80016b8:	200000ec 	.word	0x200000ec
 80016bc:	200000f8 	.word	0x200000f8
 80016c0:	200000fc 	.word	0x200000fc
 80016c4:	20000111 	.word	0x20000111

080016c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b090      	sub	sp, #64	; 0x40
 80016cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016ce:	f107 0318 	add.w	r3, r7, #24
 80016d2:	2228      	movs	r2, #40	; 0x28
 80016d4:	2100      	movs	r1, #0
 80016d6:	4618      	mov	r0, r3
 80016d8:	f004 fc48 	bl	8005f6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f8:	2301      	movs	r3, #1
 80016fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fc:	2302      	movs	r3, #2
 80016fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001700:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001706:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4618      	mov	r0, r3
 8001712:	f002 ffad 	bl	8004670 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800171c:	f001 f842 	bl	80027a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fa18 	bl	8004b70 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001746:	f001 f82d 	bl	80027a4 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3740      	adds	r7, #64	; 0x40
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001758:	4b12      	ldr	r3, [pc, #72]	; (80017a4 <MX_I2C2_Init+0x50>)
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <MX_I2C2_Init+0x54>)
 800175c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800175e:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <MX_I2C2_Init+0x50>)
 8001760:	4a12      	ldr	r2, [pc, #72]	; (80017ac <MX_I2C2_Init+0x58>)
 8001762:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <MX_I2C2_Init+0x50>)
 8001766:	2200      	movs	r2, #0
 8001768:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <MX_I2C2_Init+0x50>)
 800176c:	2200      	movs	r2, #0
 800176e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <MX_I2C2_Init+0x50>)
 8001772:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001776:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <MX_I2C2_Init+0x50>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <MX_I2C2_Init+0x50>)
 8001780:	2200      	movs	r2, #0
 8001782:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <MX_I2C2_Init+0x50>)
 8001786:	2200      	movs	r2, #0
 8001788:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <MX_I2C2_Init+0x50>)
 800178c:	2200      	movs	r2, #0
 800178e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001790:	4804      	ldr	r0, [pc, #16]	; (80017a4 <MX_I2C2_Init+0x50>)
 8001792:	f001 fda9 	bl	80032e8 <HAL_I2C_Init>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800179c:	f001 f802 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017a0:	bf00      	nop
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	2000016c 	.word	0x2000016c
 80017a8:	40005800 	.word	0x40005800
 80017ac:	000186a0 	.word	0x000186a0

080017b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80017b6:	f107 030c 	add.w	r3, r7, #12
 80017ba:	2224      	movs	r2, #36	; 0x24
 80017bc:	2100      	movs	r1, #0
 80017be:	4618      	mov	r0, r3
 80017c0:	f004 fbd4 	bl	8005f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017cc:	4b21      	ldr	r3, [pc, #132]	; (8001854 <MX_TIM2_Init+0xa4>)
 80017ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80017d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80017d4:	4b1f      	ldr	r3, [pc, #124]	; (8001854 <MX_TIM2_Init+0xa4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_TIM2_Init+0xa4>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80017e0:	4b1c      	ldr	r3, [pc, #112]	; (8001854 <MX_TIM2_Init+0xa4>)
 80017e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e8:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_TIM2_Init+0xa4>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <MX_TIM2_Init+0xa4>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80017f4:	2303      	movs	r3, #3
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80017fc:	2301      	movs	r3, #1
 80017fe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001800:	2300      	movs	r3, #0
 8001802:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800180c:	2301      	movs	r3, #1
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001818:	f107 030c 	add.w	r3, r7, #12
 800181c:	4619      	mov	r1, r3
 800181e:	480d      	ldr	r0, [pc, #52]	; (8001854 <MX_TIM2_Init+0xa4>)
 8001820:	f003 fc26 	bl	8005070 <HAL_TIM_Encoder_Init>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800182a:	f000 ffbb 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001836:	1d3b      	adds	r3, r7, #4
 8001838:	4619      	mov	r1, r3
 800183a:	4806      	ldr	r0, [pc, #24]	; (8001854 <MX_TIM2_Init+0xa4>)
 800183c:	f004 f824 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001846:	f000 ffad 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	3730      	adds	r7, #48	; 0x30
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	200002ac 	.word	0x200002ac

08001858 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08c      	sub	sp, #48	; 0x30
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	2224      	movs	r2, #36	; 0x24
 8001864:	2100      	movs	r1, #0
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fb80 	bl	8005f6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800186c:	1d3b      	adds	r3, r7, #4
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001874:	4b20      	ldr	r3, [pc, #128]	; (80018f8 <MX_TIM3_Init+0xa0>)
 8001876:	4a21      	ldr	r2, [pc, #132]	; (80018fc <MX_TIM3_Init+0xa4>)
 8001878:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <MX_TIM3_Init+0xa0>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_TIM3_Init+0xa0>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001886:	4b1c      	ldr	r3, [pc, #112]	; (80018f8 <MX_TIM3_Init+0xa0>)
 8001888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800188c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_TIM3_Init+0xa0>)
 8001890:	2200      	movs	r2, #0
 8001892:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_TIM3_Init+0xa0>)
 8001896:	2200      	movs	r2, #0
 8001898:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800189a:	2303      	movs	r3, #3
 800189c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018a2:	2301      	movs	r3, #1
 80018a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80018ae:	2300      	movs	r3, #0
 80018b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018b2:	2301      	movs	r3, #1
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018b6:	2300      	movs	r3, #0
 80018b8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80018be:	f107 030c 	add.w	r3, r7, #12
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_TIM3_Init+0xa0>)
 80018c6:	f003 fbd3 	bl	8005070 <HAL_TIM_Encoder_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80018d0:	f000 ff68 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018dc:	1d3b      	adds	r3, r7, #4
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM3_Init+0xa0>)
 80018e2:	f003 ffd1 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80018ec:	f000 ff5a 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3730      	adds	r7, #48	; 0x30
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000218 	.word	0x20000218
 80018fc:	40000400 	.word	0x40000400

08001900 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08a      	sub	sp, #40	; 0x28
 8001904:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001906:	f107 0320 	add.w	r3, r7, #32
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001910:	1d3b      	adds	r3, r7, #4
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]
 8001918:	609a      	str	r2, [r3, #8]
 800191a:	60da      	str	r2, [r3, #12]
 800191c:	611a      	str	r2, [r3, #16]
 800191e:	615a      	str	r2, [r3, #20]
 8001920:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001922:	4b32      	ldr	r3, [pc, #200]	; (80019ec <MX_TIM4_Init+0xec>)
 8001924:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <MX_TIM4_Init+0xf0>)
 8001926:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8001928:	4b30      	ldr	r3, [pc, #192]	; (80019ec <MX_TIM4_Init+0xec>)
 800192a:	2247      	movs	r2, #71	; 0x47
 800192c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800192e:	4b2f      	ldr	r3, [pc, #188]	; (80019ec <MX_TIM4_Init+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <MX_TIM4_Init+0xec>)
 8001936:	2263      	movs	r2, #99	; 0x63
 8001938:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193a:	4b2c      	ldr	r3, [pc, #176]	; (80019ec <MX_TIM4_Init+0xec>)
 800193c:	2200      	movs	r2, #0
 800193e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001940:	4b2a      	ldr	r3, [pc, #168]	; (80019ec <MX_TIM4_Init+0xec>)
 8001942:	2200      	movs	r2, #0
 8001944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001946:	4829      	ldr	r0, [pc, #164]	; (80019ec <MX_TIM4_Init+0xec>)
 8001948:	f003 faa0 	bl	8004e8c <HAL_TIM_PWM_Init>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001952:	f000 ff27 	bl	80027a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001956:	2300      	movs	r3, #0
 8001958:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800195e:	f107 0320 	add.w	r3, r7, #32
 8001962:	4619      	mov	r1, r3
 8001964:	4821      	ldr	r0, [pc, #132]	; (80019ec <MX_TIM4_Init+0xec>)
 8001966:	f003 ff8f 	bl	8005888 <HAL_TIMEx_MasterConfigSynchronization>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001970:	f000 ff18 	bl	80027a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001974:	2360      	movs	r3, #96	; 0x60
 8001976:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001978:	2300      	movs	r3, #0
 800197a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800197c:	2300      	movs	r3, #0
 800197e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001980:	2300      	movs	r3, #0
 8001982:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2200      	movs	r2, #0
 8001988:	4619      	mov	r1, r3
 800198a:	4818      	ldr	r0, [pc, #96]	; (80019ec <MX_TIM4_Init+0xec>)
 800198c:	f003 fca0 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001996:	f000 ff05 	bl	80027a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2204      	movs	r2, #4
 800199e:	4619      	mov	r1, r3
 80019a0:	4812      	ldr	r0, [pc, #72]	; (80019ec <MX_TIM4_Init+0xec>)
 80019a2:	f003 fc95 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019ac:	f000 fefa 	bl	80027a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	2208      	movs	r2, #8
 80019b4:	4619      	mov	r1, r3
 80019b6:	480d      	ldr	r0, [pc, #52]	; (80019ec <MX_TIM4_Init+0xec>)
 80019b8:	f003 fc8a 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 80019c2:	f000 feef 	bl	80027a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019c6:	1d3b      	adds	r3, r7, #4
 80019c8:	220c      	movs	r2, #12
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <MX_TIM4_Init+0xec>)
 80019ce:	f003 fc7f 	bl	80052d0 <HAL_TIM_PWM_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 80019d8:	f000 fee4 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <MX_TIM4_Init+0xec>)
 80019de:	f000 ffdf 	bl	80029a0 <HAL_TIM_MspPostInit>

}
 80019e2:	bf00      	nop
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000124 	.word	0x20000124
 80019f0:	40000800 	.word	0x40000800

080019f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <MX_USART1_UART_Init+0x50>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_USART1_UART_Init+0x4c>)
 8001a2c:	f003 ff8a 	bl	8005944 <HAL_UART_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001a36:	f000 feb5 	bl	80027a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000264 	.word	0x20000264
 8001a44:	40013800 	.word	0x40013800

08001a48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b088      	sub	sp, #32
 8001a4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4e:	f107 0310 	add.w	r3, r7, #16
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
 8001a56:	605a      	str	r2, [r3, #4]
 8001a58:	609a      	str	r2, [r3, #8]
 8001a5a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5c:	4b3f      	ldr	r3, [pc, #252]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	4a3e      	ldr	r2, [pc, #248]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a62:	f043 0310 	orr.w	r3, r3, #16
 8001a66:	6193      	str	r3, [r2, #24]
 8001a68:	4b3c      	ldr	r3, [pc, #240]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a74:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	4a38      	ldr	r2, [pc, #224]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a7a:	f043 0320 	orr.w	r3, r3, #32
 8001a7e:	6193      	str	r3, [r2, #24]
 8001a80:	4b36      	ldr	r3, [pc, #216]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a82:	699b      	ldr	r3, [r3, #24]
 8001a84:	f003 0320 	and.w	r3, r3, #32
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a8c:	4b33      	ldr	r3, [pc, #204]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a8e:	699b      	ldr	r3, [r3, #24]
 8001a90:	4a32      	ldr	r2, [pc, #200]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a92:	f043 0304 	orr.w	r3, r3, #4
 8001a96:	6193      	str	r3, [r2, #24]
 8001a98:	4b30      	ldr	r3, [pc, #192]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa4:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	4a2c      	ldr	r2, [pc, #176]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001aaa:	f043 0308 	orr.w	r3, r3, #8
 8001aae:	6193      	str	r3, [r2, #24]
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <MX_GPIO_Init+0x114>)
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001abc:	2200      	movs	r2, #0
 8001abe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ac2:	4827      	ldr	r0, [pc, #156]	; (8001b60 <MX_GPIO_Init+0x118>)
 8001ac4:	f001 fbc7 	bl	8003256 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ac8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ada:	f107 0310 	add.w	r3, r7, #16
 8001ade:	4619      	mov	r1, r3
 8001ae0:	481f      	ldr	r0, [pc, #124]	; (8001b60 <MX_GPIO_Init+0x118>)
 8001ae2:	f001 fa1d 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aea:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_GPIO_Init+0x11c>)
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	481b      	ldr	r0, [pc, #108]	; (8001b68 <MX_GPIO_Init+0x120>)
 8001afa:	f001 fa11 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001afe:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001b02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_GPIO_Init+0x11c>)
 8001b06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 0310 	add.w	r3, r7, #16
 8001b10:	4619      	mov	r1, r3
 8001b12:	4816      	ldr	r0, [pc, #88]	; (8001b6c <MX_GPIO_Init+0x124>)
 8001b14:	f001 fa04 	bl	8002f20 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001b18:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8001b1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480f      	ldr	r0, [pc, #60]	; (8001b6c <MX_GPIO_Init+0x124>)
 8001b2e:	f001 f9f7 	bl	8002f20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	2008      	movs	r0, #8
 8001b38:	f001 f9bb 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001b3c:	2008      	movs	r0, #8
 8001b3e:	f001 f9d4 	bl	8002eea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001b42:	2200      	movs	r2, #0
 8001b44:	2100      	movs	r1, #0
 8001b46:	2028      	movs	r0, #40	; 0x28
 8001b48:	f001 f9b3 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b4c:	2028      	movs	r0, #40	; 0x28
 8001b4e:	f001 f9cc 	bl	8002eea <HAL_NVIC_EnableIRQ>

}
 8001b52:	bf00      	nop
 8001b54:	3720      	adds	r7, #32
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	40011000 	.word	0x40011000
 8001b64:	10110000 	.word	0x10110000
 8001b68:	40010800 	.word	0x40010800
 8001b6c:	40010c00 	.word	0x40010c00

08001b70 <actualizarAvances>:

/* USER CODE BEGIN 4 */
void actualizarAvances(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
    enc1 = __HAL_TIM_GET_COUNTER(&htim2);
 8001b74:	4b50      	ldr	r3, [pc, #320]	; (8001cb8 <actualizarAvances+0x148>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4b4f      	ldr	r3, [pc, #316]	; (8001cbc <actualizarAvances+0x14c>)
 8001b7e:	601a      	str	r2, [r3, #0]
    enc2 = __HAL_TIM_GET_COUNTER(&htim3);
 8001b80:	4b4f      	ldr	r3, [pc, #316]	; (8001cc0 <actualizarAvances+0x150>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b4e      	ldr	r3, [pc, #312]	; (8001cc4 <actualizarAvances+0x154>)
 8001b8a:	601a      	str	r2, [r3, #0]

    avance1 = (float)(abs(enc1 - enc1_ini)) / PULSOS_POR_VUELTA_ENC1 * CIRCUNFERENCIA_LLANTA_CM;
 8001b8c:	4b4b      	ldr	r3, [pc, #300]	; (8001cbc <actualizarAvances+0x14c>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b4d      	ldr	r3, [pc, #308]	; (8001cc8 <actualizarAvances+0x158>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	bfb8      	it	lt
 8001b9a:	425b      	neglt	r3, r3
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7fe ffcf 	bl	8000b40 <__aeabi_i2f>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7fe fc37 	bl	8000418 <__aeabi_f2d>
 8001baa:	a33f      	add	r3, pc, #252	; (adr r3, 8001ca8 <actualizarAvances+0x138>)
 8001bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb0:	f7fe fdb4 	bl	800071c <__aeabi_ddiv>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	4610      	mov	r0, r2
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 0200 	mov.w	r2, #0
 8001bc0:	4b42      	ldr	r3, [pc, #264]	; (8001ccc <actualizarAvances+0x15c>)
 8001bc2:	f7fe fc81 	bl	80004c8 <__aeabi_dmul>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4610      	mov	r0, r2
 8001bcc:	4619      	mov	r1, r3
 8001bce:	f7fe fead 	bl	800092c <__aeabi_d2f>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4a3e      	ldr	r2, [pc, #248]	; (8001cd0 <actualizarAvances+0x160>)
 8001bd6:	6013      	str	r3, [r2, #0]
    avance2 = (float)(abs(enc2 - enc2_ini)) / PULSOS_POR_VUELTA_ENC2 * CIRCUNFERENCIA_LLANTA_CM;
 8001bd8:	4b3a      	ldr	r3, [pc, #232]	; (8001cc4 <actualizarAvances+0x154>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b3d      	ldr	r3, [pc, #244]	; (8001cd4 <actualizarAvances+0x164>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	bfb8      	it	lt
 8001be6:	425b      	neglt	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7fe ffa9 	bl	8000b40 <__aeabi_i2f>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4939      	ldr	r1, [pc, #228]	; (8001cd8 <actualizarAvances+0x168>)
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f8ac 	bl	8000d50 <__aeabi_fdiv>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	4938      	ldr	r1, [pc, #224]	; (8001cdc <actualizarAvances+0x16c>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fff3 	bl	8000be8 <__aeabi_fmul>
 8001c02:	4603      	mov	r3, r0
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b36      	ldr	r3, [pc, #216]	; (8001ce0 <actualizarAvances+0x170>)
 8001c08:	601a      	str	r2, [r3, #0]
    avance3 = (float)(abs(encoder3_count - enc3_ini)) / PULSOS_POR_VUELTA_ENC3 * CIRCUNFERENCIA_LLANTA_CM;
 8001c0a:	4b36      	ldr	r3, [pc, #216]	; (8001ce4 <actualizarAvances+0x174>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	4b36      	ldr	r3, [pc, #216]	; (8001ce8 <actualizarAvances+0x178>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	bfb8      	it	lt
 8001c18:	425b      	neglt	r3, r3
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe ff90 	bl	8000b40 <__aeabi_i2f>
 8001c20:	4603      	mov	r3, r0
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7fe fbf8 	bl	8000418 <__aeabi_f2d>
 8001c28:	a321      	add	r3, pc, #132	; (adr r3, 8001cb0 <actualizarAvances+0x140>)
 8001c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2e:	f7fe fd75 	bl	800071c <__aeabi_ddiv>
 8001c32:	4602      	mov	r2, r0
 8001c34:	460b      	mov	r3, r1
 8001c36:	4610      	mov	r0, r2
 8001c38:	4619      	mov	r1, r3
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b23      	ldr	r3, [pc, #140]	; (8001ccc <actualizarAvances+0x15c>)
 8001c40:	f7fe fc42 	bl	80004c8 <__aeabi_dmul>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe fe6e 	bl	800092c <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a26      	ldr	r2, [pc, #152]	; (8001cec <actualizarAvances+0x17c>)
 8001c54:	6013      	str	r3, [r2, #0]
    avance4 = (float)(abs(encoder4_count - enc4_ini)) / PULSOS_POR_VUELTA_ENC4 * CIRCUNFERENCIA_LLANTA_CM;
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <actualizarAvances+0x180>)
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	4b26      	ldr	r3, [pc, #152]	; (8001cf4 <actualizarAvances+0x184>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	bfb8      	it	lt
 8001c64:	425b      	neglt	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe ff6a 	bl	8000b40 <__aeabi_i2f>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f7fe fbd2 	bl	8000418 <__aeabi_f2d>
 8001c74:	f04f 0200 	mov.w	r2, #0
 8001c78:	4b1f      	ldr	r3, [pc, #124]	; (8001cf8 <actualizarAvances+0x188>)
 8001c7a:	f7fe fd4f 	bl	800071c <__aeabi_ddiv>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4610      	mov	r0, r2
 8001c84:	4619      	mov	r1, r3
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b10      	ldr	r3, [pc, #64]	; (8001ccc <actualizarAvances+0x15c>)
 8001c8c:	f7fe fc1c 	bl	80004c8 <__aeabi_dmul>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4610      	mov	r0, r2
 8001c96:	4619      	mov	r1, r3
 8001c98:	f7fe fe48 	bl	800092c <__aeabi_d2f>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	4a17      	ldr	r2, [pc, #92]	; (8001cfc <actualizarAvances+0x18c>)
 8001ca0:	6013      	str	r3, [r2, #0]
}
 8001ca2:	bf00      	nop
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	00000000 	.word	0x00000000
 8001cac:	409ec300 	.word	0x409ec300
 8001cb0:	7ae147ae 	.word	0x7ae147ae
 8001cb4:	407eca14 	.word	0x407eca14
 8001cb8:	200002ac 	.word	0x200002ac
 8001cbc:	200000d8 	.word	0x200000d8
 8001cc0:	20000218 	.word	0x20000218
 8001cc4:	200000dc 	.word	0x200000dc
 8001cc8:	200000e0 	.word	0x200000e0
 8001ccc:	40358000 	.word	0x40358000
 8001cd0:	200000f0 	.word	0x200000f0
 8001cd4:	200000e4 	.word	0x200000e4
 8001cd8:	44f72000 	.word	0x44f72000
 8001cdc:	41ac0000 	.word	0x41ac0000
 8001ce0:	200000f4 	.word	0x200000f4
 8001ce4:	2000011c 	.word	0x2000011c
 8001ce8:	200000e8 	.word	0x200000e8
 8001cec:	200000f8 	.word	0x200000f8
 8001cf0:	20000120 	.word	0x20000120
 8001cf4:	200000ec 	.word	0x200000ec
 8001cf8:	40800200 	.word	0x40800200
 8001cfc:	200000fc 	.word	0x200000fc

08001d00 <calcularPromedioTrasero>:


float calcularPromedioTrasero(void) {
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
    return (avance3 + avance4) / 2.0f;
 8001d04:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <calcularPromedioTrasero+0x28>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <calcularPromedioTrasero+0x2c>)
 8001d0a:	6812      	ldr	r2, [r2, #0]
 8001d0c:	4611      	mov	r1, r2
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fe62 	bl	80009d8 <__addsf3>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff f818 	bl	8000d50 <__aeabi_fdiv>
 8001d20:	4603      	mov	r3, r0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200000f8 	.word	0x200000f8
 8001d2c:	200000fc 	.word	0x200000fc

08001d30 <moverMotores>:


void moverMotores(uint8_t pwm) {
 8001d30:	b590      	push	{r4, r7, lr}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	71fb      	strb	r3, [r7, #7]
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, pwm);         // Delantera derecha
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <moverMotores+0x78>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	79fa      	ldrb	r2, [r7, #7]
 8001d40:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, pwm + 3.17);  // Delantera izquierda
 8001d42:	79fb      	ldrb	r3, [r7, #7]
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7fe fb55 	bl	80003f4 <__aeabi_i2d>
 8001d4a:	a315      	add	r3, pc, #84	; (adr r3, 8001da0 <moverMotores+0x70>)
 8001d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d50:	f7fe fa04 	bl	800015c <__adddf3>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4913      	ldr	r1, [pc, #76]	; (8001da8 <moverMotores+0x78>)
 8001d5a:	680c      	ldr	r4, [r1, #0]
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	4619      	mov	r1, r3
 8001d60:	f7fe fdc4 	bl	80008ec <__aeabi_d2uiz>
 8001d64:	4603      	mov	r3, r0
 8001d66:	63a3      	str	r3, [r4, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, pwm);         // Trasera derecha
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <moverMotores+0x78>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	79fa      	ldrb	r2, [r7, #7]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, pwm + 3.17);  // Trasera izquierda
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7fe fb3e 	bl	80003f4 <__aeabi_i2d>
 8001d78:	a309      	add	r3, pc, #36	; (adr r3, 8001da0 <moverMotores+0x70>)
 8001d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d7e:	f7fe f9ed 	bl	800015c <__adddf3>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4908      	ldr	r1, [pc, #32]	; (8001da8 <moverMotores+0x78>)
 8001d88:	680c      	ldr	r4, [r1, #0]
 8001d8a:	4610      	mov	r0, r2
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	f7fe fdad 	bl	80008ec <__aeabi_d2uiz>
 8001d92:	4603      	mov	r3, r0
 8001d94:	6423      	str	r3, [r4, #64]	; 0x40
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd90      	pop	{r4, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	f5c28f5c 	.word	0xf5c28f5c
 8001da4:	40095c28 	.word	0x40095c28
 8001da8:	20000124 	.word	0x20000124

08001dac <detenerMotores>:

void detenerMotores(void) {
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8001db0:	4b09      	ldr	r3, [pc, #36]	; (8001dd8 <detenerMotores+0x2c>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2200      	movs	r2, #0
 8001db6:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001db8:	4b07      	ldr	r3, [pc, #28]	; (8001dd8 <detenerMotores+0x2c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, 0);
 8001dc0:	4b05      	ldr	r3, [pc, #20]	; (8001dd8 <detenerMotores+0x2c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_4, 0);
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <detenerMotores+0x2c>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dd0:	bf00      	nop
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bc80      	pop	{r7}
 8001dd6:	4770      	bx	lr
 8001dd8:	20000124 	.word	0x20000124

08001ddc <Init_IMU>:

void Init_IMU(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08a      	sub	sp, #40	; 0x28
 8001de0:	af04      	add	r7, sp, #16
    uint8_t data_tx[2], reg, val;
    uint8_t asa[3] = {0};
 8001de2:	4b96      	ldr	r3, [pc, #600]	; (800203c <Init_IMU+0x260>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	80bb      	strh	r3, [r7, #4]
 8001de8:	2300      	movs	r3, #0
 8001dea:	71bb      	strb	r3, [r7, #6]
    uint8_t dev_addr = MPU_ADDR;    // 0x69 << 1
 8001dec:	23d2      	movs	r3, #210	; 0xd2
 8001dee:	73fb      	strb	r3, [r7, #15]
    uint8_t mag_addr = MAG_ADDR;    // 0x0C << 1
 8001df0:	2318      	movs	r3, #24
 8001df2:	73bb      	strb	r3, [r7, #14]

    // 0. Reset MPU
    data_tx[0] = 0x6B; data_tx[1] = 0x80;
 8001df4:	236b      	movs	r3, #107	; 0x6b
 8001df6:	733b      	strb	r3, [r7, #12]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK) {
 8001dfc:	7bfb      	ldrb	r3, [r7, #15]
 8001dfe:	b299      	uxth	r1, r3
 8001e00:	f107 020c 	add.w	r2, r7, #12
 8001e04:	2364      	movs	r3, #100	; 0x64
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2302      	movs	r3, #2
 8001e0a:	488d      	ldr	r0, [pc, #564]	; (8002040 <Init_IMU+0x264>)
 8001e0c:	f001 fbb0 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <Init_IMU+0x4e>
        HAL_Delay(100);
 8001e16:	2064      	movs	r0, #100	; 0x64
 8001e18:	f000 ff50 	bl	8002cbc <HAL_Delay>
        check_flags |= (1 << 0);
 8001e1c:	4b89      	ldr	r3, [pc, #548]	; (8002044 <Init_IMU+0x268>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	4b87      	ldr	r3, [pc, #540]	; (8002044 <Init_IMU+0x268>)
 8001e28:	801a      	strh	r2, [r3, #0]
    }

    // 1. Clock source = PLL with X axis gyroscope
    data_tx[0] = 0x6B; data_tx[1] = 0x01;
 8001e2a:	236b      	movs	r3, #107	; 0x6b
 8001e2c:	733b      	strb	r3, [r7, #12]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK)
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	b299      	uxth	r1, r3
 8001e36:	f107 020c 	add.w	r2, r7, #12
 8001e3a:	2364      	movs	r3, #100	; 0x64
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2302      	movs	r3, #2
 8001e40:	487f      	ldr	r0, [pc, #508]	; (8002040 <Init_IMU+0x264>)
 8001e42:	f001 fb95 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <Init_IMU+0x7e>
        check_flags |= (1 << 1);
 8001e4c:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <Init_IMU+0x268>)
 8001e4e:	881b      	ldrh	r3, [r3, #0]
 8001e50:	f043 0302 	orr.w	r3, r3, #2
 8001e54:	b29a      	uxth	r2, r3
 8001e56:	4b7b      	ldr	r3, [pc, #492]	; (8002044 <Init_IMU+0x268>)
 8001e58:	801a      	strh	r2, [r3, #0]

    // 2. Gyroscope config = ±250°/s
    data_tx[0] = 0x1B; data_tx[1] = 0x00;
 8001e5a:	231b      	movs	r3, #27
 8001e5c:	733b      	strb	r3, [r7, #12]
 8001e5e:	2300      	movs	r3, #0
 8001e60:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK)
 8001e62:	7bfb      	ldrb	r3, [r7, #15]
 8001e64:	b299      	uxth	r1, r3
 8001e66:	f107 020c 	add.w	r2, r7, #12
 8001e6a:	2364      	movs	r3, #100	; 0x64
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2302      	movs	r3, #2
 8001e70:	4873      	ldr	r0, [pc, #460]	; (8002040 <Init_IMU+0x264>)
 8001e72:	f001 fb7d 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d106      	bne.n	8001e8a <Init_IMU+0xae>
        check_flags |= (1 << 2);
 8001e7c:	4b71      	ldr	r3, [pc, #452]	; (8002044 <Init_IMU+0x268>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	f043 0304 	orr.w	r3, r3, #4
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	4b6f      	ldr	r3, [pc, #444]	; (8002044 <Init_IMU+0x268>)
 8001e88:	801a      	strh	r2, [r3, #0]

    // 3. Accelerometer config = ±2g
    data_tx[0] = 0x1C; data_tx[1] = 0x00;
 8001e8a:	231c      	movs	r3, #28
 8001e8c:	733b      	strb	r3, [r7, #12]
 8001e8e:	2300      	movs	r3, #0
 8001e90:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK)
 8001e92:	7bfb      	ldrb	r3, [r7, #15]
 8001e94:	b299      	uxth	r1, r3
 8001e96:	f107 020c 	add.w	r2, r7, #12
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	4867      	ldr	r0, [pc, #412]	; (8002040 <Init_IMU+0x264>)
 8001ea2:	f001 fb65 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d106      	bne.n	8001eba <Init_IMU+0xde>
        check_flags |= (1 << 3);
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <Init_IMU+0x268>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f043 0308 	orr.w	r3, r3, #8
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <Init_IMU+0x268>)
 8001eb8:	801a      	strh	r2, [r3, #0]

    // 4. Enable I2C bypass mode (talk directly to magnetometer)
    data_tx[0] = 0x37; data_tx[1] = 0x02;
 8001eba:	2337      	movs	r3, #55	; 0x37
 8001ebc:	733b      	strb	r3, [r7, #12]
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, 100) == HAL_OK) {
 8001ec2:	7bfb      	ldrb	r3, [r7, #15]
 8001ec4:	b299      	uxth	r1, r3
 8001ec6:	f107 020c 	add.w	r2, r7, #12
 8001eca:	2364      	movs	r3, #100	; 0x64
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2302      	movs	r3, #2
 8001ed0:	485b      	ldr	r0, [pc, #364]	; (8002040 <Init_IMU+0x264>)
 8001ed2:	f001 fb4d 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <Init_IMU+0x114>
        HAL_Delay(10);
 8001edc:	200a      	movs	r0, #10
 8001ede:	f000 feed 	bl	8002cbc <HAL_Delay>
        check_flags |= (1 << 4);
 8001ee2:	4b58      	ldr	r3, [pc, #352]	; (8002044 <Init_IMU+0x268>)
 8001ee4:	881b      	ldrh	r3, [r3, #0]
 8001ee6:	f043 0310 	orr.w	r3, r3, #16
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <Init_IMU+0x268>)
 8001eee:	801a      	strh	r2, [r3, #0]
    }

    // 5. Power down magnetometer
    data_tx[0] = 0x0A; data_tx[1] = 0x00;
 8001ef0:	230a      	movs	r3, #10
 8001ef2:	733b      	strb	r3, [r7, #12]
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100) == HAL_OK) {
 8001ef8:	7bbb      	ldrb	r3, [r7, #14]
 8001efa:	b299      	uxth	r1, r3
 8001efc:	f107 020c 	add.w	r2, r7, #12
 8001f00:	2364      	movs	r3, #100	; 0x64
 8001f02:	9300      	str	r3, [sp, #0]
 8001f04:	2302      	movs	r3, #2
 8001f06:	484e      	ldr	r0, [pc, #312]	; (8002040 <Init_IMU+0x264>)
 8001f08:	f001 fb32 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d109      	bne.n	8001f26 <Init_IMU+0x14a>
        HAL_Delay(10);
 8001f12:	200a      	movs	r0, #10
 8001f14:	f000 fed2 	bl	8002cbc <HAL_Delay>
        check_flags |= (1 << 5);
 8001f18:	4b4a      	ldr	r3, [pc, #296]	; (8002044 <Init_IMU+0x268>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	f043 0320 	orr.w	r3, r3, #32
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	4b48      	ldr	r3, [pc, #288]	; (8002044 <Init_IMU+0x268>)
 8001f24:	801a      	strh	r2, [r3, #0]
    }

    // 6. Enter fuse ROM access mode
    data_tx[0] = 0x0A; data_tx[1] = 0x0F;
 8001f26:	230a      	movs	r3, #10
 8001f28:	733b      	strb	r3, [r7, #12]
 8001f2a:	230f      	movs	r3, #15
 8001f2c:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100) == HAL_OK) {
 8001f2e:	7bbb      	ldrb	r3, [r7, #14]
 8001f30:	b299      	uxth	r1, r3
 8001f32:	f107 020c 	add.w	r2, r7, #12
 8001f36:	2364      	movs	r3, #100	; 0x64
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	4840      	ldr	r0, [pc, #256]	; (8002040 <Init_IMU+0x264>)
 8001f3e:	f001 fb17 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d109      	bne.n	8001f5c <Init_IMU+0x180>
        HAL_Delay(10);
 8001f48:	200a      	movs	r0, #10
 8001f4a:	f000 feb7 	bl	8002cbc <HAL_Delay>
        check_flags |= (1 << 6);
 8001f4e:	4b3d      	ldr	r3, [pc, #244]	; (8002044 <Init_IMU+0x268>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b3a      	ldr	r3, [pc, #232]	; (8002044 <Init_IMU+0x268>)
 8001f5a:	801a      	strh	r2, [r3, #0]
    }

    // 7. Read sensitivity adjustment values (ASA)
    reg = 0x10;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 8001f60:	7bbb      	ldrb	r3, [r7, #14]
 8001f62:	b299      	uxth	r1, r3
 8001f64:	f107 020b 	add.w	r2, r7, #11
 8001f68:	2364      	movs	r3, #100	; 0x64
 8001f6a:	9300      	str	r3, [sp, #0]
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4834      	ldr	r0, [pc, #208]	; (8002040 <Init_IMU+0x264>)
 8001f70:	f001 fafe 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d112      	bne.n	8001fa0 <Init_IMU+0x1c4>
        HAL_I2C_Master_Receive(&hi2c2, mag_addr, asa, 3, 100) == HAL_OK) {
 8001f7a:	7bbb      	ldrb	r3, [r7, #14]
 8001f7c:	b299      	uxth	r1, r3
 8001f7e:	1d3a      	adds	r2, r7, #4
 8001f80:	2364      	movs	r3, #100	; 0x64
 8001f82:	9300      	str	r3, [sp, #0]
 8001f84:	2303      	movs	r3, #3
 8001f86:	482e      	ldr	r0, [pc, #184]	; (8002040 <Init_IMU+0x264>)
 8001f88:	f001 fbf0 	bl	800376c <HAL_I2C_Master_Receive>
 8001f8c:	4603      	mov	r3, r0
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d106      	bne.n	8001fa0 <Init_IMU+0x1c4>
        check_flags |= (1 << 7);
 8001f92:	4b2c      	ldr	r3, [pc, #176]	; (8002044 <Init_IMU+0x268>)
 8001f94:	881b      	ldrh	r3, [r3, #0]
 8001f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f9a:	b29a      	uxth	r2, r3
 8001f9c:	4b29      	ldr	r3, [pc, #164]	; (8002044 <Init_IMU+0x268>)
 8001f9e:	801a      	strh	r2, [r3, #0]
    }

    // 8. Power down again
    data_tx[0] = 0x0A; data_tx[1] = 0x00;
 8001fa0:	230a      	movs	r3, #10
 8001fa2:	733b      	strb	r3, [r7, #12]
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	737b      	strb	r3, [r7, #13]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100) == HAL_OK) {
 8001fa8:	7bbb      	ldrb	r3, [r7, #14]
 8001faa:	b299      	uxth	r1, r3
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	2364      	movs	r3, #100	; 0x64
 8001fb2:	9300      	str	r3, [sp, #0]
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	4822      	ldr	r0, [pc, #136]	; (8002040 <Init_IMU+0x264>)
 8001fb8:	f001 fada 	bl	8003570 <HAL_I2C_Master_Transmit>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d109      	bne.n	8001fd6 <Init_IMU+0x1fa>
        HAL_Delay(10);
 8001fc2:	200a      	movs	r0, #10
 8001fc4:	f000 fe7a 	bl	8002cbc <HAL_Delay>
        check_flags |= (1 << 8);
 8001fc8:	4b1e      	ldr	r3, [pc, #120]	; (8002044 <Init_IMU+0x268>)
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd0:	b29a      	uxth	r2, r3
 8001fd2:	4b1c      	ldr	r3, [pc, #112]	; (8002044 <Init_IMU+0x268>)
 8001fd4:	801a      	strh	r2, [r3, #0]
    }

    // 9. Set magnetometer to continuous mode 2 (100Hz, 16-bit)
    uint8_t mode_ok = 0;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < 5; i++) {
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e036      	b.n	800204e <Init_IMU+0x272>
        data_tx[0] = 0x0A; data_tx[1] = 0x16;
 8001fe0:	230a      	movs	r3, #10
 8001fe2:	733b      	strb	r3, [r7, #12]
 8001fe4:	2316      	movs	r3, #22
 8001fe6:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, 100);
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	b299      	uxth	r1, r3
 8001fec:	f107 020c 	add.w	r2, r7, #12
 8001ff0:	2364      	movs	r3, #100	; 0x64
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	4812      	ldr	r0, [pc, #72]	; (8002040 <Init_IMU+0x264>)
 8001ff8:	f001 faba 	bl	8003570 <HAL_I2C_Master_Transmit>
        HAL_Delay(10);
 8001ffc:	200a      	movs	r0, #10
 8001ffe:	f000 fe5d 	bl	8002cbc <HAL_Delay>
        reg = 0x0A;
 8002002:	230a      	movs	r3, #10
 8002004:	72fb      	strb	r3, [r7, #11]
        HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100);
 8002006:	7bbb      	ldrb	r3, [r7, #14]
 8002008:	b299      	uxth	r1, r3
 800200a:	f107 020b 	add.w	r2, r7, #11
 800200e:	2364      	movs	r3, #100	; 0x64
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2301      	movs	r3, #1
 8002014:	480a      	ldr	r0, [pc, #40]	; (8002040 <Init_IMU+0x264>)
 8002016:	f001 faab 	bl	8003570 <HAL_I2C_Master_Transmit>
        HAL_I2C_Master_Receive(&hi2c2, mag_addr, &val, 1, 100);
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	b299      	uxth	r1, r3
 800201e:	f107 020a 	add.w	r2, r7, #10
 8002022:	2364      	movs	r3, #100	; 0x64
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2301      	movs	r3, #1
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <Init_IMU+0x264>)
 800202a:	f001 fb9f 	bl	800376c <HAL_I2C_Master_Receive>
        if (val == 0x16) {
 800202e:	7abb      	ldrb	r3, [r7, #10]
 8002030:	2b16      	cmp	r3, #22
 8002032:	d109      	bne.n	8002048 <Init_IMU+0x26c>
            mode_ok = 1;
 8002034:	2301      	movs	r3, #1
 8002036:	75fb      	strb	r3, [r7, #23]
            break;
 8002038:	e00c      	b.n	8002054 <Init_IMU+0x278>
 800203a:	bf00      	nop
 800203c:	08005f94 	.word	0x08005f94
 8002040:	2000016c 	.word	0x2000016c
 8002044:	200000d0 	.word	0x200000d0
    for (int i = 0; i < 5; i++) {
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	3301      	adds	r3, #1
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	2b04      	cmp	r3, #4
 8002052:	ddc5      	ble.n	8001fe0 <Init_IMU+0x204>
        }
    }
    if (mode_ok)
 8002054:	7dfb      	ldrb	r3, [r7, #23]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d006      	beq.n	8002068 <Init_IMU+0x28c>
        check_flags |= (1 << 9);
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <Init_IMU+0x34c>)
 800205c:	881b      	ldrh	r3, [r3, #0]
 800205e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002062:	b29a      	uxth	r2, r3
 8002064:	4b30      	ldr	r3, [pc, #192]	; (8002128 <Init_IMU+0x34c>)
 8002066:	801a      	strh	r2, [r3, #0]

    // 10. Confirm ST1 register responds
    reg = 0x02;
 8002068:	2302      	movs	r3, #2
 800206a:	72fb      	strb	r3, [r7, #11]
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 800206c:	7bbb      	ldrb	r3, [r7, #14]
 800206e:	b299      	uxth	r1, r3
 8002070:	f107 020b 	add.w	r2, r7, #11
 8002074:	2364      	movs	r3, #100	; 0x64
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	2301      	movs	r3, #1
 800207a:	482c      	ldr	r0, [pc, #176]	; (800212c <Init_IMU+0x350>)
 800207c:	f001 fa78 	bl	8003570 <HAL_I2C_Master_Transmit>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <Init_IMU+0x2d2>
        HAL_I2C_Master_Receive(&hi2c2, mag_addr, &val, 1, 100) == HAL_OK) {
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	b299      	uxth	r1, r3
 800208a:	f107 020a 	add.w	r2, r7, #10
 800208e:	2364      	movs	r3, #100	; 0x64
 8002090:	9300      	str	r3, [sp, #0]
 8002092:	2301      	movs	r3, #1
 8002094:	4825      	ldr	r0, [pc, #148]	; (800212c <Init_IMU+0x350>)
 8002096:	f001 fb69 	bl	800376c <HAL_I2C_Master_Receive>
 800209a:	4603      	mov	r3, r0
    if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, 100) == HAL_OK &&
 800209c:	2b00      	cmp	r3, #0
 800209e:	d106      	bne.n	80020ae <Init_IMU+0x2d2>
        check_flags |= (1 << 10);
 80020a0:	4b21      	ldr	r3, [pc, #132]	; (8002128 <Init_IMU+0x34c>)
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a8:	b29a      	uxth	r2, r3
 80020aa:	4b1f      	ldr	r3, [pc, #124]	; (8002128 <Init_IMU+0x34c>)
 80020ac:	801a      	strh	r2, [r3, #0]
    }

    // 11. Enable RAW_RDY_EN interrupt (enable data ready interrupt)
    val = 0x01;  // Bit 0 = RAW_RDY_EN
 80020ae:	2301      	movs	r3, #1
 80020b0:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c2, MPU_ADDR, 0x38, 1, &val, 1, 100);
 80020b2:	2364      	movs	r3, #100	; 0x64
 80020b4:	9302      	str	r3, [sp, #8]
 80020b6:	2301      	movs	r3, #1
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	f107 030a 	add.w	r3, r7, #10
 80020be:	9300      	str	r3, [sp, #0]
 80020c0:	2301      	movs	r3, #1
 80020c2:	2238      	movs	r2, #56	; 0x38
 80020c4:	21d2      	movs	r1, #210	; 0xd2
 80020c6:	4819      	ldr	r0, [pc, #100]	; (800212c <Init_IMU+0x350>)
 80020c8:	f001 fdbc 	bl	8003c44 <HAL_I2C_Mem_Write>

    // 12. Configure INT pin: active LOW, open-drain, pulse mode (not latch)

    val = 0x12; // 0x10 (active low) + 0x02 (bypass enabled)
 80020cc:	2312      	movs	r3, #18
 80020ce:	72bb      	strb	r3, [r7, #10]
    HAL_I2C_Mem_Write(&hi2c2, MPU_ADDR, 0x37, 1, &val, 1, 100);
 80020d0:	2364      	movs	r3, #100	; 0x64
 80020d2:	9302      	str	r3, [sp, #8]
 80020d4:	2301      	movs	r3, #1
 80020d6:	9301      	str	r3, [sp, #4]
 80020d8:	f107 030a 	add.w	r3, r7, #10
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2301      	movs	r3, #1
 80020e0:	2237      	movs	r2, #55	; 0x37
 80020e2:	21d2      	movs	r1, #210	; 0xd2
 80020e4:	4811      	ldr	r0, [pc, #68]	; (800212c <Init_IMU+0x350>)
 80020e6:	f001 fdad 	bl	8003c44 <HAL_I2C_Mem_Write>


    // 13. CONFIG (DLPF) = 3 (Accel/Gyro ~44Hz BW, 1kHz sample)
    data_tx[0] = 0x1A; data_tx[1] = 0x03;
 80020ea:	231a      	movs	r3, #26
 80020ec:	733b      	strb	r3, [r7, #12]
 80020ee:	2303      	movs	r3, #3
 80020f0:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, data_tx, 2, 100);
 80020f2:	f107 020c 	add.w	r2, r7, #12
 80020f6:	2364      	movs	r3, #100	; 0x64
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2302      	movs	r3, #2
 80020fc:	21d2      	movs	r1, #210	; 0xd2
 80020fe:	480b      	ldr	r0, [pc, #44]	; (800212c <Init_IMU+0x350>)
 8002100:	f001 fa36 	bl	8003570 <HAL_I2C_Master_Transmit>

    // 14. SMPLRT_DIV = 9 → 1kHz / (1+9) = 100Hz output rate
    data_tx[0] = 0x19; data_tx[1] = 9;
 8002104:	2319      	movs	r3, #25
 8002106:	733b      	strb	r3, [r7, #12]
 8002108:	2309      	movs	r3, #9
 800210a:	737b      	strb	r3, [r7, #13]
    HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, data_tx, 2, 100);
 800210c:	f107 020c 	add.w	r2, r7, #12
 8002110:	2364      	movs	r3, #100	; 0x64
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	2302      	movs	r3, #2
 8002116:	21d2      	movs	r1, #210	; 0xd2
 8002118:	4804      	ldr	r0, [pc, #16]	; (800212c <Init_IMU+0x350>)
 800211a:	f001 fa29 	bl	8003570 <HAL_I2C_Master_Transmit>
}
 800211e:	bf00      	nop
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	200000d0 	.word	0x200000d0
 800212c:	2000016c 	.word	0x2000016c

08002130 <GetData__stMPU_9255>:


IMU_Data GetData__stMPU_9255(void) {
 8002130:	b5b0      	push	{r4, r5, r7, lr}
 8002132:	b09a      	sub	sp, #104	; 0x68
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
	uint8_t imuData[14] = {0};
 8002138:	2300      	movs	r3, #0
 800213a:	653b      	str	r3, [r7, #80]	; 0x50
 800213c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	811a      	strh	r2, [r3, #8]
	uint8_t magData[7] = {0};
 8002148:	2300      	movs	r3, #0
 800214a:	64bb      	str	r3, [r7, #72]	; 0x48
 800214c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002150:	2100      	movs	r1, #0
 8002152:	460a      	mov	r2, r1
 8002154:	801a      	strh	r2, [r3, #0]
 8002156:	460a      	mov	r2, r1
 8002158:	709a      	strb	r2, [r3, #2]
	uint8_t status1 = 0;
 800215a:	2300      	movs	r3, #0
 800215c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t reg;
	int16_t raw[10] = {0};
 8002160:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
	IMU_Data result;

	// Leer 14 bytes: accel, temp, gyro
	reg = ACCEL_XOUT_H;
 8002170:	233b      	movs	r3, #59	; 0x3b
 8002172:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, &reg, 1, HAL_MAX_DELAY);
 8002176:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800217a:	f04f 33ff 	mov.w	r3, #4294967295
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	2301      	movs	r3, #1
 8002182:	21d2      	movs	r1, #210	; 0xd2
 8002184:	4882      	ldr	r0, [pc, #520]	; (8002390 <GetData__stMPU_9255+0x260>)
 8002186:	f001 f9f3 	bl	8003570 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MPU_ADDR, imuData, 14, HAL_MAX_DELAY);
 800218a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	230e      	movs	r3, #14
 8002196:	21d2      	movs	r1, #210	; 0xd2
 8002198:	487d      	ldr	r0, [pc, #500]	; (8002390 <GetData__stMPU_9255+0x260>)
 800219a:	f001 fae7 	bl	800376c <HAL_I2C_Master_Receive>

	raw[0] = (imuData[0] << 8) | imuData[1];  // AccX
 800219e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80021a2:	021b      	lsls	r3, r3, #8
 80021a4:	b21a      	sxth	r2, r3
 80021a6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80021aa:	b21b      	sxth	r3, r3
 80021ac:	4313      	orrs	r3, r2
 80021ae:	b21b      	sxth	r3, r3
 80021b0:	863b      	strh	r3, [r7, #48]	; 0x30
	raw[1] = (imuData[2] << 8) | imuData[3];  // AccY
 80021b2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21b      	sxth	r3, r3
 80021c4:	867b      	strh	r3, [r7, #50]	; 0x32
	raw[2] = (imuData[4] << 8) | imuData[5];  // AccZ
 80021c6:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 80021ca:	021b      	lsls	r3, r3, #8
 80021cc:	b21a      	sxth	r2, r3
 80021ce:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80021d2:	b21b      	sxth	r3, r3
 80021d4:	4313      	orrs	r3, r2
 80021d6:	b21b      	sxth	r3, r3
 80021d8:	86bb      	strh	r3, [r7, #52]	; 0x34
	raw[3] = (imuData[6] << 8) | imuData[7];  // Temp
 80021da:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80021de:	021b      	lsls	r3, r3, #8
 80021e0:	b21a      	sxth	r2, r3
 80021e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	86fb      	strh	r3, [r7, #54]	; 0x36
	raw[4] = (imuData[8] << 8) | imuData[9];  // GyroX
 80021ee:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80021f2:	021b      	lsls	r3, r3, #8
 80021f4:	b21a      	sxth	r2, r3
 80021f6:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 80021fa:	b21b      	sxth	r3, r3
 80021fc:	4313      	orrs	r3, r2
 80021fe:	b21b      	sxth	r3, r3
 8002200:	873b      	strh	r3, [r7, #56]	; 0x38
	raw[5] = (imuData[10] << 8) | imuData[11]; // GyroY
 8002202:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21b      	sxth	r3, r3
 8002214:	877b      	strh	r3, [r7, #58]	; 0x3a
	raw[6] = (imuData[12] << 8) | imuData[13]; // GyroZ
 8002216:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 800221a:	021b      	lsls	r3, r3, #8
 800221c:	b21a      	sxth	r2, r3
 800221e:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8002222:	b21b      	sxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b21b      	sxth	r3, r3
 8002228:	87bb      	strh	r3, [r7, #60]	; 0x3c

	HAL_Delay(10);
 800222a:	200a      	movs	r0, #10
 800222c:	f000 fd46 	bl	8002cbc <HAL_Delay>
	// Verifica si hay datos magnéticos listos
	reg = MAG_STATUS_1;
 8002230:	2302      	movs	r3, #2
 8002232:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, &reg, 1, HAL_MAX_DELAY);
 8002236:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800223a:	f04f 33ff 	mov.w	r3, #4294967295
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	2301      	movs	r3, #1
 8002242:	2118      	movs	r1, #24
 8002244:	4852      	ldr	r0, [pc, #328]	; (8002390 <GetData__stMPU_9255+0x260>)
 8002246:	f001 f993 	bl	8003570 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, &status1, 1, HAL_MAX_DELAY);
 800224a:	f107 0247 	add.w	r2, r7, #71	; 0x47
 800224e:	f04f 33ff 	mov.w	r3, #4294967295
 8002252:	9300      	str	r3, [sp, #0]
 8002254:	2301      	movs	r3, #1
 8002256:	2118      	movs	r1, #24
 8002258:	484d      	ldr	r0, [pc, #308]	; (8002390 <GetData__stMPU_9255+0x260>)
 800225a:	f001 fa87 	bl	800376c <HAL_I2C_Master_Receive>

	if ((status1 & MAG_DATA_READY) == MAG_DATA_READY) {
 800225e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d03c      	beq.n	80022e4 <GetData__stMPU_9255+0x1b4>
		// Leer datos magnéticos (6 + 1 bytes: HOFL)
		reg = MAG_HXL;
 800226a:	2303      	movs	r3, #3
 800226c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
		HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, &reg, 1, HAL_MAX_DELAY);
 8002270:	f107 0246 	add.w	r2, r7, #70	; 0x46
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	9300      	str	r3, [sp, #0]
 800227a:	2301      	movs	r3, #1
 800227c:	2118      	movs	r1, #24
 800227e:	4844      	ldr	r0, [pc, #272]	; (8002390 <GetData__stMPU_9255+0x260>)
 8002280:	f001 f976 	bl	8003570 <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, magData, 7, HAL_MAX_DELAY);
 8002284:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002288:	f04f 33ff 	mov.w	r3, #4294967295
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2307      	movs	r3, #7
 8002290:	2118      	movs	r1, #24
 8002292:	483f      	ldr	r0, [pc, #252]	; (8002390 <GetData__stMPU_9255+0x260>)
 8002294:	f001 fa6a 	bl	800376c <HAL_I2C_Master_Receive>

		// Si no hay overflow
		if (!(magData[6] & MAG_OVERFLOW_BIT)) {
 8002298:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11f      	bne.n	80022e4 <GetData__stMPU_9255+0x1b4>
			raw[7] = (magData[1] << 8) | magData[0]; // MagX
 80022a4:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80022b0:	b21b      	sxth	r3, r3
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21b      	sxth	r3, r3
 80022b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
			raw[8] = (magData[3] << 8) | magData[2]; // MagY
 80022b8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80022bc:	021b      	lsls	r3, r3, #8
 80022be:	b21a      	sxth	r2, r3
 80022c0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80022c4:	b21b      	sxth	r3, r3
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			raw[9] = (magData[5] << 8) | magData[4]; // MagZ
 80022ce:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80022d2:	021b      	lsls	r3, r3, #8
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80022da:	b21b      	sxth	r3, r3
 80022dc:	4313      	orrs	r3, r2
 80022de:	b21b      	sxth	r3, r3
 80022e0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		}
	}

	// Copiar a estructura
	result.AccXData  = (float)raw[0];
 80022e4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7fe fc29 	bl	8000b40 <__aeabi_i2f>
 80022ee:	4603      	mov	r3, r0
 80022f0:	60bb      	str	r3, [r7, #8]
	result.AccYData  = (float)raw[1];
 80022f2:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fc22 	bl	8000b40 <__aeabi_i2f>
 80022fc:	4603      	mov	r3, r0
 80022fe:	60fb      	str	r3, [r7, #12]
	result.AccZData  = (float)raw[2];
 8002300:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe fc1b 	bl	8000b40 <__aeabi_i2f>
 800230a:	4603      	mov	r3, r0
 800230c:	613b      	str	r3, [r7, #16]
	result.Temp      = (float)raw[3];
 800230e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8002312:	4618      	mov	r0, r3
 8002314:	f7fe fc14 	bl	8000b40 <__aeabi_i2f>
 8002318:	4603      	mov	r3, r0
 800231a:	617b      	str	r3, [r7, #20]
	result.GyroXData = (float)raw[4];
 800231c:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fc0d 	bl	8000b40 <__aeabi_i2f>
 8002326:	4603      	mov	r3, r0
 8002328:	61bb      	str	r3, [r7, #24]
	result.GyroYData = (float)raw[5];
 800232a:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 800232e:	4618      	mov	r0, r3
 8002330:	f7fe fc06 	bl	8000b40 <__aeabi_i2f>
 8002334:	4603      	mov	r3, r0
 8002336:	61fb      	str	r3, [r7, #28]
	result.GyroZData = (float)raw[6];
 8002338:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fbff 	bl	8000b40 <__aeabi_i2f>
 8002342:	4603      	mov	r3, r0
 8002344:	623b      	str	r3, [r7, #32]
	result.MagXData  = (float)raw[7];
 8002346:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe fbf8 	bl	8000b40 <__aeabi_i2f>
 8002350:	4603      	mov	r3, r0
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
	result.MagYData  = (float)raw[8];
 8002354:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe fbf1 	bl	8000b40 <__aeabi_i2f>
 800235e:	4603      	mov	r3, r0
 8002360:	62bb      	str	r3, [r7, #40]	; 0x28
	result.MagZData  = (float)raw[9];
 8002362:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe fbea 	bl	8000b40 <__aeabi_i2f>
 800236c:	4603      	mov	r3, r0
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c

	return result;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	461d      	mov	r5, r3
 8002374:	f107 0408 	add.w	r4, r7, #8
 8002378:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800237c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800237e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002380:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002384:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	3760      	adds	r7, #96	; 0x60
 800238c:	46bd      	mov	sp, r7
 800238e:	bdb0      	pop	{r4, r5, r7, pc}
 8002390:	2000016c 	.word	0x2000016c

08002394 <calibrate_magnetometer>:


MagCalibration calibrate_magnetometer(uint16_t samples) {
 8002394:	b5b0      	push	{r4, r5, r7, lr}
 8002396:	b09a      	sub	sp, #104	; 0x68
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	460b      	mov	r3, r1
 800239e:	807b      	strh	r3, [r7, #2]
    float minX =  32767, minY =  32767, minZ =  32767;
 80023a0:	4b5b      	ldr	r3, [pc, #364]	; (8002510 <calibrate_magnetometer+0x17c>)
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
 80023a4:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <calibrate_magnetometer+0x17c>)
 80023a6:	663b      	str	r3, [r7, #96]	; 0x60
 80023a8:	4b59      	ldr	r3, [pc, #356]	; (8002510 <calibrate_magnetometer+0x17c>)
 80023aa:	65fb      	str	r3, [r7, #92]	; 0x5c
    float maxX = -32768, maxY = -32768, maxZ = -32768;
 80023ac:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80023b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80023b2:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80023b6:	657b      	str	r3, [r7, #84]	; 0x54
 80023b8:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 80023bc:	653b      	str	r3, [r7, #80]	; 0x50

    for (uint16_t i = 0; i < samples; i++) {
 80023be:	2300      	movs	r3, #0
 80023c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023c4:	e048      	b.n	8002458 <calibrate_magnetometer+0xc4>
        IMU_Data lectura = GetData__stMPU_9255();
 80023c6:	f107 030c 	add.w	r3, r7, #12
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7ff feb0 	bl	8002130 <GetData__stMPU_9255>

        if (lectura.MagXData < minX) minX = lectura.MagXData;
 80023d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023d2:	4619      	mov	r1, r3
 80023d4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80023d6:	f7fe fdc3 	bl	8000f60 <__aeabi_fcmpgt>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <calibrate_magnetometer+0x50>
 80023e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023e2:	667b      	str	r3, [r7, #100]	; 0x64
        if (lectura.MagYData < minY) minY = lectura.MagYData;
 80023e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e6:	4619      	mov	r1, r3
 80023e8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80023ea:	f7fe fdb9 	bl	8000f60 <__aeabi_fcmpgt>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <calibrate_magnetometer+0x64>
 80023f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f6:	663b      	str	r3, [r7, #96]	; 0x60
        if (lectura.MagZData < minZ) minZ = lectura.MagZData;
 80023f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fa:	4619      	mov	r1, r3
 80023fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80023fe:	f7fe fdaf 	bl	8000f60 <__aeabi_fcmpgt>
 8002402:	4603      	mov	r3, r0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d001      	beq.n	800240c <calibrate_magnetometer+0x78>
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	65fb      	str	r3, [r7, #92]	; 0x5c

        if (lectura.MagXData > maxX) maxX = lectura.MagXData;
 800240c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800240e:	4619      	mov	r1, r3
 8002410:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002412:	f7fe fd87 	bl	8000f24 <__aeabi_fcmplt>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <calibrate_magnetometer+0x8c>
 800241c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800241e:	65bb      	str	r3, [r7, #88]	; 0x58
        if (lectura.MagYData > maxY) maxY = lectura.MagYData;
 8002420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002422:	4619      	mov	r1, r3
 8002424:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8002426:	f7fe fd7d 	bl	8000f24 <__aeabi_fcmplt>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <calibrate_magnetometer+0xa0>
 8002430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002432:	657b      	str	r3, [r7, #84]	; 0x54
        if (lectura.MagZData > maxZ) maxZ = lectura.MagZData;
 8002434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002436:	4619      	mov	r1, r3
 8002438:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800243a:	f7fe fd73 	bl	8000f24 <__aeabi_fcmplt>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <calibrate_magnetometer+0xb4>
 8002444:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002446:	653b      	str	r3, [r7, #80]	; 0x50

        HAL_Delay(10);
 8002448:	200a      	movs	r0, #10
 800244a:	f000 fc37 	bl	8002cbc <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 800244e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002452:	3301      	adds	r3, #1
 8002454:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002458:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800245c:	887b      	ldrh	r3, [r7, #2]
 800245e:	429a      	cmp	r2, r3
 8002460:	d3b1      	bcc.n	80023c6 <calibrate_magnetometer+0x32>
    }

    MagCalibration result;
    result.offsetX = (maxX + minX) / 2.0f;
 8002462:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002464:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002466:	f7fe fab7 	bl	80009d8 <__addsf3>
 800246a:	4603      	mov	r3, r0
 800246c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe fc6d 	bl	8000d50 <__aeabi_fdiv>
 8002476:	4603      	mov	r3, r0
 8002478:	637b      	str	r3, [r7, #52]	; 0x34
    result.offsetY = (maxY + minY) / 2.0f;
 800247a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800247c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800247e:	f7fe faab 	bl	80009d8 <__addsf3>
 8002482:	4603      	mov	r3, r0
 8002484:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe fc61 	bl	8000d50 <__aeabi_fdiv>
 800248e:	4603      	mov	r3, r0
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
    result.offsetZ = (maxZ + minZ) / 2.0f;
 8002492:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8002494:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002496:	f7fe fa9f 	bl	80009d8 <__addsf3>
 800249a:	4603      	mov	r3, r0
 800249c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe fc55 	bl	8000d50 <__aeabi_fdiv>
 80024a6:	4603      	mov	r3, r0
 80024a8:	63fb      	str	r3, [r7, #60]	; 0x3c

    result.scaleX = (maxX - minX) / 2.0f;
 80024aa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80024ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80024ae:	f7fe fa91 	bl	80009d4 <__aeabi_fsub>
 80024b2:	4603      	mov	r3, r0
 80024b4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7fe fc49 	bl	8000d50 <__aeabi_fdiv>
 80024be:	4603      	mov	r3, r0
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
    result.scaleY = (maxY - minY) / 2.0f;
 80024c2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80024c4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80024c6:	f7fe fa85 	bl	80009d4 <__aeabi_fsub>
 80024ca:	4603      	mov	r3, r0
 80024cc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7fe fc3d 	bl	8000d50 <__aeabi_fdiv>
 80024d6:	4603      	mov	r3, r0
 80024d8:	647b      	str	r3, [r7, #68]	; 0x44
    result.scaleZ = (maxZ - minZ) / 2.0f;
 80024da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80024dc:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80024de:	f7fe fa79 	bl	80009d4 <__aeabi_fsub>
 80024e2:	4603      	mov	r3, r0
 80024e4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7fe fc31 	bl	8000d50 <__aeabi_fdiv>
 80024ee:	4603      	mov	r3, r0
 80024f0:	64bb      	str	r3, [r7, #72]	; 0x48

    return result;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	461d      	mov	r5, r3
 80024f6:	f107 0434 	add.w	r4, r7, #52	; 0x34
 80024fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024fe:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002502:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	3768      	adds	r7, #104	; 0x68
 800250a:	46bd      	mov	sp, r7
 800250c:	bdb0      	pop	{r4, r5, r7, pc}
 800250e:	bf00      	nop
 8002510:	46fffe00 	.word	0x46fffe00

08002514 <calibrate_gyroZ>:

GyroCalibration calibrate_gyroZ(uint16_t samples) {
 8002514:	b580      	push	{r7, lr}
 8002516:	b094      	sub	sp, #80	; 0x50
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
 800251c:	460b      	mov	r3, r1
 800251e:	807b      	strh	r3, [r7, #2]
    float minZ =  32767;
 8002520:	4b28      	ldr	r3, [pc, #160]	; (80025c4 <calibrate_gyroZ+0xb0>)
 8002522:	64fb      	str	r3, [r7, #76]	; 0x4c
    float maxZ = -32768;
 8002524:	f04f 4347 	mov.w	r3, #3338665984	; 0xc7000000
 8002528:	64bb      	str	r3, [r7, #72]	; 0x48
    float sumZ = 0;
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	647b      	str	r3, [r7, #68]	; 0x44

    for (uint16_t i = 0; i < samples; i++) {
 8002530:	2300      	movs	r3, #0
 8002532:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002536:	e026      	b.n	8002586 <calibrate_gyroZ+0x72>
        IMU_Data lectura = GetData__stMPU_9255();
 8002538:	f107 030c 	add.w	r3, r7, #12
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fdf7 	bl	8002130 <GetData__stMPU_9255>
        float gyroZ = lectura.GyroZData;
 8002542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c

        if (gyroZ < minZ) minZ = gyroZ;
 8002546:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002548:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800254a:	f7fe fceb 	bl	8000f24 <__aeabi_fcmplt>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <calibrate_gyroZ+0x44>
 8002554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002556:	64fb      	str	r3, [r7, #76]	; 0x4c
        if (gyroZ > maxZ) maxZ = gyroZ;
 8002558:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800255a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800255c:	f7fe fd00 	bl	8000f60 <__aeabi_fcmpgt>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <calibrate_gyroZ+0x56>
 8002566:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002568:	64bb      	str	r3, [r7, #72]	; 0x48

        sumZ += gyroZ;
 800256a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800256c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800256e:	f7fe fa33 	bl	80009d8 <__addsf3>
 8002572:	4603      	mov	r3, r0
 8002574:	647b      	str	r3, [r7, #68]	; 0x44
        HAL_Delay(2);
 8002576:	2002      	movs	r0, #2
 8002578:	f000 fba0 	bl	8002cbc <HAL_Delay>
    for (uint16_t i = 0; i < samples; i++) {
 800257c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002580:	3301      	adds	r3, #1
 8002582:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002586:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800258a:	887b      	ldrh	r3, [r7, #2]
 800258c:	429a      	cmp	r2, r3
 800258e:	d3d3      	bcc.n	8002538 <calibrate_gyroZ+0x24>
    }

    GyroCalibration result;
    result.offsetZ = sumZ / samples;
 8002590:	887b      	ldrh	r3, [r7, #2]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fad4 	bl	8000b40 <__aeabi_i2f>
 8002598:	4603      	mov	r3, r0
 800259a:	4619      	mov	r1, r3
 800259c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800259e:	f7fe fbd7 	bl	8000d50 <__aeabi_fdiv>
 80025a2:	4603      	mov	r3, r0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34

    //Scaling removed chat said so
    //result.scaleZ = (maxZ - minZ) / 2.0f;
    result.scaleZ = 1.0f;  // No scaling
 80025a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80025aa:	63bb      	str	r3, [r7, #56]	; 0x38

    return result;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	461a      	mov	r2, r3
 80025b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80025b8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	3750      	adds	r7, #80	; 0x50
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	46fffe00 	.word	0x46fffe00

080025c8 <ReadIMU_Average>:



IMU_Data ReadIMU_Average(uint8_t samples) {
 80025c8:	b5b0      	push	{r4, r5, r7, lr}
 80025ca:	b098      	sub	sp, #96	; 0x60
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	70fb      	strb	r3, [r7, #3]
    IMU_Data avg = {0};
 80025d4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025d8:	2228      	movs	r2, #40	; 0x28
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fcc5 	bl	8005f6c <memset>

    for (uint8_t i = 0; i < samples; ) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80025e8:	e059      	b.n	800269e <ReadIMU_Average+0xd6>
        if (mpu_data_ready) {
 80025ea:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <ReadIMU_Average+0x1d8>)
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d054      	beq.n	800269e <ReadIMU_Average+0xd6>
            mpu_data_ready = 0;
 80025f4:	4b6a      	ldr	r3, [pc, #424]	; (80027a0 <ReadIMU_Average+0x1d8>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	701a      	strb	r2, [r3, #0]

            IMU_Data lectura = GetData__stMPU_9255();
 80025fa:	f107 030c 	add.w	r3, r7, #12
 80025fe:	4618      	mov	r0, r3
 8002600:	f7ff fd96 	bl	8002130 <GetData__stMPU_9255>
            avg.AccXData += lectura.AccXData;
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	68fa      	ldr	r2, [r7, #12]
 8002608:	4611      	mov	r1, r2
 800260a:	4618      	mov	r0, r3
 800260c:	f7fe f9e4 	bl	80009d8 <__addsf3>
 8002610:	4603      	mov	r3, r0
 8002612:	637b      	str	r3, [r7, #52]	; 0x34
            avg.AccYData += lectura.AccYData;
 8002614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002616:	693a      	ldr	r2, [r7, #16]
 8002618:	4611      	mov	r1, r2
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe f9dc 	bl	80009d8 <__addsf3>
 8002620:	4603      	mov	r3, r0
 8002622:	63bb      	str	r3, [r7, #56]	; 0x38
            avg.AccZData += lectura.AccZData;
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	4611      	mov	r1, r2
 800262a:	4618      	mov	r0, r3
 800262c:	f7fe f9d4 	bl	80009d8 <__addsf3>
 8002630:	4603      	mov	r3, r0
 8002632:	63fb      	str	r3, [r7, #60]	; 0x3c
            avg.GyroXData += lectura.GyroXData;
 8002634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002636:	69fa      	ldr	r2, [r7, #28]
 8002638:	4611      	mov	r1, r2
 800263a:	4618      	mov	r0, r3
 800263c:	f7fe f9cc 	bl	80009d8 <__addsf3>
 8002640:	4603      	mov	r3, r0
 8002642:	647b      	str	r3, [r7, #68]	; 0x44
            avg.GyroYData += lectura.GyroYData;
 8002644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002646:	6a3a      	ldr	r2, [r7, #32]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe f9c4 	bl	80009d8 <__addsf3>
 8002650:	4603      	mov	r3, r0
 8002652:	64bb      	str	r3, [r7, #72]	; 0x48
            avg.GyroZData += lectura.GyroZData;
 8002654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002658:	4611      	mov	r1, r2
 800265a:	4618      	mov	r0, r3
 800265c:	f7fe f9bc 	bl	80009d8 <__addsf3>
 8002660:	4603      	mov	r3, r0
 8002662:	64fb      	str	r3, [r7, #76]	; 0x4c
            avg.MagXData  += lectura.MagXData;
 8002664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002668:	4611      	mov	r1, r2
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe f9b4 	bl	80009d8 <__addsf3>
 8002670:	4603      	mov	r3, r0
 8002672:	653b      	str	r3, [r7, #80]	; 0x50
            avg.MagYData  += lectura.MagYData;
 8002674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002676:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002678:	4611      	mov	r1, r2
 800267a:	4618      	mov	r0, r3
 800267c:	f7fe f9ac 	bl	80009d8 <__addsf3>
 8002680:	4603      	mov	r3, r0
 8002682:	657b      	str	r3, [r7, #84]	; 0x54
            avg.MagZData  += lectura.MagZData;
 8002684:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002688:	4611      	mov	r1, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f7fe f9a4 	bl	80009d8 <__addsf3>
 8002690:	4603      	mov	r3, r0
 8002692:	65bb      	str	r3, [r7, #88]	; 0x58
            i++;
 8002694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002698:	3301      	adds	r3, #1
 800269a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    for (uint8_t i = 0; i < samples; ) {
 800269e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 80026a2:	78fb      	ldrb	r3, [r7, #3]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d3a0      	bcc.n	80025ea <ReadIMU_Average+0x22>
        }
    }

    avg.AccXData /= samples;
 80026a8:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f7fe fa47 	bl	8000b40 <__aeabi_i2f>
 80026b2:	4603      	mov	r3, r0
 80026b4:	4619      	mov	r1, r3
 80026b6:	4620      	mov	r0, r4
 80026b8:	f7fe fb4a 	bl	8000d50 <__aeabi_fdiv>
 80026bc:	4603      	mov	r3, r0
 80026be:	637b      	str	r3, [r7, #52]	; 0x34
    avg.AccYData /= samples;
 80026c0:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe fa3b 	bl	8000b40 <__aeabi_i2f>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4619      	mov	r1, r3
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7fe fb3e 	bl	8000d50 <__aeabi_fdiv>
 80026d4:	4603      	mov	r3, r0
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
    avg.AccZData /= samples;
 80026d8:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe fa2f 	bl	8000b40 <__aeabi_i2f>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4619      	mov	r1, r3
 80026e6:	4620      	mov	r0, r4
 80026e8:	f7fe fb32 	bl	8000d50 <__aeabi_fdiv>
 80026ec:	4603      	mov	r3, r0
 80026ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    avg.GyroXData /= samples;
 80026f0:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80026f2:	78fb      	ldrb	r3, [r7, #3]
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fe fa23 	bl	8000b40 <__aeabi_i2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4619      	mov	r1, r3
 80026fe:	4620      	mov	r0, r4
 8002700:	f7fe fb26 	bl	8000d50 <__aeabi_fdiv>
 8002704:	4603      	mov	r3, r0
 8002706:	647b      	str	r3, [r7, #68]	; 0x44
    avg.GyroYData /= samples;
 8002708:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fe fa17 	bl	8000b40 <__aeabi_i2f>
 8002712:	4603      	mov	r3, r0
 8002714:	4619      	mov	r1, r3
 8002716:	4620      	mov	r0, r4
 8002718:	f7fe fb1a 	bl	8000d50 <__aeabi_fdiv>
 800271c:	4603      	mov	r3, r0
 800271e:	64bb      	str	r3, [r7, #72]	; 0x48
    avg.GyroZData /= samples;
 8002720:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8002722:	78fb      	ldrb	r3, [r7, #3]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fe fa0b 	bl	8000b40 <__aeabi_i2f>
 800272a:	4603      	mov	r3, r0
 800272c:	4619      	mov	r1, r3
 800272e:	4620      	mov	r0, r4
 8002730:	f7fe fb0e 	bl	8000d50 <__aeabi_fdiv>
 8002734:	4603      	mov	r3, r0
 8002736:	64fb      	str	r3, [r7, #76]	; 0x4c
    avg.MagXData  /= samples;
 8002738:	6d3c      	ldr	r4, [r7, #80]	; 0x50
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	4618      	mov	r0, r3
 800273e:	f7fe f9ff 	bl	8000b40 <__aeabi_i2f>
 8002742:	4603      	mov	r3, r0
 8002744:	4619      	mov	r1, r3
 8002746:	4620      	mov	r0, r4
 8002748:	f7fe fb02 	bl	8000d50 <__aeabi_fdiv>
 800274c:	4603      	mov	r3, r0
 800274e:	653b      	str	r3, [r7, #80]	; 0x50
    avg.MagYData  /= samples;
 8002750:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8002752:	78fb      	ldrb	r3, [r7, #3]
 8002754:	4618      	mov	r0, r3
 8002756:	f7fe f9f3 	bl	8000b40 <__aeabi_i2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4619      	mov	r1, r3
 800275e:	4620      	mov	r0, r4
 8002760:	f7fe faf6 	bl	8000d50 <__aeabi_fdiv>
 8002764:	4603      	mov	r3, r0
 8002766:	657b      	str	r3, [r7, #84]	; 0x54
    avg.MagZData  /= samples;
 8002768:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	4618      	mov	r0, r3
 800276e:	f7fe f9e7 	bl	8000b40 <__aeabi_i2f>
 8002772:	4603      	mov	r3, r0
 8002774:	4619      	mov	r1, r3
 8002776:	4620      	mov	r0, r4
 8002778:	f7fe faea 	bl	8000d50 <__aeabi_fdiv>
 800277c:	4603      	mov	r3, r0
 800277e:	65bb      	str	r3, [r7, #88]	; 0x58

    return avg;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	461d      	mov	r5, r3
 8002784:	f107 0434 	add.w	r4, r7, #52	; 0x34
 8002788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800278c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800278e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002790:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002794:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	3760      	adds	r7, #96	; 0x60
 800279c:	46bd      	mov	sp, r7
 800279e:	bdb0      	pop	{r4, r5, r7, pc}
 80027a0:	20000260 	.word	0x20000260

080027a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a8:	b672      	cpsid	i
}
 80027aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027ac:	e7fe      	b.n	80027ac <Error_Handler+0x8>
	...

080027b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80027b6:	4b15      	ldr	r3, [pc, #84]	; (800280c <HAL_MspInit+0x5c>)
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	4a14      	ldr	r2, [pc, #80]	; (800280c <HAL_MspInit+0x5c>)
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	6193      	str	r3, [r2, #24]
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_MspInit+0x5c>)
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f003 0301 	and.w	r3, r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ce:	4b0f      	ldr	r3, [pc, #60]	; (800280c <HAL_MspInit+0x5c>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a0e      	ldr	r2, [pc, #56]	; (800280c <HAL_MspInit+0x5c>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]
 80027da:	4b0c      	ldr	r3, [pc, #48]	; (800280c <HAL_MspInit+0x5c>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	607b      	str	r3, [r7, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80027e6:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <HAL_MspInit+0x60>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	4a04      	ldr	r2, [pc, #16]	; (8002810 <HAL_MspInit+0x60>)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	40021000 	.word	0x40021000
 8002810:	40010000 	.word	0x40010000

08002814 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	f107 0310 	add.w	r3, r7, #16
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a16      	ldr	r2, [pc, #88]	; (8002888 <HAL_I2C_MspInit+0x74>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d124      	bne.n	800287e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_I2C_MspInit+0x78>)
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	4a14      	ldr	r2, [pc, #80]	; (800288c <HAL_I2C_MspInit+0x78>)
 800283a:	f043 0308 	orr.w	r3, r3, #8
 800283e:	6193      	str	r3, [r2, #24]
 8002840:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_I2C_MspInit+0x78>)
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	60fb      	str	r3, [r7, #12]
 800284a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800284c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002850:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002852:	2312      	movs	r3, #18
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800285a:	f107 0310 	add.w	r3, r7, #16
 800285e:	4619      	mov	r1, r3
 8002860:	480b      	ldr	r0, [pc, #44]	; (8002890 <HAL_I2C_MspInit+0x7c>)
 8002862:	f000 fb5d 	bl	8002f20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002866:	4b09      	ldr	r3, [pc, #36]	; (800288c <HAL_I2C_MspInit+0x78>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a08      	ldr	r2, [pc, #32]	; (800288c <HAL_I2C_MspInit+0x78>)
 800286c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b06      	ldr	r3, [pc, #24]	; (800288c <HAL_I2C_MspInit+0x78>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800287e:	bf00      	nop
 8002880:	3720      	adds	r7, #32
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40005800 	.word	0x40005800
 800288c:	40021000 	.word	0x40021000
 8002890:	40010c00 	.word	0x40010c00

08002894 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028b2:	d124      	bne.n	80028fe <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	4a27      	ldr	r2, [pc, #156]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028ba:	f043 0301 	orr.w	r3, r3, #1
 80028be:	61d3      	str	r3, [r2, #28]
 80028c0:	4b25      	ldr	r3, [pc, #148]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	617b      	str	r3, [r7, #20]
 80028ca:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028cc:	4b22      	ldr	r3, [pc, #136]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	4a21      	ldr	r2, [pc, #132]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028d2:	f043 0304 	orr.w	r3, r3, #4
 80028d6:	6193      	str	r3, [r2, #24]
 80028d8:	4b1f      	ldr	r3, [pc, #124]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80028e4:	2303      	movs	r3, #3
 80028e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80028e8:	2300      	movs	r3, #0
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ec:	2300      	movs	r3, #0
 80028ee:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028f0:	f107 0318 	add.w	r3, r7, #24
 80028f4:	4619      	mov	r1, r3
 80028f6:	4819      	ldr	r0, [pc, #100]	; (800295c <HAL_TIM_Encoder_MspInit+0xc8>)
 80028f8:	f000 fb12 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028fc:	e028      	b.n	8002950 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <HAL_TIM_Encoder_MspInit+0xcc>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d123      	bne.n	8002950 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002908:	4b13      	ldr	r3, [pc, #76]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 800290a:	69db      	ldr	r3, [r3, #28]
 800290c:	4a12      	ldr	r2, [pc, #72]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 800290e:	f043 0302 	orr.w	r3, r3, #2
 8002912:	61d3      	str	r3, [r2, #28]
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002916:	69db      	ldr	r3, [r3, #28]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002920:	4b0d      	ldr	r3, [pc, #52]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	4a0c      	ldr	r2, [pc, #48]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 8002926:	f043 0304 	orr.w	r3, r3, #4
 800292a:	6193      	str	r3, [r2, #24]
 800292c:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <HAL_TIM_Encoder_MspInit+0xc4>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	f003 0304 	and.w	r3, r3, #4
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002938:	23c0      	movs	r3, #192	; 0xc0
 800293a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002944:	f107 0318 	add.w	r3, r7, #24
 8002948:	4619      	mov	r1, r3
 800294a:	4804      	ldr	r0, [pc, #16]	; (800295c <HAL_TIM_Encoder_MspInit+0xc8>)
 800294c:	f000 fae8 	bl	8002f20 <HAL_GPIO_Init>
}
 8002950:	bf00      	nop
 8002952:	3728      	adds	r7, #40	; 0x28
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40021000 	.word	0x40021000
 800295c:	40010800 	.word	0x40010800
 8002960:	40000400 	.word	0x40000400

08002964 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_TIM_PWM_MspInit+0x34>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10b      	bne.n	800298e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_TIM_PWM_MspInit+0x38>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a08      	ldr	r2, [pc, #32]	; (800299c <HAL_TIM_PWM_MspInit+0x38>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_TIM_PWM_MspInit+0x38>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 0304 	and.w	r3, r3, #4
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40000800 	.word	0x40000800
 800299c:	40021000 	.word	0x40021000

080029a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a8:	f107 0310 	add.w	r3, r7, #16
 80029ac:	2200      	movs	r2, #0
 80029ae:	601a      	str	r2, [r3, #0]
 80029b0:	605a      	str	r2, [r3, #4]
 80029b2:	609a      	str	r2, [r3, #8]
 80029b4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <HAL_TIM_MspPostInit+0x5c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d118      	bne.n	80029f2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_TIM_MspPostInit+0x60>)
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_TIM_MspPostInit+0x60>)
 80029c6:	f043 0308 	orr.w	r3, r3, #8
 80029ca:	6193      	str	r3, [r2, #24]
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_TIM_MspPostInit+0x60>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 0308 	and.w	r3, r3, #8
 80029d4:	60fb      	str	r3, [r7, #12]
 80029d6:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029d8:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2302      	movs	r3, #2
 80029e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029e6:	f107 0310 	add.w	r3, r7, #16
 80029ea:	4619      	mov	r1, r3
 80029ec:	4805      	ldr	r0, [pc, #20]	; (8002a04 <HAL_TIM_MspPostInit+0x64>)
 80029ee:	f000 fa97 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80029f2:	bf00      	nop
 80029f4:	3720      	adds	r7, #32
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40000800 	.word	0x40000800
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010c00 	.word	0x40010c00

08002a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1c      	ldr	r2, [pc, #112]	; (8002a94 <HAL_UART_MspInit+0x8c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d131      	bne.n	8002a8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_UART_MspInit+0x90>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a1a      	ldr	r2, [pc, #104]	; (8002a98 <HAL_UART_MspInit+0x90>)
 8002a2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_UART_MspInit+0x90>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_UART_MspInit+0x90>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a14      	ldr	r2, [pc, #80]	; (8002a98 <HAL_UART_MspInit+0x90>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_UART_MspInit+0x90>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002a58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a62:	2303      	movs	r3, #3
 8002a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a66:	f107 0310 	add.w	r3, r7, #16
 8002a6a:	4619      	mov	r1, r3
 8002a6c:	480b      	ldr	r0, [pc, #44]	; (8002a9c <HAL_UART_MspInit+0x94>)
 8002a6e:	f000 fa57 	bl	8002f20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a80:	f107 0310 	add.w	r3, r7, #16
 8002a84:	4619      	mov	r1, r3
 8002a86:	4805      	ldr	r0, [pc, #20]	; (8002a9c <HAL_UART_MspInit+0x94>)
 8002a88:	f000 fa4a 	bl	8002f20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002a8c:	bf00      	nop
 8002a8e:	3720      	adds	r7, #32
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	40010800 	.word	0x40010800

08002aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002aa4:	e7fe      	b.n	8002aa4 <NMI_Handler+0x4>

08002aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <UsageFault_Handler+0x4>

08002abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bc80      	pop	{r7}
 8002ac8:	4770      	bx	lr

08002aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002aca:	b480      	push	{r7}
 8002acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bc80      	pop	{r7}
 8002ad4:	4770      	bx	lr

08002ad6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bc80      	pop	{r7}
 8002ae0:	4770      	bx	lr

08002ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ae6:	f000 f8cd 	bl	8002c84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	bd80      	pop	{r7, pc}

08002aee <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002aee:	b580      	push	{r7, lr}
 8002af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002af2:	2004      	movs	r0, #4
 8002af4:	f000 fbe0 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	bd80      	pop	{r7, pc}

08002afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8002b00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002b04:	f000 fbd8 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002b08:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002b0c:	f000 fbd4 	bl	80032b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_GPIO_EXTI_Callback>:

extern volatile int32_t encoder3_count;
extern volatile int32_t encoder4_count;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) { // ENC3 - Canal A
 8002b1e:	88fb      	ldrh	r3, [r7, #6]
 8002b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b24:	d113      	bne.n	8002b4e <HAL_GPIO_EXTI_Callback+0x3a>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 8002b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002b2a:	4819      	ldr	r0, [pc, #100]	; (8002b90 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002b2c:	f000 fb7c 	bl	8003228 <HAL_GPIO_ReadPin>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d105      	bne.n	8002b42 <HAL_GPIO_EXTI_Callback+0x2e>
            encoder3_count++;
 8002b36:	4b17      	ldr	r3, [pc, #92]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	4a15      	ldr	r2, [pc, #84]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b3e:	6013      	str	r3, [r2, #0]
 8002b40:	e01c      	b.n	8002b7c <HAL_GPIO_EXTI_Callback+0x68>
        else
            encoder3_count--;
 8002b42:	4b14      	ldr	r3, [pc, #80]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <HAL_GPIO_EXTI_Callback+0x80>)
 8002b4a:	6013      	str	r3, [r2, #0]
 8002b4c:	e016      	b.n	8002b7c <HAL_GPIO_EXTI_Callback+0x68>
    }

    else if (GPIO_Pin == GPIO_PIN_14) { // ENC4 - Canal A
 8002b4e:	88fb      	ldrh	r3, [r7, #6]
 8002b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b54:	d112      	bne.n	8002b7c <HAL_GPIO_EXTI_Callback+0x68>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 8002b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b5a:	480d      	ldr	r0, [pc, #52]	; (8002b90 <HAL_GPIO_EXTI_Callback+0x7c>)
 8002b5c:	f000 fb64 	bl	8003228 <HAL_GPIO_ReadPin>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d105      	bne.n	8002b72 <HAL_GPIO_EXTI_Callback+0x5e>
            encoder4_count++;
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x84>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	4a0a      	ldr	r2, [pc, #40]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x84>)
 8002b6e:	6013      	str	r3, [r2, #0]
 8002b70:	e004      	b.n	8002b7c <HAL_GPIO_EXTI_Callback+0x68>
        else
            encoder4_count--;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x84>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	4a07      	ldr	r2, [pc, #28]	; (8002b98 <HAL_GPIO_EXTI_Callback+0x84>)
 8002b7a:	6013      	str	r3, [r2, #0]
    }

    if (GPIO_Pin == GPIO_PIN_2)
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d102      	bne.n	8002b88 <HAL_GPIO_EXTI_Callback+0x74>
    {
        mpu_data_ready = 1;  // Activa la bandera cuando hay nueva lectura
 8002b82:	4b06      	ldr	r3, [pc, #24]	; (8002b9c <HAL_GPIO_EXTI_Callback+0x88>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	701a      	strb	r2, [r3, #0]
    }
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	40010c00 	.word	0x40010c00
 8002b94:	2000011c 	.word	0x2000011c
 8002b98:	20000120 	.word	0x20000120
 8002b9c:	20000260 	.word	0x20000260

08002ba0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ba4:	bf00      	nop
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr

08002bac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bac:	f7ff fff8 	bl	8002ba0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bb0:	480b      	ldr	r0, [pc, #44]	; (8002be0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002bb2:	490c      	ldr	r1, [pc, #48]	; (8002be4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002bb4:	4a0c      	ldr	r2, [pc, #48]	; (8002be8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bb8:	e002      	b.n	8002bc0 <LoopCopyDataInit>

08002bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bbe:	3304      	adds	r3, #4

08002bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002bc4:	d3f9      	bcc.n	8002bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002bc6:	4a09      	ldr	r2, [pc, #36]	; (8002bec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002bc8:	4c09      	ldr	r4, [pc, #36]	; (8002bf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002bcc:	e001      	b.n	8002bd2 <LoopFillZerobss>

08002bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002bd0:	3204      	adds	r2, #4

08002bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002bd4:	d3fb      	bcc.n	8002bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002bd6:	f003 f9a5 	bl	8005f24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002bda:	f7fe fa09 	bl	8000ff0 <main>
  bx lr
 8002bde:	4770      	bx	lr
  ldr r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002be4:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002be8:	08006004 	.word	0x08006004
  ldr r2, =_sbss
 8002bec:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002bf0:	200002f8 	.word	0x200002f8

08002bf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002bf4:	e7fe      	b.n	8002bf4 <ADC1_2_IRQHandler>
	...

08002bf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bfc:	4b08      	ldr	r3, [pc, #32]	; (8002c20 <HAL_Init+0x28>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a07      	ldr	r2, [pc, #28]	; (8002c20 <HAL_Init+0x28>)
 8002c02:	f043 0310 	orr.w	r3, r3, #16
 8002c06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c08:	2003      	movs	r0, #3
 8002c0a:	f000 f947 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c0e:	200f      	movs	r0, #15
 8002c10:	f000 f808 	bl	8002c24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c14:	f7ff fdcc 	bl	80027b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	bd80      	pop	{r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	40022000 	.word	0x40022000

08002c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c2c:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_InitTick+0x54>)
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	4b12      	ldr	r3, [pc, #72]	; (8002c7c <HAL_InitTick+0x58>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	4619      	mov	r1, r3
 8002c36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f95f 	bl	8002f06 <HAL_SYSTICK_Config>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e00e      	b.n	8002c70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b0f      	cmp	r3, #15
 8002c56:	d80a      	bhi.n	8002c6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c58:	2200      	movs	r2, #0
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c60:	f000 f927 	bl	8002eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c64:	4a06      	ldr	r2, [pc, #24]	; (8002c80 <HAL_InitTick+0x5c>)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	e000      	b.n	8002c70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3708      	adds	r7, #8
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	2000001c 	.word	0x2000001c
 8002c7c:	20000024 	.word	0x20000024
 8002c80:	20000020 	.word	0x20000020

08002c84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <HAL_IncTick+0x1c>)
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4413      	add	r3, r2
 8002c94:	4a03      	ldr	r2, [pc, #12]	; (8002ca4 <HAL_IncTick+0x20>)
 8002c96:	6013      	str	r3, [r2, #0]
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	20000024 	.word	0x20000024
 8002ca4:	200002f4 	.word	0x200002f4

08002ca8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cac:	4b02      	ldr	r3, [pc, #8]	; (8002cb8 <HAL_GetTick+0x10>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bc80      	pop	{r7}
 8002cb6:	4770      	bx	lr
 8002cb8:	200002f4 	.word	0x200002f4

08002cbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b084      	sub	sp, #16
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_GetTick>
 8002cc8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd4:	d005      	beq.n	8002ce2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cd6:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <HAL_Delay+0x44>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4413      	add	r3, r2
 8002ce0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ce2:	bf00      	nop
 8002ce4:	f7ff ffe0 	bl	8002ca8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d8f7      	bhi.n	8002ce4 <HAL_Delay+0x28>
  {
  }
}
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000024 	.word	0x20000024

08002d04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b085      	sub	sp, #20
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f003 0307 	and.w	r3, r3, #7
 8002d12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d14:	4b0c      	ldr	r3, [pc, #48]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d16:	68db      	ldr	r3, [r3, #12]
 8002d18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d20:	4013      	ands	r3, r2
 8002d22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d36:	4a04      	ldr	r2, [pc, #16]	; (8002d48 <__NVIC_SetPriorityGrouping+0x44>)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	60d3      	str	r3, [r2, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000ed00 	.word	0xe000ed00

08002d4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d50:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <__NVIC_GetPriorityGrouping+0x18>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	0a1b      	lsrs	r3, r3, #8
 8002d56:	f003 0307 	and.w	r3, r3, #7
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	4603      	mov	r3, r0
 8002d70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	db0b      	blt.n	8002d92 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d7a:	79fb      	ldrb	r3, [r7, #7]
 8002d7c:	f003 021f 	and.w	r2, r3, #31
 8002d80:	4906      	ldr	r1, [pc, #24]	; (8002d9c <__NVIC_EnableIRQ+0x34>)
 8002d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d86:	095b      	lsrs	r3, r3, #5
 8002d88:	2001      	movs	r0, #1
 8002d8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d92:	bf00      	nop
 8002d94:	370c      	adds	r7, #12
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bc80      	pop	{r7}
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr
 8002dea:	bf00      	nop
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
         );
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bc80      	pop	{r7}
 8002e56:	4770      	bx	lr

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff90 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff2d 	bl	8002d04 <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec4:	f7ff ff42 	bl	8002d4c <__NVIC_GetPriorityGrouping>
 8002ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	68b9      	ldr	r1, [r7, #8]
 8002ece:	6978      	ldr	r0, [r7, #20]
 8002ed0:	f7ff ff90 	bl	8002df4 <NVIC_EncodePriority>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eda:	4611      	mov	r1, r2
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff5f 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ee2:	bf00      	nop
 8002ee4:	3718      	adds	r7, #24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7ff ff35 	bl	8002d68 <__NVIC_EnableIRQ>
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f7ff ffa2 	bl	8002e58 <SysTick_Config>
 8002f14:	4603      	mov	r3, r0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
	...

08002f20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b08b      	sub	sp, #44	; 0x2c
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	e169      	b.n	8003208 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f34:	2201      	movs	r2, #1
 8002f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	f040 8158 	bne.w	8003202 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	4a9a      	ldr	r2, [pc, #616]	; (80031c0 <HAL_GPIO_Init+0x2a0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d05e      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f5c:	4a98      	ldr	r2, [pc, #608]	; (80031c0 <HAL_GPIO_Init+0x2a0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d875      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f62:	4a98      	ldr	r2, [pc, #608]	; (80031c4 <HAL_GPIO_Init+0x2a4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d058      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f68:	4a96      	ldr	r2, [pc, #600]	; (80031c4 <HAL_GPIO_Init+0x2a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d86f      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f6e:	4a96      	ldr	r2, [pc, #600]	; (80031c8 <HAL_GPIO_Init+0x2a8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d052      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f74:	4a94      	ldr	r2, [pc, #592]	; (80031c8 <HAL_GPIO_Init+0x2a8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d869      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f7a:	4a94      	ldr	r2, [pc, #592]	; (80031cc <HAL_GPIO_Init+0x2ac>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d04c      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f80:	4a92      	ldr	r2, [pc, #584]	; (80031cc <HAL_GPIO_Init+0x2ac>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d863      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f86:	4a92      	ldr	r2, [pc, #584]	; (80031d0 <HAL_GPIO_Init+0x2b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d046      	beq.n	800301a <HAL_GPIO_Init+0xfa>
 8002f8c:	4a90      	ldr	r2, [pc, #576]	; (80031d0 <HAL_GPIO_Init+0x2b0>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d85d      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f92:	2b12      	cmp	r3, #18
 8002f94:	d82a      	bhi.n	8002fec <HAL_GPIO_Init+0xcc>
 8002f96:	2b12      	cmp	r3, #18
 8002f98:	d859      	bhi.n	800304e <HAL_GPIO_Init+0x12e>
 8002f9a:	a201      	add	r2, pc, #4	; (adr r2, 8002fa0 <HAL_GPIO_Init+0x80>)
 8002f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa0:	0800301b 	.word	0x0800301b
 8002fa4:	08002ff5 	.word	0x08002ff5
 8002fa8:	08003007 	.word	0x08003007
 8002fac:	08003049 	.word	0x08003049
 8002fb0:	0800304f 	.word	0x0800304f
 8002fb4:	0800304f 	.word	0x0800304f
 8002fb8:	0800304f 	.word	0x0800304f
 8002fbc:	0800304f 	.word	0x0800304f
 8002fc0:	0800304f 	.word	0x0800304f
 8002fc4:	0800304f 	.word	0x0800304f
 8002fc8:	0800304f 	.word	0x0800304f
 8002fcc:	0800304f 	.word	0x0800304f
 8002fd0:	0800304f 	.word	0x0800304f
 8002fd4:	0800304f 	.word	0x0800304f
 8002fd8:	0800304f 	.word	0x0800304f
 8002fdc:	0800304f 	.word	0x0800304f
 8002fe0:	0800304f 	.word	0x0800304f
 8002fe4:	08002ffd 	.word	0x08002ffd
 8002fe8:	08003011 	.word	0x08003011
 8002fec:	4a79      	ldr	r2, [pc, #484]	; (80031d4 <HAL_GPIO_Init+0x2b4>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d013      	beq.n	800301a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ff2:	e02c      	b.n	800304e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	623b      	str	r3, [r7, #32]
          break;
 8002ffa:	e029      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	3304      	adds	r3, #4
 8003002:	623b      	str	r3, [r7, #32]
          break;
 8003004:	e024      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	3308      	adds	r3, #8
 800300c:	623b      	str	r3, [r7, #32]
          break;
 800300e:	e01f      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	330c      	adds	r3, #12
 8003016:	623b      	str	r3, [r7, #32]
          break;
 8003018:	e01a      	b.n	8003050 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003022:	2304      	movs	r3, #4
 8003024:	623b      	str	r3, [r7, #32]
          break;
 8003026:	e013      	b.n	8003050 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d105      	bne.n	800303c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003030:	2308      	movs	r3, #8
 8003032:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	611a      	str	r2, [r3, #16]
          break;
 800303a:	e009      	b.n	8003050 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800303c:	2308      	movs	r3, #8
 800303e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	615a      	str	r2, [r3, #20]
          break;
 8003046:	e003      	b.n	8003050 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003048:	2300      	movs	r3, #0
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e000      	b.n	8003050 <HAL_GPIO_Init+0x130>
          break;
 800304e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2bff      	cmp	r3, #255	; 0xff
 8003054:	d801      	bhi.n	800305a <HAL_GPIO_Init+0x13a>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	e001      	b.n	800305e <HAL_GPIO_Init+0x13e>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3304      	adds	r3, #4
 800305e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d802      	bhi.n	800306c <HAL_GPIO_Init+0x14c>
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	e002      	b.n	8003072 <HAL_GPIO_Init+0x152>
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	3b08      	subs	r3, #8
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	210f      	movs	r1, #15
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	fa01 f303 	lsl.w	r3, r1, r3
 8003080:	43db      	mvns	r3, r3
 8003082:	401a      	ands	r2, r3
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	fa01 f303 	lsl.w	r3, r1, r3
 800308c:	431a      	orrs	r2, r3
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	f000 80b1 	beq.w	8003202 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030a0:	4b4d      	ldr	r3, [pc, #308]	; (80031d8 <HAL_GPIO_Init+0x2b8>)
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	4a4c      	ldr	r2, [pc, #304]	; (80031d8 <HAL_GPIO_Init+0x2b8>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6193      	str	r3, [r2, #24]
 80030ac:	4b4a      	ldr	r3, [pc, #296]	; (80031d8 <HAL_GPIO_Init+0x2b8>)
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030b8:	4a48      	ldr	r2, [pc, #288]	; (80031dc <HAL_GPIO_Init+0x2bc>)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	3302      	adds	r3, #2
 80030c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	220f      	movs	r2, #15
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	4013      	ands	r3, r2
 80030da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a40      	ldr	r2, [pc, #256]	; (80031e0 <HAL_GPIO_Init+0x2c0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d013      	beq.n	800310c <HAL_GPIO_Init+0x1ec>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a3f      	ldr	r2, [pc, #252]	; (80031e4 <HAL_GPIO_Init+0x2c4>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00d      	beq.n	8003108 <HAL_GPIO_Init+0x1e8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a3e      	ldr	r2, [pc, #248]	; (80031e8 <HAL_GPIO_Init+0x2c8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <HAL_GPIO_Init+0x1e4>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a3d      	ldr	r2, [pc, #244]	; (80031ec <HAL_GPIO_Init+0x2cc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d101      	bne.n	8003100 <HAL_GPIO_Init+0x1e0>
 80030fc:	2303      	movs	r3, #3
 80030fe:	e006      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 8003100:	2304      	movs	r3, #4
 8003102:	e004      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 8003104:	2302      	movs	r3, #2
 8003106:	e002      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <HAL_GPIO_Init+0x1ee>
 800310c:	2300      	movs	r3, #0
 800310e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003110:	f002 0203 	and.w	r2, r2, #3
 8003114:	0092      	lsls	r2, r2, #2
 8003116:	4093      	lsls	r3, r2
 8003118:	68fa      	ldr	r2, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800311e:	492f      	ldr	r1, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x2bc>)
 8003120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003122:	089b      	lsrs	r3, r3, #2
 8003124:	3302      	adds	r3, #2
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d006      	beq.n	8003146 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003138:	4b2d      	ldr	r3, [pc, #180]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	492c      	ldr	r1, [pc, #176]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
 8003144:	e006      	b.n	8003154 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003146:	4b2a      	ldr	r3, [pc, #168]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003148:	689a      	ldr	r2, [r3, #8]
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	43db      	mvns	r3, r3
 800314e:	4928      	ldr	r1, [pc, #160]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003150:	4013      	ands	r3, r2
 8003152:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d006      	beq.n	800316e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003160:	4b23      	ldr	r3, [pc, #140]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	4922      	ldr	r1, [pc, #136]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	60cb      	str	r3, [r1, #12]
 800316c:	e006      	b.n	800317c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800316e:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003170:	68da      	ldr	r2, [r3, #12]
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	43db      	mvns	r3, r3
 8003176:	491e      	ldr	r1, [pc, #120]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003178:	4013      	ands	r3, r2
 800317a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003184:	2b00      	cmp	r3, #0
 8003186:	d006      	beq.n	8003196 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003188:	4b19      	ldr	r3, [pc, #100]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800318a:	685a      	ldr	r2, [r3, #4]
 800318c:	4918      	ldr	r1, [pc, #96]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	e006      	b.n	80031a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003196:	4b16      	ldr	r3, [pc, #88]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 8003198:	685a      	ldr	r2, [r3, #4]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	43db      	mvns	r3, r3
 800319e:	4914      	ldr	r1, [pc, #80]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 80031a0:	4013      	ands	r3, r2
 80031a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d021      	beq.n	80031f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031b0:	4b0f      	ldr	r3, [pc, #60]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	490e      	ldr	r1, [pc, #56]	; (80031f0 <HAL_GPIO_Init+0x2d0>)
 80031b6:	69bb      	ldr	r3, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	600b      	str	r3, [r1, #0]
 80031bc:	e021      	b.n	8003202 <HAL_GPIO_Init+0x2e2>
 80031be:	bf00      	nop
 80031c0:	10320000 	.word	0x10320000
 80031c4:	10310000 	.word	0x10310000
 80031c8:	10220000 	.word	0x10220000
 80031cc:	10210000 	.word	0x10210000
 80031d0:	10120000 	.word	0x10120000
 80031d4:	10110000 	.word	0x10110000
 80031d8:	40021000 	.word	0x40021000
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40010800 	.word	0x40010800
 80031e4:	40010c00 	.word	0x40010c00
 80031e8:	40011000 	.word	0x40011000
 80031ec:	40011400 	.word	0x40011400
 80031f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_GPIO_Init+0x304>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4909      	ldr	r1, [pc, #36]	; (8003224 <HAL_GPIO_Init+0x304>)
 80031fe:	4013      	ands	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	3301      	adds	r3, #1
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	fa22 f303 	lsr.w	r3, r2, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	f47f ae8e 	bne.w	8002f34 <HAL_GPIO_Init+0x14>
  }
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	372c      	adds	r7, #44	; 0x2c
 800321e:	46bd      	mov	sp, r7
 8003220:	bc80      	pop	{r7}
 8003222:	4770      	bx	lr
 8003224:	40010400 	.word	0x40010400

08003228 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	887b      	ldrh	r3, [r7, #2]
 800323a:	4013      	ands	r3, r2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d002      	beq.n	8003246 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
 8003244:	e001      	b.n	800324a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003246:	2300      	movs	r3, #0
 8003248:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800324a:	7bfb      	ldrb	r3, [r7, #15]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3714      	adds	r7, #20
 8003250:	46bd      	mov	sp, r7
 8003252:	bc80      	pop	{r7}
 8003254:	4770      	bx	lr

08003256 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	807b      	strh	r3, [r7, #2]
 8003262:	4613      	mov	r3, r2
 8003264:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003266:	787b      	ldrb	r3, [r7, #1]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326c:	887a      	ldrh	r2, [r7, #2]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003272:	e003      	b.n	800327c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003274:	887b      	ldrh	r3, [r7, #2]
 8003276:	041a      	lsls	r2, r3, #16
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	611a      	str	r2, [r3, #16]
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	bc80      	pop	{r7}
 8003284:	4770      	bx	lr

08003286 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003286:	b480      	push	{r7}
 8003288:	b085      	sub	sp, #20
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	460b      	mov	r3, r1
 8003290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003298:	887a      	ldrh	r2, [r7, #2]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4013      	ands	r3, r2
 800329e:	041a      	lsls	r2, r3, #16
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43d9      	mvns	r1, r3
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	400b      	ands	r3, r1
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]
}
 80032ae:	bf00      	nop
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80032c2:	4b08      	ldr	r3, [pc, #32]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032c4:	695a      	ldr	r2, [r3, #20]
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d006      	beq.n	80032dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80032ce:	4a05      	ldr	r2, [pc, #20]	; (80032e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032d0:	88fb      	ldrh	r3, [r7, #6]
 80032d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032d4:	88fb      	ldrh	r3, [r7, #6]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fc1c 	bl	8002b14 <HAL_GPIO_EXTI_Callback>
  }
}
 80032dc:	bf00      	nop
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40010400 	.word	0x40010400

080032e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e12b      	b.n	8003552 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fa80 	bl	8002814 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2224      	movs	r2, #36	; 0x24
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f022 0201 	bic.w	r2, r2, #1
 800332a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800333a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800334a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800334c:	f001 fd58 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8003350:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	4a81      	ldr	r2, [pc, #516]	; (800355c <HAL_I2C_Init+0x274>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d807      	bhi.n	800336c <HAL_I2C_Init+0x84>
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	4a80      	ldr	r2, [pc, #512]	; (8003560 <HAL_I2C_Init+0x278>)
 8003360:	4293      	cmp	r3, r2
 8003362:	bf94      	ite	ls
 8003364:	2301      	movls	r3, #1
 8003366:	2300      	movhi	r3, #0
 8003368:	b2db      	uxtb	r3, r3
 800336a:	e006      	b.n	800337a <HAL_I2C_Init+0x92>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_I2C_Init+0x27c>)
 8003370:	4293      	cmp	r3, r2
 8003372:	bf94      	ite	ls
 8003374:	2301      	movls	r3, #1
 8003376:	2300      	movhi	r3, #0
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b00      	cmp	r3, #0
 800337c:	d001      	beq.n	8003382 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e0e7      	b.n	8003552 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4a78      	ldr	r2, [pc, #480]	; (8003568 <HAL_I2C_Init+0x280>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0c9b      	lsrs	r3, r3, #18
 800338c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68ba      	ldr	r2, [r7, #8]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	4a6a      	ldr	r2, [pc, #424]	; (800355c <HAL_I2C_Init+0x274>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d802      	bhi.n	80033bc <HAL_I2C_Init+0xd4>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	3301      	adds	r3, #1
 80033ba:	e009      	b.n	80033d0 <HAL_I2C_Init+0xe8>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a69      	ldr	r2, [pc, #420]	; (800356c <HAL_I2C_Init+0x284>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	099b      	lsrs	r3, r3, #6
 80033ce:	3301      	adds	r3, #1
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	6812      	ldr	r2, [r2, #0]
 80033d4:	430b      	orrs	r3, r1
 80033d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	495c      	ldr	r1, [pc, #368]	; (800355c <HAL_I2C_Init+0x274>)
 80033ec:	428b      	cmp	r3, r1
 80033ee:	d819      	bhi.n	8003424 <HAL_I2C_Init+0x13c>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e59      	subs	r1, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80033fe:	1c59      	adds	r1, r3, #1
 8003400:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003404:	400b      	ands	r3, r1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <HAL_I2C_Init+0x138>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	1e59      	subs	r1, r3, #1
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	fbb1 f3f3 	udiv	r3, r1, r3
 8003418:	3301      	adds	r3, #1
 800341a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800341e:	e051      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003420:	2304      	movs	r3, #4
 8003422:	e04f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d111      	bne.n	8003450 <HAL_I2C_Init+0x168>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	1e58      	subs	r0, r3, #1
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6859      	ldr	r1, [r3, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	440b      	add	r3, r1
 800343a:	fbb0 f3f3 	udiv	r3, r0, r3
 800343e:	3301      	adds	r3, #1
 8003440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	e012      	b.n	8003476 <HAL_I2C_Init+0x18e>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e58      	subs	r0, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	0099      	lsls	r1, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	fbb0 f3f3 	udiv	r3, r0, r3
 8003466:	3301      	adds	r3, #1
 8003468:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346c:	2b00      	cmp	r3, #0
 800346e:	bf0c      	ite	eq
 8003470:	2301      	moveq	r3, #1
 8003472:	2300      	movne	r3, #0
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <HAL_I2C_Init+0x196>
 800347a:	2301      	movs	r3, #1
 800347c:	e022      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10e      	bne.n	80034a4 <HAL_I2C_Init+0x1bc>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	1e58      	subs	r0, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6859      	ldr	r1, [r3, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	440b      	add	r3, r1
 8003494:	fbb0 f3f3 	udiv	r3, r0, r3
 8003498:	3301      	adds	r3, #1
 800349a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800349e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a2:	e00f      	b.n	80034c4 <HAL_I2C_Init+0x1dc>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	1e58      	subs	r0, r3, #1
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	0099      	lsls	r1, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ba:	3301      	adds	r3, #1
 80034bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	6809      	ldr	r1, [r1, #0]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69da      	ldr	r2, [r3, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a1b      	ldr	r3, [r3, #32]
 80034de:	431a      	orrs	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	430a      	orrs	r2, r1
 80034e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	6911      	ldr	r1, [r2, #16]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	68d2      	ldr	r2, [r2, #12]
 80034fe:	4311      	orrs	r1, r2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	430b      	orrs	r3, r1
 8003506:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695a      	ldr	r2, [r3, #20]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	699b      	ldr	r3, [r3, #24]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	000186a0 	.word	0x000186a0
 8003560:	001e847f 	.word	0x001e847f
 8003564:	003d08ff 	.word	0x003d08ff
 8003568:	431bde83 	.word	0x431bde83
 800356c:	10624dd3 	.word	0x10624dd3

08003570 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	461a      	mov	r2, r3
 800357c:	460b      	mov	r3, r1
 800357e:	817b      	strh	r3, [r7, #10]
 8003580:	4613      	mov	r3, r2
 8003582:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003584:	f7ff fb90 	bl	8002ca8 <HAL_GetTick>
 8003588:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b20      	cmp	r3, #32
 8003594:	f040 80e0 	bne.w	8003758 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2319      	movs	r3, #25
 800359e:	2201      	movs	r2, #1
 80035a0:	4970      	ldr	r1, [pc, #448]	; (8003764 <HAL_I2C_Master_Transmit+0x1f4>)
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fe2e 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80035ae:	2302      	movs	r3, #2
 80035b0:	e0d3      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x50>
 80035bc:	2302      	movs	r3, #2
 80035be:	e0cc      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d007      	beq.n	80035e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f042 0201 	orr.w	r2, r2, #1
 80035e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2221      	movs	r2, #33	; 0x21
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2210      	movs	r2, #16
 8003602:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	893a      	ldrh	r2, [r7, #8]
 8003616:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4a50      	ldr	r2, [pc, #320]	; (8003768 <HAL_I2C_Master_Transmit+0x1f8>)
 8003626:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003628:	8979      	ldrh	r1, [r7, #10]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	6a3a      	ldr	r2, [r7, #32]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fc02 	bl	8003e38 <I2C_MasterRequestWrite>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e08d      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	613b      	str	r3, [r7, #16]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	613b      	str	r3, [r7, #16]
 8003652:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003654:	e066      	b.n	8003724 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	6a39      	ldr	r1, [r7, #32]
 800365a:	68f8      	ldr	r0, [r7, #12]
 800365c:	f000 feec 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00d      	beq.n	8003682 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	2b04      	cmp	r3, #4
 800366c:	d107      	bne.n	800367e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800367c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e06b      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003686:	781a      	ldrb	r2, [r3, #0]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	1c5a      	adds	r2, r3, #1
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	3b01      	subs	r3, #1
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036aa:	3b01      	subs	r3, #1
 80036ac:	b29a      	uxth	r2, r3
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	695b      	ldr	r3, [r3, #20]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b04      	cmp	r3, #4
 80036be:	d11b      	bne.n	80036f8 <HAL_I2C_Master_Transmit+0x188>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d017      	beq.n	80036f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036cc:	781a      	ldrb	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036f0:	3b01      	subs	r3, #1
 80036f2:	b29a      	uxth	r2, r3
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	6a39      	ldr	r1, [r7, #32]
 80036fc:	68f8      	ldr	r0, [r7, #12]
 80036fe:	f000 fee3 	bl	80044c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00d      	beq.n	8003724 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370c:	2b04      	cmp	r3, #4
 800370e:	d107      	bne.n	8003720 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e01a      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	d194      	bne.n	8003656 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800373a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	00100002 	.word	0x00100002
 8003768:	ffff0000 	.word	0xffff0000

0800376c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b08c      	sub	sp, #48	; 0x30
 8003770:	af02      	add	r7, sp, #8
 8003772:	60f8      	str	r0, [r7, #12]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	461a      	mov	r2, r3
 8003778:	460b      	mov	r3, r1
 800377a:	817b      	strh	r3, [r7, #10]
 800377c:	4613      	mov	r3, r2
 800377e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003784:	f7ff fa90 	bl	8002ca8 <HAL_GetTick>
 8003788:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b20      	cmp	r3, #32
 8003794:	f040 824b 	bne.w	8003c2e <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	2319      	movs	r3, #25
 800379e:	2201      	movs	r2, #1
 80037a0:	497f      	ldr	r1, [pc, #508]	; (80039a0 <HAL_I2C_Master_Receive+0x234>)
 80037a2:	68f8      	ldr	r0, [r7, #12]
 80037a4:	f000 fd2e 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 80037a8:	4603      	mov	r3, r0
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d001      	beq.n	80037b2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	e23e      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d101      	bne.n	80037c0 <HAL_I2C_Master_Receive+0x54>
 80037bc:	2302      	movs	r3, #2
 80037be:	e237      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2201      	movs	r2, #1
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d007      	beq.n	80037e6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f042 0201 	orr.w	r2, r2, #1
 80037e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2222      	movs	r2, #34	; 0x22
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2210      	movs	r2, #16
 8003802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	893a      	ldrh	r2, [r7, #8]
 8003816:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800381c:	b29a      	uxth	r2, r3
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	4a5f      	ldr	r2, [pc, #380]	; (80039a4 <HAL_I2C_Master_Receive+0x238>)
 8003826:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003828:	8979      	ldrh	r1, [r7, #10]
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fb84 	bl	8003f3c <I2C_MasterRequestRead>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e1f8      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003842:	2b00      	cmp	r3, #0
 8003844:	d113      	bne.n	800386e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003846:	2300      	movs	r3, #0
 8003848:	61fb      	str	r3, [r7, #28]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	e1cc      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003872:	2b01      	cmp	r3, #1
 8003874:	d11e      	bne.n	80038b4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003884:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003886:	b672      	cpsid	i
}
 8003888:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800388a:	2300      	movs	r3, #0
 800388c:	61bb      	str	r3, [r7, #24]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	61bb      	str	r3, [r7, #24]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	61bb      	str	r3, [r7, #24]
 800389e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038b0:	b662      	cpsie	i
}
 80038b2:	e035      	b.n	8003920 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d11e      	bne.n	80038fa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80038cc:	b672      	cpsid	i
}
 80038ce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d0:	2300      	movs	r3, #0
 80038d2:	617b      	str	r3, [r7, #20]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	699b      	ldr	r3, [r3, #24]
 80038e2:	617b      	str	r3, [r7, #20]
 80038e4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038f4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80038f6:	b662      	cpsie	i
}
 80038f8:	e012      	b.n	8003920 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800390a:	2300      	movs	r3, #0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	613b      	str	r3, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	613b      	str	r3, [r7, #16]
 800391e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003920:	e172      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003926:	2b03      	cmp	r3, #3
 8003928:	f200 811f 	bhi.w	8003b6a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003930:	2b01      	cmp	r3, #1
 8003932:	d123      	bne.n	800397c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fe0d 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e173      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	691a      	ldr	r2, [r3, #16]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800395a:	1c5a      	adds	r2, r3, #1
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003964:	3b01      	subs	r3, #1
 8003966:	b29a      	uxth	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003970:	b29b      	uxth	r3, r3
 8003972:	3b01      	subs	r3, #1
 8003974:	b29a      	uxth	r2, r3
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	855a      	strh	r2, [r3, #42]	; 0x2a
 800397a:	e145      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003980:	2b02      	cmp	r3, #2
 8003982:	d152      	bne.n	8003a2a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	2200      	movs	r2, #0
 800398c:	4906      	ldr	r1, [pc, #24]	; (80039a8 <HAL_I2C_Master_Receive+0x23c>)
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f000 fc38 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d008      	beq.n	80039ac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e148      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
 800399e:	bf00      	nop
 80039a0:	00100002 	.word	0x00100002
 80039a4:	ffff0000 	.word	0xffff0000
 80039a8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80039ac:	b672      	cpsid	i
}
 80039ae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691a      	ldr	r2, [r3, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039dc:	3b01      	subs	r3, #1
 80039de:	b29a      	uxth	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b01      	subs	r3, #1
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80039f2:	b662      	cpsie	i
}
 80039f4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a28:	e0ee      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	9300      	str	r3, [sp, #0]
 8003a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a30:	2200      	movs	r2, #0
 8003a32:	4981      	ldr	r1, [pc, #516]	; (8003c38 <HAL_I2C_Master_Receive+0x4cc>)
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fbe5 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e0f5      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a54:	b672      	cpsid	i
}
 8003a56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	b2d2      	uxtb	r2, r2
 8003a64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	3b01      	subs	r3, #1
 8003a84:	b29a      	uxth	r2, r3
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003a8a:	4b6c      	ldr	r3, [pc, #432]	; (8003c3c <HAL_I2C_Master_Receive+0x4d0>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	08db      	lsrs	r3, r3, #3
 8003a90:	4a6b      	ldr	r2, [pc, #428]	; (8003c40 <HAL_I2C_Master_Receive+0x4d4>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a1a      	lsrs	r2, r3, #8
 8003a98:	4613      	mov	r3, r2
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	4413      	add	r3, r2
 8003a9e:	00da      	lsls	r2, r3, #3
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003aa4:	6a3b      	ldr	r3, [r7, #32]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003aaa:	6a3b      	ldr	r3, [r7, #32]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d118      	bne.n	8003ae2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aca:	f043 0220 	orr.w	r2, r3, #32
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003ad2:	b662      	cpsie	i
}
 8003ad4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e0a6      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d1d9      	bne.n	8003aa4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	681a      	ldr	r2, [r3, #0]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003afe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691a      	ldr	r2, [r3, #16]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0a:	b2d2      	uxtb	r2, r2
 8003b0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	b29a      	uxth	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	3b01      	subs	r3, #1
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b32:	b662      	cpsie	i
}
 8003b34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	1c5a      	adds	r2, r3, #1
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b52:	3b01      	subs	r3, #1
 8003b54:	b29a      	uxth	r2, r3
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b68:	e04e      	b.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b6e:	68f8      	ldr	r0, [r7, #12]
 8003b70:	f000 fcf2 	bl	8004558 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e058      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f003 0304 	and.w	r3, r3, #4
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d124      	bne.n	8003c08 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc2:	2b03      	cmp	r3, #3
 8003bc4:	d107      	bne.n	8003bd6 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	691a      	ldr	r2, [r3, #16]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	3b01      	subs	r3, #1
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f47f ae88 	bne.w	8003922 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3728      	adds	r7, #40	; 0x28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	00010004 	.word	0x00010004
 8003c3c:	2000001c 	.word	0x2000001c
 8003c40:	14f8b589 	.word	0x14f8b589

08003c44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b088      	sub	sp, #32
 8003c48:	af02      	add	r7, sp, #8
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	461a      	mov	r2, r3
 8003c52:	4603      	mov	r3, r0
 8003c54:	817b      	strh	r3, [r7, #10]
 8003c56:	460b      	mov	r3, r1
 8003c58:	813b      	strh	r3, [r7, #8]
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003c5e:	f7ff f823 	bl	8002ca8 <HAL_GetTick>
 8003c62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	f040 80d9 	bne.w	8003e24 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	2319      	movs	r3, #25
 8003c78:	2201      	movs	r2, #1
 8003c7a:	496d      	ldr	r1, [pc, #436]	; (8003e30 <HAL_I2C_Mem_Write+0x1ec>)
 8003c7c:	68f8      	ldr	r0, [r7, #12]
 8003c7e:	f000 fac1 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e0cc      	b.n	8003e26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c92:	2b01      	cmp	r3, #1
 8003c94:	d101      	bne.n	8003c9a <HAL_I2C_Mem_Write+0x56>
 8003c96:	2302      	movs	r3, #2
 8003c98:	e0c5      	b.n	8003e26 <HAL_I2C_Mem_Write+0x1e2>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d007      	beq.n	8003cc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2221      	movs	r2, #33	; 0x21
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2240      	movs	r2, #64	; 0x40
 8003cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6a3a      	ldr	r2, [r7, #32]
 8003cea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	4a4d      	ldr	r2, [pc, #308]	; (8003e34 <HAL_I2C_Mem_Write+0x1f0>)
 8003d00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d02:	88f8      	ldrh	r0, [r7, #6]
 8003d04:	893a      	ldrh	r2, [r7, #8]
 8003d06:	8979      	ldrh	r1, [r7, #10]
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4603      	mov	r3, r0
 8003d12:	68f8      	ldr	r0, [r7, #12]
 8003d14:	f000 f9e0 	bl	80040d8 <I2C_RequestMemoryWrite>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d052      	beq.n	8003dc4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e081      	b.n	8003e26 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d22:	697a      	ldr	r2, [r7, #20]
 8003d24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f000 fb86 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00d      	beq.n	8003d4e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d107      	bne.n	8003d4a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e06b      	b.n	8003e26 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	781a      	ldrb	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	1c5a      	adds	r2, r3, #1
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d68:	3b01      	subs	r3, #1
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	3b01      	subs	r3, #1
 8003d78:	b29a      	uxth	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	2b04      	cmp	r3, #4
 8003d8a:	d11b      	bne.n	8003dc4 <HAL_I2C_Mem_Write+0x180>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d017      	beq.n	8003dc4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d98:	781a      	ldrb	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	1c5a      	adds	r2, r3, #1
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	3b01      	subs	r3, #1
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1aa      	bne.n	8003d22 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003dcc:	697a      	ldr	r2, [r7, #20]
 8003dce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 fb79 	bl	80044c8 <I2C_WaitOnBTFFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00d      	beq.n	8003df8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d107      	bne.n	8003df4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003df2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e016      	b.n	8003e26 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2220      	movs	r2, #32
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003e20:	2300      	movs	r3, #0
 8003e22:	e000      	b.n	8003e26 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e24:	2302      	movs	r3, #2
  }
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	00100002 	.word	0x00100002
 8003e34:	ffff0000 	.word	0xffff0000

08003e38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	607a      	str	r2, [r7, #4]
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	460b      	mov	r3, r1
 8003e46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d006      	beq.n	8003e62 <I2C_MasterRequestWrite+0x2a>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d003      	beq.n	8003e62 <I2C_MasterRequestWrite+0x2a>
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e60:	d108      	bne.n	8003e74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e00b      	b.n	8003e8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d107      	bne.n	8003e8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	9300      	str	r3, [sp, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e98:	68f8      	ldr	r0, [r7, #12]
 8003e9a:	f000 f9b3 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00d      	beq.n	8003ec0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eb2:	d103      	bne.n	8003ebc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e035      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ec8:	d108      	bne.n	8003edc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eca:	897b      	ldrh	r3, [r7, #10]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	461a      	mov	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ed8:	611a      	str	r2, [r3, #16]
 8003eda:	e01b      	b.n	8003f14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003edc:	897b      	ldrh	r3, [r7, #10]
 8003ede:	11db      	asrs	r3, r3, #7
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	f003 0306 	and.w	r3, r3, #6
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f063 030f 	orn	r3, r3, #15
 8003eec:	b2da      	uxtb	r2, r3
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	490e      	ldr	r1, [pc, #56]	; (8003f34 <I2C_MasterRequestWrite+0xfc>)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 f9fc 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e010      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f0a:	897b      	ldrh	r3, [r7, #10]
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4907      	ldr	r1, [pc, #28]	; (8003f38 <I2C_MasterRequestWrite+0x100>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9ec 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3718      	adds	r7, #24
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	00010008 	.word	0x00010008
 8003f38:	00010002 	.word	0x00010002

08003f3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	607a      	str	r2, [r7, #4]
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003f60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b08      	cmp	r3, #8
 8003f66:	d006      	beq.n	8003f76 <I2C_MasterRequestRead+0x3a>
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d003      	beq.n	8003f76 <I2C_MasterRequestRead+0x3a>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003f74:	d108      	bne.n	8003f88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	e00b      	b.n	8003fa0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8c:	2b11      	cmp	r3, #17
 8003f8e:	d107      	bne.n	8003fa0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	9300      	str	r3, [sp, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 f929 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc6:	d103      	bne.n	8003fd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fd0:	2303      	movs	r3, #3
 8003fd2:	e079      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fdc:	d108      	bne.n	8003ff0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fde:	897b      	ldrh	r3, [r7, #10]
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	f043 0301 	orr.w	r3, r3, #1
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	611a      	str	r2, [r3, #16]
 8003fee:	e05f      	b.n	80040b0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ff0:	897b      	ldrh	r3, [r7, #10]
 8003ff2:	11db      	asrs	r3, r3, #7
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f003 0306 	and.w	r3, r3, #6
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	f063 030f 	orn	r3, r3, #15
 8004000:	b2da      	uxtb	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	687a      	ldr	r2, [r7, #4]
 800400c:	4930      	ldr	r1, [pc, #192]	; (80040d0 <I2C_MasterRequestRead+0x194>)
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f000 f972 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e054      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800401e:	897b      	ldrh	r3, [r7, #10]
 8004020:	b2da      	uxtb	r2, r3
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	4929      	ldr	r1, [pc, #164]	; (80040d4 <I2C_MasterRequestRead+0x198>)
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 f962 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e044      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403e:	2300      	movs	r3, #0
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	613b      	str	r3, [r7, #16]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	699b      	ldr	r3, [r3, #24]
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004062:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 f8c7 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00d      	beq.n	8004098 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408a:	d103      	bne.n	8004094 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e017      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004098:	897b      	ldrh	r3, [r7, #10]
 800409a:	11db      	asrs	r3, r3, #7
 800409c:	b2db      	uxtb	r3, r3
 800409e:	f003 0306 	and.w	r3, r3, #6
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	f063 030e 	orn	r3, r3, #14
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	4907      	ldr	r1, [pc, #28]	; (80040d4 <I2C_MasterRequestRead+0x198>)
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f91e 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	00010008 	.word	0x00010008
 80040d4:	00010002 	.word	0x00010002

080040d8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b088      	sub	sp, #32
 80040dc:	af02      	add	r7, sp, #8
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	4608      	mov	r0, r1
 80040e2:	4611      	mov	r1, r2
 80040e4:	461a      	mov	r2, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	817b      	strh	r3, [r7, #10]
 80040ea:	460b      	mov	r3, r1
 80040ec:	813b      	strh	r3, [r7, #8]
 80040ee:	4613      	mov	r3, r2
 80040f0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004100:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	2200      	movs	r2, #0
 800410a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f878 	bl	8004204 <I2C_WaitOnFlagUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00d      	beq.n	8004136 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004128:	d103      	bne.n	8004132 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004130:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e05f      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004136:	897b      	ldrh	r3, [r7, #10]
 8004138:	b2db      	uxtb	r3, r3
 800413a:	461a      	mov	r2, r3
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004144:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	6a3a      	ldr	r2, [r7, #32]
 800414a:	492d      	ldr	r1, [pc, #180]	; (8004200 <I2C_RequestMemoryWrite+0x128>)
 800414c:	68f8      	ldr	r0, [r7, #12]
 800414e:	f000 f8d3 	bl	80042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e04c      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800415c:	2300      	movs	r3, #0
 800415e:	617b      	str	r3, [r7, #20]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	695b      	ldr	r3, [r3, #20]
 8004166:	617b      	str	r3, [r7, #20]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	617b      	str	r3, [r7, #20]
 8004170:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	6a39      	ldr	r1, [r7, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 f95e 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00d      	beq.n	800419e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	2b04      	cmp	r3, #4
 8004188:	d107      	bne.n	800419a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004198:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e02b      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800419e:	88fb      	ldrh	r3, [r7, #6]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d105      	bne.n	80041b0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a4:	893b      	ldrh	r3, [r7, #8]
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	611a      	str	r2, [r3, #16]
 80041ae:	e021      	b.n	80041f4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	0a1b      	lsrs	r3, r3, #8
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	b2da      	uxtb	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	6a39      	ldr	r1, [r7, #32]
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 f938 	bl	8004438 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e005      	b.n	80041f6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ea:	893b      	ldrh	r3, [r7, #8]
 80041ec:	b2da      	uxtb	r2, r3
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	00010002 	.word	0x00010002

08004204 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b084      	sub	sp, #16
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004214:	e048      	b.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421c:	d044      	beq.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800421e:	f7fe fd43 	bl	8002ca8 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d302      	bcc.n	8004234 <I2C_WaitOnFlagUntilTimeout+0x30>
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d139      	bne.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10d      	bne.n	800425a <I2C_WaitOnFlagUntilTimeout+0x56>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	43da      	mvns	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf0c      	ite	eq
 8004250:	2301      	moveq	r3, #1
 8004252:	2300      	movne	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	461a      	mov	r2, r3
 8004258:	e00c      	b.n	8004274 <I2C_WaitOnFlagUntilTimeout+0x70>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	699b      	ldr	r3, [r3, #24]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf0c      	ite	eq
 800426c:	2301      	moveq	r3, #1
 800426e:	2300      	movne	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	461a      	mov	r2, r3
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	429a      	cmp	r2, r3
 8004278:	d116      	bne.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004294:	f043 0220 	orr.w	r2, r3, #32
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e023      	b.n	80042f0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	0c1b      	lsrs	r3, r3, #16
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d10d      	bne.n	80042ce <I2C_WaitOnFlagUntilTimeout+0xca>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695b      	ldr	r3, [r3, #20]
 80042b8:	43da      	mvns	r2, r3
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	e00c      	b.n	80042e8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	43da      	mvns	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	4013      	ands	r3, r2
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	bf0c      	ite	eq
 80042e0:	2301      	moveq	r3, #1
 80042e2:	2300      	movne	r3, #0
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	461a      	mov	r2, r3
 80042e8:	79fb      	ldrb	r3, [r7, #7]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d093      	beq.n	8004216 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ee:	2300      	movs	r3, #0
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004306:	e071      	b.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004316:	d123      	bne.n	8004360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004326:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004330:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2200      	movs	r2, #0
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434c:	f043 0204 	orr.w	r2, r3, #4
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	e067      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004366:	d041      	beq.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004368:	f7fe fc9e 	bl	8002ca8 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	429a      	cmp	r2, r3
 8004376:	d302      	bcc.n	800437e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d136      	bne.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	0c1b      	lsrs	r3, r3, #16
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b01      	cmp	r3, #1
 8004386:	d10c      	bne.n	80043a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	43da      	mvns	r2, r3
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4013      	ands	r3, r2
 8004394:	b29b      	uxth	r3, r3
 8004396:	2b00      	cmp	r3, #0
 8004398:	bf14      	ite	ne
 800439a:	2301      	movne	r3, #1
 800439c:	2300      	moveq	r3, #0
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	e00b      	b.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	699b      	ldr	r3, [r3, #24]
 80043a8:	43da      	mvns	r2, r3
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	bf14      	ite	ne
 80043b4:	2301      	movne	r3, #1
 80043b6:	2300      	moveq	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2200      	movs	r2, #0
 80043c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	f043 0220 	orr.w	r2, r3, #32
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e021      	b.n	8004430 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d10c      	bne.n	8004410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	43da      	mvns	r2, r3
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	4013      	ands	r3, r2
 8004402:	b29b      	uxth	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	bf14      	ite	ne
 8004408:	2301      	movne	r3, #1
 800440a:	2300      	moveq	r3, #0
 800440c:	b2db      	uxtb	r3, r3
 800440e:	e00b      	b.n	8004428 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f af6d 	bne.w	8004308 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800442e:	2300      	movs	r3, #0
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	60f8      	str	r0, [r7, #12]
 8004440:	60b9      	str	r1, [r7, #8]
 8004442:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004444:	e034      	b.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f8e3 	bl	8004612 <I2C_IsAcknowledgeFailed>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e034      	b.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800445c:	d028      	beq.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800445e:	f7fe fc23 	bl	8002ca8 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d302      	bcc.n	8004474 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d11d      	bne.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800447e:	2b80      	cmp	r3, #128	; 0x80
 8004480:	d016      	beq.n	80044b0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449c:	f043 0220 	orr.w	r2, r3, #32
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e007      	b.n	80044c0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044ba:	2b80      	cmp	r3, #128	; 0x80
 80044bc:	d1c3      	bne.n	8004446 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044d4:	e034      	b.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f000 f89b 	bl	8004612 <I2C_IsAcknowledgeFailed>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e034      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ec:	d028      	beq.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ee:	f7fe fbdb 	bl	8002ca8 <HAL_GetTick>
 80044f2:	4602      	mov	r2, r0
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad3      	subs	r3, r2, r3
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d302      	bcc.n	8004504 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d11d      	bne.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0304 	and.w	r3, r3, #4
 800450e:	2b04      	cmp	r3, #4
 8004510:	d016      	beq.n	8004540 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2220      	movs	r2, #32
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e007      	b.n	8004550 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	f003 0304 	and.w	r3, r3, #4
 800454a:	2b04      	cmp	r3, #4
 800454c:	d1c3      	bne.n	80044d6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b084      	sub	sp, #16
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004564:	e049      	b.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	695b      	ldr	r3, [r3, #20]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d119      	bne.n	80045a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f06f 0210 	mvn.w	r2, #16
 800457c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2220      	movs	r2, #32
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e030      	b.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a8:	f7fe fb7e 	bl	8002ca8 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d302      	bcc.n	80045be <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d11d      	bne.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d016      	beq.n	80045fa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2220      	movs	r2, #32
 80045d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e6:	f043 0220 	orr.w	r2, r3, #32
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e007      	b.n	800460a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	695b      	ldr	r3, [r3, #20]
 8004600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004604:	2b40      	cmp	r3, #64	; 0x40
 8004606:	d1ae      	bne.n	8004566 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004628:	d11b      	bne.n	8004662 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004632:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2220      	movs	r2, #32
 800463e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464e:	f043 0204 	orr.w	r2, r3, #4
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004662:	2300      	movs	r3, #0
}
 8004664:	4618      	mov	r0, r3
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr
	...

08004670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e26c      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8087 	beq.w	800479e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004690:	4b92      	ldr	r3, [pc, #584]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 030c 	and.w	r3, r3, #12
 8004698:	2b04      	cmp	r3, #4
 800469a:	d00c      	beq.n	80046b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800469c:	4b8f      	ldr	r3, [pc, #572]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b08      	cmp	r3, #8
 80046a6:	d112      	bne.n	80046ce <HAL_RCC_OscConfig+0x5e>
 80046a8:	4b8c      	ldr	r3, [pc, #560]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046b4:	d10b      	bne.n	80046ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046b6:	4b89      	ldr	r3, [pc, #548]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d06c      	beq.n	800479c <HAL_RCC_OscConfig+0x12c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d168      	bne.n	800479c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e246      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046d6:	d106      	bne.n	80046e6 <HAL_RCC_OscConfig+0x76>
 80046d8:	4b80      	ldr	r3, [pc, #512]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a7f      	ldr	r2, [pc, #508]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	6013      	str	r3, [r2, #0]
 80046e4:	e02e      	b.n	8004744 <HAL_RCC_OscConfig+0xd4>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d10c      	bne.n	8004708 <HAL_RCC_OscConfig+0x98>
 80046ee:	4b7b      	ldr	r3, [pc, #492]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a7a      	ldr	r2, [pc, #488]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046f8:	6013      	str	r3, [r2, #0]
 80046fa:	4b78      	ldr	r3, [pc, #480]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4a77      	ldr	r2, [pc, #476]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e01d      	b.n	8004744 <HAL_RCC_OscConfig+0xd4>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004710:	d10c      	bne.n	800472c <HAL_RCC_OscConfig+0xbc>
 8004712:	4b72      	ldr	r3, [pc, #456]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a71      	ldr	r2, [pc, #452]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	4b6f      	ldr	r3, [pc, #444]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6e      	ldr	r2, [pc, #440]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004728:	6013      	str	r3, [r2, #0]
 800472a:	e00b      	b.n	8004744 <HAL_RCC_OscConfig+0xd4>
 800472c:	4b6b      	ldr	r3, [pc, #428]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a6a      	ldr	r2, [pc, #424]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	4b68      	ldr	r3, [pc, #416]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a67      	ldr	r2, [pc, #412]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 800473e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004742:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d013      	beq.n	8004774 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe faac 	bl	8002ca8 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004754:	f7fe faa8 	bl	8002ca8 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b64      	cmp	r3, #100	; 0x64
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e1fa      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004766:	4b5d      	ldr	r3, [pc, #372]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d0f0      	beq.n	8004754 <HAL_RCC_OscConfig+0xe4>
 8004772:	e014      	b.n	800479e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004774:	f7fe fa98 	bl	8002ca8 <HAL_GetTick>
 8004778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800477a:	e008      	b.n	800478e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800477c:	f7fe fa94 	bl	8002ca8 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b64      	cmp	r3, #100	; 0x64
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e1e6      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478e:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f0      	bne.n	800477c <HAL_RCC_OscConfig+0x10c>
 800479a:	e000      	b.n	800479e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800479c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0302 	and.w	r3, r3, #2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d063      	beq.n	8004872 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047aa:	4b4c      	ldr	r3, [pc, #304]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f003 030c 	and.w	r3, r3, #12
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00b      	beq.n	80047ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80047b6:	4b49      	ldr	r3, [pc, #292]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f003 030c 	and.w	r3, r3, #12
 80047be:	2b08      	cmp	r3, #8
 80047c0:	d11c      	bne.n	80047fc <HAL_RCC_OscConfig+0x18c>
 80047c2:	4b46      	ldr	r3, [pc, #280]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d116      	bne.n	80047fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ce:	4b43      	ldr	r3, [pc, #268]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d005      	beq.n	80047e6 <HAL_RCC_OscConfig+0x176>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d001      	beq.n	80047e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e1ba      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e6:	4b3d      	ldr	r3, [pc, #244]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	00db      	lsls	r3, r3, #3
 80047f4:	4939      	ldr	r1, [pc, #228]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047fa:	e03a      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d020      	beq.n	8004846 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004804:	4b36      	ldr	r3, [pc, #216]	; (80048e0 <HAL_RCC_OscConfig+0x270>)
 8004806:	2201      	movs	r2, #1
 8004808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480a:	f7fe fa4d 	bl	8002ca8 <HAL_GetTick>
 800480e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004812:	f7fe fa49 	bl	8002ca8 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e19b      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004824:	4b2d      	ldr	r3, [pc, #180]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004830:	4b2a      	ldr	r3, [pc, #168]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	00db      	lsls	r3, r3, #3
 800483e:	4927      	ldr	r1, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004840:	4313      	orrs	r3, r2
 8004842:	600b      	str	r3, [r1, #0]
 8004844:	e015      	b.n	8004872 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004846:	4b26      	ldr	r3, [pc, #152]	; (80048e0 <HAL_RCC_OscConfig+0x270>)
 8004848:	2200      	movs	r2, #0
 800484a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800484c:	f7fe fa2c 	bl	8002ca8 <HAL_GetTick>
 8004850:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004852:	e008      	b.n	8004866 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004854:	f7fe fa28 	bl	8002ca8 <HAL_GetTick>
 8004858:	4602      	mov	r2, r0
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	2b02      	cmp	r3, #2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e17a      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004866:	4b1d      	ldr	r3, [pc, #116]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1f0      	bne.n	8004854 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d03a      	beq.n	80048f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d019      	beq.n	80048ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004886:	4b17      	ldr	r3, [pc, #92]	; (80048e4 <HAL_RCC_OscConfig+0x274>)
 8004888:	2201      	movs	r2, #1
 800488a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800488c:	f7fe fa0c 	bl	8002ca8 <HAL_GetTick>
 8004890:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004892:	e008      	b.n	80048a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004894:	f7fe fa08 	bl	8002ca8 <HAL_GetTick>
 8004898:	4602      	mov	r2, r0
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	1ad3      	subs	r3, r2, r3
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e15a      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a6:	4b0d      	ldr	r3, [pc, #52]	; (80048dc <HAL_RCC_OscConfig+0x26c>)
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	f003 0302 	and.w	r3, r3, #2
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d0f0      	beq.n	8004894 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80048b2:	2001      	movs	r0, #1
 80048b4:	f000 facc 	bl	8004e50 <RCC_Delay>
 80048b8:	e01c      	b.n	80048f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ba:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <HAL_RCC_OscConfig+0x274>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c0:	f7fe f9f2 	bl	8002ca8 <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048c6:	e00f      	b.n	80048e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048c8:	f7fe f9ee 	bl	8002ca8 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d908      	bls.n	80048e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e140      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
 80048da:	bf00      	nop
 80048dc:	40021000 	.word	0x40021000
 80048e0:	42420000 	.word	0x42420000
 80048e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048e8:	4b9e      	ldr	r3, [pc, #632]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d1e9      	bne.n	80048c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	f000 80a6 	beq.w	8004a4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004902:	2300      	movs	r3, #0
 8004904:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004906:	4b97      	ldr	r3, [pc, #604]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d10d      	bne.n	800492e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004912:	4b94      	ldr	r3, [pc, #592]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004914:	69db      	ldr	r3, [r3, #28]
 8004916:	4a93      	ldr	r2, [pc, #588]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491c:	61d3      	str	r3, [r2, #28]
 800491e:	4b91      	ldr	r3, [pc, #580]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004920:	69db      	ldr	r3, [r3, #28]
 8004922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004926:	60bb      	str	r3, [r7, #8]
 8004928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800492a:	2301      	movs	r3, #1
 800492c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800492e:	4b8e      	ldr	r3, [pc, #568]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004936:	2b00      	cmp	r3, #0
 8004938:	d118      	bne.n	800496c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800493a:	4b8b      	ldr	r3, [pc, #556]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a8a      	ldr	r2, [pc, #552]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 8004940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004946:	f7fe f9af 	bl	8002ca8 <HAL_GetTick>
 800494a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800494c:	e008      	b.n	8004960 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800494e:	f7fe f9ab 	bl	8002ca8 <HAL_GetTick>
 8004952:	4602      	mov	r2, r0
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	1ad3      	subs	r3, r2, r3
 8004958:	2b64      	cmp	r3, #100	; 0x64
 800495a:	d901      	bls.n	8004960 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e0fd      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004960:	4b81      	ldr	r3, [pc, #516]	; (8004b68 <HAL_RCC_OscConfig+0x4f8>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d0f0      	beq.n	800494e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d106      	bne.n	8004982 <HAL_RCC_OscConfig+0x312>
 8004974:	4b7b      	ldr	r3, [pc, #492]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	4a7a      	ldr	r2, [pc, #488]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6213      	str	r3, [r2, #32]
 8004980:	e02d      	b.n	80049de <HAL_RCC_OscConfig+0x36e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d10c      	bne.n	80049a4 <HAL_RCC_OscConfig+0x334>
 800498a:	4b76      	ldr	r3, [pc, #472]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	4a75      	ldr	r2, [pc, #468]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004990:	f023 0301 	bic.w	r3, r3, #1
 8004994:	6213      	str	r3, [r2, #32]
 8004996:	4b73      	ldr	r3, [pc, #460]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004998:	6a1b      	ldr	r3, [r3, #32]
 800499a:	4a72      	ldr	r2, [pc, #456]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 800499c:	f023 0304 	bic.w	r3, r3, #4
 80049a0:	6213      	str	r3, [r2, #32]
 80049a2:	e01c      	b.n	80049de <HAL_RCC_OscConfig+0x36e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	2b05      	cmp	r3, #5
 80049aa:	d10c      	bne.n	80049c6 <HAL_RCC_OscConfig+0x356>
 80049ac:	4b6d      	ldr	r3, [pc, #436]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	4a6c      	ldr	r2, [pc, #432]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049b2:	f043 0304 	orr.w	r3, r3, #4
 80049b6:	6213      	str	r3, [r2, #32]
 80049b8:	4b6a      	ldr	r3, [pc, #424]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	4a69      	ldr	r2, [pc, #420]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049be:	f043 0301 	orr.w	r3, r3, #1
 80049c2:	6213      	str	r3, [r2, #32]
 80049c4:	e00b      	b.n	80049de <HAL_RCC_OscConfig+0x36e>
 80049c6:	4b67      	ldr	r3, [pc, #412]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049c8:	6a1b      	ldr	r3, [r3, #32]
 80049ca:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049cc:	f023 0301 	bic.w	r3, r3, #1
 80049d0:	6213      	str	r3, [r2, #32]
 80049d2:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049d4:	6a1b      	ldr	r3, [r3, #32]
 80049d6:	4a63      	ldr	r2, [pc, #396]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 80049d8:	f023 0304 	bic.w	r3, r3, #4
 80049dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d015      	beq.n	8004a12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e6:	f7fe f95f 	bl	8002ca8 <HAL_GetTick>
 80049ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ec:	e00a      	b.n	8004a04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049ee:	f7fe f95b 	bl	8002ca8 <HAL_GetTick>
 80049f2:	4602      	mov	r2, r0
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	1ad3      	subs	r3, r2, r3
 80049f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e0ab      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a04:	4b57      	ldr	r3, [pc, #348]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f003 0302 	and.w	r3, r3, #2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d0ee      	beq.n	80049ee <HAL_RCC_OscConfig+0x37e>
 8004a10:	e014      	b.n	8004a3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a12:	f7fe f949 	bl	8002ca8 <HAL_GetTick>
 8004a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a18:	e00a      	b.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1a:	f7fe f945 	bl	8002ca8 <HAL_GetTick>
 8004a1e:	4602      	mov	r2, r0
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	1ad3      	subs	r3, r2, r3
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d901      	bls.n	8004a30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e095      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a30:	4b4c      	ldr	r3, [pc, #304]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	f003 0302 	and.w	r3, r3, #2
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1ee      	bne.n	8004a1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d105      	bne.n	8004a4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a42:	4b48      	ldr	r3, [pc, #288]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a44:	69db      	ldr	r3, [r3, #28]
 8004a46:	4a47      	ldr	r2, [pc, #284]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f000 8081 	beq.w	8004b5a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004a58:	4b42      	ldr	r3, [pc, #264]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f003 030c 	and.w	r3, r3, #12
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d061      	beq.n	8004b28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	69db      	ldr	r3, [r3, #28]
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d146      	bne.n	8004afa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a6c:	4b3f      	ldr	r3, [pc, #252]	; (8004b6c <HAL_RCC_OscConfig+0x4fc>)
 8004a6e:	2200      	movs	r2, #0
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a72:	f7fe f919 	bl	8002ca8 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7a:	f7fe f915 	bl	8002ca8 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e067      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a8c:	4b35      	ldr	r3, [pc, #212]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f0      	bne.n	8004a7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a1b      	ldr	r3, [r3, #32]
 8004a9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004aa0:	d108      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004aa2:	4b30      	ldr	r3, [pc, #192]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	492d      	ldr	r1, [pc, #180]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ab4:	4b2b      	ldr	r3, [pc, #172]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a19      	ldr	r1, [r3, #32]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	430b      	orrs	r3, r1
 8004ac6:	4927      	ldr	r1, [pc, #156]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004acc:	4b27      	ldr	r3, [pc, #156]	; (8004b6c <HAL_RCC_OscConfig+0x4fc>)
 8004ace:	2201      	movs	r2, #1
 8004ad0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ad2:	f7fe f8e9 	bl	8002ca8 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ada:	f7fe f8e5 	bl	8002ca8 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e037      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004aec:	4b1d      	ldr	r3, [pc, #116]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d0f0      	beq.n	8004ada <HAL_RCC_OscConfig+0x46a>
 8004af8:	e02f      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <HAL_RCC_OscConfig+0x4fc>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b00:	f7fe f8d2 	bl	8002ca8 <HAL_GetTick>
 8004b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b06:	e008      	b.n	8004b1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b08:	f7fe f8ce 	bl	8002ca8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	2b02      	cmp	r3, #2
 8004b14:	d901      	bls.n	8004b1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e020      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b1a:	4b12      	ldr	r3, [pc, #72]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1f0      	bne.n	8004b08 <HAL_RCC_OscConfig+0x498>
 8004b26:	e018      	b.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e013      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004b34:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <HAL_RCC_OscConfig+0x4f4>)
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d106      	bne.n	8004b56 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d001      	beq.n	8004b5a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	e000      	b.n	8004b5c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3718      	adds	r7, #24
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40021000 	.word	0x40021000
 8004b68:	40007000 	.word	0x40007000
 8004b6c:	42420060 	.word	0x42420060

08004b70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d101      	bne.n	8004b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e0d0      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b84:	4b6a      	ldr	r3, [pc, #424]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0307 	and.w	r3, r3, #7
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d910      	bls.n	8004bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b92:	4b67      	ldr	r3, [pc, #412]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f023 0207 	bic.w	r2, r3, #7
 8004b9a:	4965      	ldr	r1, [pc, #404]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba2:	4b63      	ldr	r3, [pc, #396]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0307 	and.w	r3, r3, #7
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d001      	beq.n	8004bb4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0b8      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d020      	beq.n	8004c02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0304 	and.w	r3, r3, #4
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bcc:	4b59      	ldr	r3, [pc, #356]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	4a58      	ldr	r2, [pc, #352]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004bd6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0308 	and.w	r3, r3, #8
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004be4:	4b53      	ldr	r3, [pc, #332]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	4a52      	ldr	r2, [pc, #328]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004bee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bf0:	4b50      	ldr	r3, [pc, #320]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	494d      	ldr	r1, [pc, #308]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0301 	and.w	r3, r3, #1
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d040      	beq.n	8004c90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d107      	bne.n	8004c26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	4b47      	ldr	r3, [pc, #284]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d115      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e07f      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d107      	bne.n	8004c3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c2e:	4b41      	ldr	r3, [pc, #260]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d109      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e073      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e06b      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f023 0203 	bic.w	r2, r3, #3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	4936      	ldr	r1, [pc, #216]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c60:	f7fe f822 	bl	8002ca8 <HAL_GetTick>
 8004c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c66:	e00a      	b.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c68:	f7fe f81e 	bl	8002ca8 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e053      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c7e:	4b2d      	ldr	r3, [pc, #180]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f003 020c 	and.w	r2, r3, #12
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d1eb      	bne.n	8004c68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c90:	4b27      	ldr	r3, [pc, #156]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d210      	bcs.n	8004cc0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c9e:	4b24      	ldr	r3, [pc, #144]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f023 0207 	bic.w	r2, r3, #7
 8004ca6:	4922      	ldr	r1, [pc, #136]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	4b20      	ldr	r3, [pc, #128]	; (8004d30 <HAL_RCC_ClockConfig+0x1c0>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	683a      	ldr	r2, [r7, #0]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d001      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	e032      	b.n	8004d26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d008      	beq.n	8004cde <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	4916      	ldr	r1, [pc, #88]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d009      	beq.n	8004cfe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cea:	4b12      	ldr	r3, [pc, #72]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	00db      	lsls	r3, r3, #3
 8004cf8:	490e      	ldr	r1, [pc, #56]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cfe:	f000 f821 	bl	8004d44 <HAL_RCC_GetSysClockFreq>
 8004d02:	4602      	mov	r2, r0
 8004d04:	4b0b      	ldr	r3, [pc, #44]	; (8004d34 <HAL_RCC_ClockConfig+0x1c4>)
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	091b      	lsrs	r3, r3, #4
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	490a      	ldr	r1, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x1c8>)
 8004d10:	5ccb      	ldrb	r3, [r1, r3]
 8004d12:	fa22 f303 	lsr.w	r3, r2, r3
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <HAL_RCC_ClockConfig+0x1cc>)
 8004d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004d1a:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <HAL_RCC_ClockConfig+0x1d0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f7fd ff80 	bl	8002c24 <HAL_InitTick>

  return HAL_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
 8004d2e:	bf00      	nop
 8004d30:	40022000 	.word	0x40022000
 8004d34:	40021000 	.word	0x40021000
 8004d38:	08005f98 	.word	0x08005f98
 8004d3c:	2000001c 	.word	0x2000001c
 8004d40:	20000020 	.word	0x20000020

08004d44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b087      	sub	sp, #28
 8004d48:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	2300      	movs	r3, #0
 8004d50:	60bb      	str	r3, [r7, #8]
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
 8004d56:	2300      	movs	r3, #0
 8004d58:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004d5e:	4b1e      	ldr	r3, [pc, #120]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	d002      	beq.n	8004d74 <HAL_RCC_GetSysClockFreq+0x30>
 8004d6e:	2b08      	cmp	r3, #8
 8004d70:	d003      	beq.n	8004d7a <HAL_RCC_GetSysClockFreq+0x36>
 8004d72:	e027      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004d74:	4b19      	ldr	r3, [pc, #100]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8004d76:	613b      	str	r3, [r7, #16]
      break;
 8004d78:	e027      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	0c9b      	lsrs	r3, r3, #18
 8004d7e:	f003 030f 	and.w	r3, r3, #15
 8004d82:	4a17      	ldr	r2, [pc, #92]	; (8004de0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004d84:	5cd3      	ldrb	r3, [r2, r3]
 8004d86:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d010      	beq.n	8004db4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d92:	4b11      	ldr	r3, [pc, #68]	; (8004dd8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	0c5b      	lsrs	r3, r3, #17
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d9e:	5cd3      	ldrb	r3, [r2, r3]
 8004da0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a0d      	ldr	r2, [pc, #52]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8004da6:	fb02 f203 	mul.w	r2, r2, r3
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004db0:	617b      	str	r3, [r7, #20]
 8004db2:	e004      	b.n	8004dbe <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a0c      	ldr	r2, [pc, #48]	; (8004de8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004db8:	fb02 f303 	mul.w	r3, r2, r3
 8004dbc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	613b      	str	r3, [r7, #16]
      break;
 8004dc2:	e002      	b.n	8004dca <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004dc4:	4b05      	ldr	r3, [pc, #20]	; (8004ddc <HAL_RCC_GetSysClockFreq+0x98>)
 8004dc6:	613b      	str	r3, [r7, #16]
      break;
 8004dc8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004dca:	693b      	ldr	r3, [r7, #16]
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	371c      	adds	r7, #28
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bc80      	pop	{r7}
 8004dd4:	4770      	bx	lr
 8004dd6:	bf00      	nop
 8004dd8:	40021000 	.word	0x40021000
 8004ddc:	007a1200 	.word	0x007a1200
 8004de0:	08005fb0 	.word	0x08005fb0
 8004de4:	08005fc0 	.word	0x08005fc0
 8004de8:	003d0900 	.word	0x003d0900

08004dec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004df0:	4b02      	ldr	r3, [pc, #8]	; (8004dfc <HAL_RCC_GetHCLKFreq+0x10>)
 8004df2:	681b      	ldr	r3, [r3, #0]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	46bd      	mov	sp, r7
 8004df8:	bc80      	pop	{r7}
 8004dfa:	4770      	bx	lr
 8004dfc:	2000001c 	.word	0x2000001c

08004e00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004e04:	f7ff fff2 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e08:	4602      	mov	r2, r0
 8004e0a:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	0a1b      	lsrs	r3, r3, #8
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	4903      	ldr	r1, [pc, #12]	; (8004e24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e16:	5ccb      	ldrb	r3, [r1, r3]
 8004e18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40021000 	.word	0x40021000
 8004e24:	08005fa8 	.word	0x08005fa8

08004e28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004e2c:	f7ff ffde 	bl	8004dec <HAL_RCC_GetHCLKFreq>
 8004e30:	4602      	mov	r2, r0
 8004e32:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	0adb      	lsrs	r3, r3, #11
 8004e38:	f003 0307 	and.w	r3, r3, #7
 8004e3c:	4903      	ldr	r1, [pc, #12]	; (8004e4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e3e:	5ccb      	ldrb	r3, [r1, r3]
 8004e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	08005fa8 	.word	0x08005fa8

08004e50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <RCC_Delay+0x34>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a0a      	ldr	r2, [pc, #40]	; (8004e88 <RCC_Delay+0x38>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	fb02 f303 	mul.w	r3, r2, r3
 8004e6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004e6c:	bf00      	nop
  }
  while (Delay --);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f9      	bne.n	8004e6c <RCC_Delay+0x1c>
}
 8004e78:	bf00      	nop
 8004e7a:	bf00      	nop
 8004e7c:	3714      	adds	r7, #20
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bc80      	pop	{r7}
 8004e82:	4770      	bx	lr
 8004e84:	2000001c 	.word	0x2000001c
 8004e88:	10624dd3 	.word	0x10624dd3

08004e8c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e041      	b.n	8004f22 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fd fd56 	bl	8002964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f000 fac2 	bl	8005454 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d109      	bne.n	8004f50 <HAL_TIM_PWM_Start+0x24>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	bf14      	ite	ne
 8004f48:	2301      	movne	r3, #1
 8004f4a:	2300      	moveq	r3, #0
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	e022      	b.n	8004f96 <HAL_TIM_PWM_Start+0x6a>
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b04      	cmp	r3, #4
 8004f54:	d109      	bne.n	8004f6a <HAL_TIM_PWM_Start+0x3e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	bf14      	ite	ne
 8004f62:	2301      	movne	r3, #1
 8004f64:	2300      	moveq	r3, #0
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	e015      	b.n	8004f96 <HAL_TIM_PWM_Start+0x6a>
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	2b08      	cmp	r3, #8
 8004f6e:	d109      	bne.n	8004f84 <HAL_TIM_PWM_Start+0x58>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f76:	b2db      	uxtb	r3, r3
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	e008      	b.n	8004f96 <HAL_TIM_PWM_Start+0x6a>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	2b01      	cmp	r3, #1
 8004f8e:	bf14      	ite	ne
 8004f90:	2301      	movne	r3, #1
 8004f92:	2300      	moveq	r3, #0
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e05e      	b.n	800505c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0x82>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fac:	e013      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xaa>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0x92>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fbc:	e00b      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xaa>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b08      	cmp	r3, #8
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start+0xa2>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fcc:	e003      	b.n	8004fd6 <HAL_TIM_PWM_Start+0xaa>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	6839      	ldr	r1, [r7, #0]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fc2e 	bl	8005840 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1e      	ldr	r2, [pc, #120]	; (8005064 <HAL_TIM_PWM_Start+0x138>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d107      	bne.n	8004ffe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ffc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a18      	ldr	r2, [pc, #96]	; (8005064 <HAL_TIM_PWM_Start+0x138>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d00e      	beq.n	8005026 <HAL_TIM_PWM_Start+0xfa>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005010:	d009      	beq.n	8005026 <HAL_TIM_PWM_Start+0xfa>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a14      	ldr	r2, [pc, #80]	; (8005068 <HAL_TIM_PWM_Start+0x13c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d004      	beq.n	8005026 <HAL_TIM_PWM_Start+0xfa>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a12      	ldr	r2, [pc, #72]	; (800506c <HAL_TIM_PWM_Start+0x140>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d111      	bne.n	800504a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2b06      	cmp	r3, #6
 8005036:	d010      	beq.n	800505a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005048:	e007      	b.n	800505a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f042 0201 	orr.w	r2, r2, #1
 8005058:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	40012c00 	.word	0x40012c00
 8005068:	40000400 	.word	0x40000400
 800506c:	40000800 	.word	0x40000800

08005070 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
 8005078:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e093      	b.n	80051ac <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7fd fbfb 	bl	8002894 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	6812      	ldr	r2, [r2, #0]
 80050b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050b4:	f023 0307 	bic.w	r3, r3, #7
 80050b8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3304      	adds	r3, #4
 80050c2:	4619      	mov	r1, r3
 80050c4:	4610      	mov	r0, r2
 80050c6:	f000 f9c5 	bl	8005454 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	699b      	ldr	r3, [r3, #24]
 80050d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6a1b      	ldr	r3, [r3, #32]
 80050e0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050f2:	f023 0303 	bic.w	r3, r3, #3
 80050f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	021b      	lsls	r3, r3, #8
 8005102:	4313      	orrs	r3, r2
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005110:	f023 030c 	bic.w	r3, r3, #12
 8005114:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800511c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005120:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	68da      	ldr	r2, [r3, #12]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	021b      	lsls	r3, r3, #8
 800512c:	4313      	orrs	r3, r2
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	4313      	orrs	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	011a      	lsls	r2, r3, #4
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	031b      	lsls	r3, r3, #12
 8005140:	4313      	orrs	r3, r2
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4313      	orrs	r3, r2
 8005146:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800514e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	011b      	lsls	r3, r3, #4
 800515a:	4313      	orrs	r3, r2
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4313      	orrs	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	697a      	ldr	r2, [r7, #20]
 8005168:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2201      	movs	r2, #1
 8005186:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2201      	movs	r2, #1
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3718      	adds	r7, #24
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051cc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80051d4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80051dc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d110      	bne.n	8005206 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d102      	bne.n	80051f0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ea:	7b7b      	ldrb	r3, [r7, #13]
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d001      	beq.n	80051f4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e069      	b.n	80052c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2202      	movs	r2, #2
 8005200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005204:	e031      	b.n	800526a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	2b04      	cmp	r3, #4
 800520a:	d110      	bne.n	800522e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800520c:	7bbb      	ldrb	r3, [r7, #14]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d102      	bne.n	8005218 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005212:	7b3b      	ldrb	r3, [r7, #12]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d001      	beq.n	800521c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e055      	b.n	80052c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2202      	movs	r2, #2
 8005220:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2202      	movs	r2, #2
 8005228:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800522c:	e01d      	b.n	800526a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800522e:	7bfb      	ldrb	r3, [r7, #15]
 8005230:	2b01      	cmp	r3, #1
 8005232:	d108      	bne.n	8005246 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005234:	7bbb      	ldrb	r3, [r7, #14]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d105      	bne.n	8005246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800523a:	7b7b      	ldrb	r3, [r7, #13]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d102      	bne.n	8005246 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005240:	7b3b      	ldrb	r3, [r7, #12]
 8005242:	2b01      	cmp	r3, #1
 8005244:	d001      	beq.n	800524a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e03e      	b.n	80052c8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2202      	movs	r2, #2
 800524e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d003      	beq.n	8005278 <HAL_TIM_Encoder_Start+0xc4>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b04      	cmp	r3, #4
 8005274:	d008      	beq.n	8005288 <HAL_TIM_Encoder_Start+0xd4>
 8005276:	e00f      	b.n	8005298 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2201      	movs	r2, #1
 800527e:	2100      	movs	r1, #0
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fadd 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 8005286:	e016      	b.n	80052b6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	2104      	movs	r1, #4
 8005290:	4618      	mov	r0, r3
 8005292:	f000 fad5 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 8005296:	e00e      	b.n	80052b6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2201      	movs	r2, #1
 800529e:	2100      	movs	r1, #0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 facd 	bl	8005840 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2201      	movs	r2, #1
 80052ac:	2104      	movs	r1, #4
 80052ae:	4618      	mov	r0, r3
 80052b0:	f000 fac6 	bl	8005840 <TIM_CCxChannelCmd>
      break;
 80052b4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f042 0201 	orr.w	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052c6:	2300      	movs	r3, #0
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d101      	bne.n	80052ee <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052ea:	2302      	movs	r3, #2
 80052ec:	e0ae      	b.n	800544c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2201      	movs	r2, #1
 80052f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	f200 809f 	bhi.w	800543c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80052fe:	a201      	add	r2, pc, #4	; (adr r2, 8005304 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005304:	08005339 	.word	0x08005339
 8005308:	0800543d 	.word	0x0800543d
 800530c:	0800543d 	.word	0x0800543d
 8005310:	0800543d 	.word	0x0800543d
 8005314:	08005379 	.word	0x08005379
 8005318:	0800543d 	.word	0x0800543d
 800531c:	0800543d 	.word	0x0800543d
 8005320:	0800543d 	.word	0x0800543d
 8005324:	080053bb 	.word	0x080053bb
 8005328:	0800543d 	.word	0x0800543d
 800532c:	0800543d 	.word	0x0800543d
 8005330:	0800543d 	.word	0x0800543d
 8005334:	080053fb 	.word	0x080053fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68b9      	ldr	r1, [r7, #8]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 f8f6 	bl	8005530 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	699a      	ldr	r2, [r3, #24]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0208 	orr.w	r2, r2, #8
 8005352:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	699a      	ldr	r2, [r3, #24]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f022 0204 	bic.w	r2, r2, #4
 8005362:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6999      	ldr	r1, [r3, #24]
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	691a      	ldr	r2, [r3, #16]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	619a      	str	r2, [r3, #24]
      break;
 8005376:	e064      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68b9      	ldr	r1, [r7, #8]
 800537e:	4618      	mov	r0, r3
 8005380:	f000 f93c 	bl	80055fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	699a      	ldr	r2, [r3, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005392:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699a      	ldr	r2, [r3, #24]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6999      	ldr	r1, [r3, #24]
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	021a      	lsls	r2, r3, #8
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	619a      	str	r2, [r3, #24]
      break;
 80053b8:	e043      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	68b9      	ldr	r1, [r7, #8]
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f985 	bl	80056d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69da      	ldr	r2, [r3, #28]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f042 0208 	orr.w	r2, r2, #8
 80053d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	69da      	ldr	r2, [r3, #28]
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f022 0204 	bic.w	r2, r2, #4
 80053e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69d9      	ldr	r1, [r3, #28]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	691a      	ldr	r2, [r3, #16]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	61da      	str	r2, [r3, #28]
      break;
 80053f8:	e023      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68b9      	ldr	r1, [r7, #8]
 8005400:	4618      	mov	r0, r3
 8005402:	f000 f9cf 	bl	80057a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	69da      	ldr	r2, [r3, #28]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005414:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	69da      	ldr	r2, [r3, #28]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005424:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	69d9      	ldr	r1, [r3, #28]
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	021a      	lsls	r2, r3, #8
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	61da      	str	r2, [r3, #28]
      break;
 800543a:	e002      	b.n	8005442 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	75fb      	strb	r3, [r7, #23]
      break;
 8005440:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800544a:	7dfb      	ldrb	r3, [r7, #23]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
 800545c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a2f      	ldr	r2, [pc, #188]	; (8005524 <TIM_Base_SetConfig+0xd0>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d00b      	beq.n	8005484 <TIM_Base_SetConfig+0x30>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005472:	d007      	beq.n	8005484 <TIM_Base_SetConfig+0x30>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2c      	ldr	r2, [pc, #176]	; (8005528 <TIM_Base_SetConfig+0xd4>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_Base_SetConfig+0x30>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2b      	ldr	r2, [pc, #172]	; (800552c <TIM_Base_SetConfig+0xd8>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d108      	bne.n	8005496 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	68fa      	ldr	r2, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a22      	ldr	r2, [pc, #136]	; (8005524 <TIM_Base_SetConfig+0xd0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00b      	beq.n	80054b6 <TIM_Base_SetConfig+0x62>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a4:	d007      	beq.n	80054b6 <TIM_Base_SetConfig+0x62>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a1f      	ldr	r2, [pc, #124]	; (8005528 <TIM_Base_SetConfig+0xd4>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d003      	beq.n	80054b6 <TIM_Base_SetConfig+0x62>
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	4a1e      	ldr	r2, [pc, #120]	; (800552c <TIM_Base_SetConfig+0xd8>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d108      	bne.n	80054c8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	689a      	ldr	r2, [r3, #8]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a0d      	ldr	r2, [pc, #52]	; (8005524 <TIM_Base_SetConfig+0xd0>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d103      	bne.n	80054fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	691a      	ldr	r2, [r3, #16]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d005      	beq.n	800551a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	f023 0201 	bic.w	r2, r3, #1
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	611a      	str	r2, [r3, #16]
  }
}
 800551a:	bf00      	nop
 800551c:	3714      	adds	r7, #20
 800551e:	46bd      	mov	sp, r7
 8005520:	bc80      	pop	{r7}
 8005522:	4770      	bx	lr
 8005524:	40012c00 	.word	0x40012c00
 8005528:	40000400 	.word	0x40000400
 800552c:	40000800 	.word	0x40000800

08005530 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6a1b      	ldr	r3, [r3, #32]
 800553e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f023 0201 	bic.w	r2, r3, #1
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	699b      	ldr	r3, [r3, #24]
 8005556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800555e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0303 	bic.w	r3, r3, #3
 8005566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f023 0302 	bic.w	r3, r3, #2
 8005578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a1c      	ldr	r2, [pc, #112]	; (80055f8 <TIM_OC1_SetConfig+0xc8>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d10c      	bne.n	80055a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	f023 0308 	bic.w	r3, r3, #8
 8005592:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	4313      	orrs	r3, r2
 800559c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f023 0304 	bic.w	r3, r3, #4
 80055a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a13      	ldr	r2, [pc, #76]	; (80055f8 <TIM_OC1_SetConfig+0xc8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d111      	bne.n	80055d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	695b      	ldr	r3, [r3, #20]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	693a      	ldr	r2, [r7, #16]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68fa      	ldr	r2, [r7, #12]
 80055dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	621a      	str	r2, [r3, #32]
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr
 80055f6:	bf00      	nop
 80055f8:	40012c00 	.word	0x40012c00

080055fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b087      	sub	sp, #28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6a1b      	ldr	r3, [r3, #32]
 800560a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a1b      	ldr	r3, [r3, #32]
 8005610:	f023 0210 	bic.w	r2, r3, #16
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800562a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005632:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	68fa      	ldr	r2, [r7, #12]
 800563c:	4313      	orrs	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	f023 0320 	bic.w	r3, r3, #32
 8005646:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a1d      	ldr	r2, [pc, #116]	; (80056cc <TIM_OC2_SetConfig+0xd0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d10d      	bne.n	8005678 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005662:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	011b      	lsls	r3, r3, #4
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005676:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a14      	ldr	r2, [pc, #80]	; (80056cc <TIM_OC2_SetConfig+0xd0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d113      	bne.n	80056a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005686:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800568e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	4313      	orrs	r3, r2
 800569a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	699b      	ldr	r3, [r3, #24]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	693a      	ldr	r2, [r7, #16]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685a      	ldr	r2, [r3, #4]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	697a      	ldr	r2, [r7, #20]
 80056c0:	621a      	str	r2, [r3, #32]
}
 80056c2:	bf00      	nop
 80056c4:	371c      	adds	r7, #28
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bc80      	pop	{r7}
 80056ca:	4770      	bx	lr
 80056cc:	40012c00 	.word	0x40012c00

080056d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
 80056d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6a1b      	ldr	r3, [r3, #32]
 80056de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a1b      	ldr	r3, [r3, #32]
 80056e4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69db      	ldr	r3, [r3, #28]
 80056f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f023 0303 	bic.w	r3, r3, #3
 8005706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	021b      	lsls	r3, r3, #8
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a1d      	ldr	r2, [pc, #116]	; (80057a0 <TIM_OC3_SetConfig+0xd0>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d10d      	bne.n	800574a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	68db      	ldr	r3, [r3, #12]
 800573a:	021b      	lsls	r3, r3, #8
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	4313      	orrs	r3, r2
 8005740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <TIM_OC3_SetConfig+0xd0>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d113      	bne.n	800577a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	693a      	ldr	r2, [r7, #16]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	4313      	orrs	r3, r2
 8005778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	621a      	str	r2, [r3, #32]
}
 8005794:	bf00      	nop
 8005796:	371c      	adds	r7, #28
 8005798:	46bd      	mov	sp, r7
 800579a:	bc80      	pop	{r7}
 800579c:	4770      	bx	lr
 800579e:	bf00      	nop
 80057a0:	40012c00 	.word	0x40012c00

080057a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057a4:	b480      	push	{r7}
 80057a6:	b087      	sub	sp, #28
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	68fa      	ldr	r2, [r7, #12]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	031b      	lsls	r3, r3, #12
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a0f      	ldr	r2, [pc, #60]	; (800583c <TIM_OC4_SetConfig+0x98>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d109      	bne.n	8005818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800580a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	019b      	lsls	r3, r3, #6
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	621a      	str	r2, [r3, #32]
}
 8005832:	bf00      	nop
 8005834:	371c      	adds	r7, #28
 8005836:	46bd      	mov	sp, r7
 8005838:	bc80      	pop	{r7}
 800583a:	4770      	bx	lr
 800583c:	40012c00 	.word	0x40012c00

08005840 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005840:	b480      	push	{r7}
 8005842:	b087      	sub	sp, #28
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	f003 031f 	and.w	r3, r3, #31
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a1a      	ldr	r2, [r3, #32]
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a1a      	ldr	r2, [r3, #32]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f003 031f 	and.w	r3, r3, #31
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	fa01 f303 	lsl.w	r3, r1, r3
 8005878:	431a      	orrs	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	621a      	str	r2, [r3, #32]
}
 800587e:	bf00      	nop
 8005880:	371c      	adds	r7, #28
 8005882:	46bd      	mov	sp, r7
 8005884:	bc80      	pop	{r7}
 8005886:	4770      	bx	lr

08005888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005898:	2b01      	cmp	r3, #1
 800589a:	d101      	bne.n	80058a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800589c:	2302      	movs	r3, #2
 800589e:	e046      	b.n	800592e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2202      	movs	r2, #2
 80058ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	4313      	orrs	r3, r2
 80058d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a16      	ldr	r2, [pc, #88]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00e      	beq.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ec:	d009      	beq.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d004      	beq.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a10      	ldr	r2, [pc, #64]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d10c      	bne.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005908:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685b      	ldr	r3, [r3, #4]
 800590e:	68ba      	ldr	r2, [r7, #8]
 8005910:	4313      	orrs	r3, r2
 8005912:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2200      	movs	r2, #0
 8005928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3714      	adds	r7, #20
 8005932:	46bd      	mov	sp, r7
 8005934:	bc80      	pop	{r7}
 8005936:	4770      	bx	lr
 8005938:	40012c00 	.word	0x40012c00
 800593c:	40000400 	.word	0x40000400
 8005940:	40000800 	.word	0x40000800

08005944 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d101      	bne.n	8005956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005952:	2301      	movs	r3, #1
 8005954:	e042      	b.n	80059dc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d106      	bne.n	8005970 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f7fd f84c 	bl	8002a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2224      	movs	r2, #36	; 0x24
 8005974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005986:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 f82b 	bl	80059e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800599c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	695a      	ldr	r2, [r3, #20]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	691b      	ldr	r3, [r3, #16]
 80059f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	689a      	ldr	r2, [r3, #8]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	431a      	orrs	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	695b      	ldr	r3, [r3, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a1e:	f023 030c 	bic.w	r3, r3, #12
 8005a22:	687a      	ldr	r2, [r7, #4]
 8005a24:	6812      	ldr	r2, [r2, #0]
 8005a26:	68b9      	ldr	r1, [r7, #8]
 8005a28:	430b      	orrs	r3, r1
 8005a2a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	699a      	ldr	r2, [r3, #24]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a2c      	ldr	r2, [pc, #176]	; (8005af8 <UART_SetConfig+0x114>)
 8005a48:	4293      	cmp	r3, r2
 8005a4a:	d103      	bne.n	8005a54 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a4c:	f7ff f9ec 	bl	8004e28 <HAL_RCC_GetPCLK2Freq>
 8005a50:	60f8      	str	r0, [r7, #12]
 8005a52:	e002      	b.n	8005a5a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005a54:	f7ff f9d4 	bl	8004e00 <HAL_RCC_GetPCLK1Freq>
 8005a58:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a5a:	68fa      	ldr	r2, [r7, #12]
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009a      	lsls	r2, r3, #2
 8005a64:	441a      	add	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	4a22      	ldr	r2, [pc, #136]	; (8005afc <UART_SetConfig+0x118>)
 8005a72:	fba2 2303 	umull	r2, r3, r2, r3
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	0119      	lsls	r1, r3, #4
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	4613      	mov	r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4413      	add	r3, r2
 8005a82:	009a      	lsls	r2, r3, #2
 8005a84:	441a      	add	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	009b      	lsls	r3, r3, #2
 8005a8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a90:	4b1a      	ldr	r3, [pc, #104]	; (8005afc <UART_SetConfig+0x118>)
 8005a92:	fba3 0302 	umull	r0, r3, r3, r2
 8005a96:	095b      	lsrs	r3, r3, #5
 8005a98:	2064      	movs	r0, #100	; 0x64
 8005a9a:	fb00 f303 	mul.w	r3, r0, r3
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	011b      	lsls	r3, r3, #4
 8005aa2:	3332      	adds	r3, #50	; 0x32
 8005aa4:	4a15      	ldr	r2, [pc, #84]	; (8005afc <UART_SetConfig+0x118>)
 8005aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aaa:	095b      	lsrs	r3, r3, #5
 8005aac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ab0:	4419      	add	r1, r3
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	009a      	lsls	r2, r3, #2
 8005abc:	441a      	add	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <UART_SetConfig+0x118>)
 8005aca:	fba3 0302 	umull	r0, r3, r3, r2
 8005ace:	095b      	lsrs	r3, r3, #5
 8005ad0:	2064      	movs	r0, #100	; 0x64
 8005ad2:	fb00 f303 	mul.w	r3, r0, r3
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	3332      	adds	r3, #50	; 0x32
 8005adc:	4a07      	ldr	r2, [pc, #28]	; (8005afc <UART_SetConfig+0x118>)
 8005ade:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae2:	095b      	lsrs	r3, r3, #5
 8005ae4:	f003 020f 	and.w	r2, r3, #15
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	440a      	add	r2, r1
 8005aee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005af0:	bf00      	nop
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40013800 	.word	0x40013800
 8005afc:	51eb851f 	.word	0x51eb851f

08005b00 <atan2f>:
 8005b00:	f000 b822 	b.w	8005b48 <__ieee754_atan2f>

08005b04 <sqrtf>:
 8005b04:	b538      	push	{r3, r4, r5, lr}
 8005b06:	4605      	mov	r5, r0
 8005b08:	f000 f8a4 	bl	8005c54 <__ieee754_sqrtf>
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <sqrtf+0x40>)
 8005b0e:	4604      	mov	r4, r0
 8005b10:	f993 3000 	ldrsb.w	r3, [r3]
 8005b14:	3301      	adds	r3, #1
 8005b16:	d012      	beq.n	8005b3e <sqrtf+0x3a>
 8005b18:	4629      	mov	r1, r5
 8005b1a:	4628      	mov	r0, r5
 8005b1c:	f7fb fa2a 	bl	8000f74 <__aeabi_fcmpun>
 8005b20:	b968      	cbnz	r0, 8005b3e <sqrtf+0x3a>
 8005b22:	2100      	movs	r1, #0
 8005b24:	4628      	mov	r0, r5
 8005b26:	f7fb f9fd 	bl	8000f24 <__aeabi_fcmplt>
 8005b2a:	b140      	cbz	r0, 8005b3e <sqrtf+0x3a>
 8005b2c:	f000 f9f4 	bl	8005f18 <__errno>
 8005b30:	2321      	movs	r3, #33	; 0x21
 8005b32:	2100      	movs	r1, #0
 8005b34:	6003      	str	r3, [r0, #0]
 8005b36:	4608      	mov	r0, r1
 8005b38:	f7fb f90a 	bl	8000d50 <__aeabi_fdiv>
 8005b3c:	4604      	mov	r4, r0
 8005b3e:	4620      	mov	r0, r4
 8005b40:	bd38      	pop	{r3, r4, r5, pc}
 8005b42:	bf00      	nop
 8005b44:	20000025 	.word	0x20000025

08005b48 <__ieee754_atan2f>:
 8005b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b4a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005b4e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005b52:	4603      	mov	r3, r0
 8005b54:	dc05      	bgt.n	8005b62 <__ieee754_atan2f+0x1a>
 8005b56:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005b5a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005b5e:	4607      	mov	r7, r0
 8005b60:	dd04      	ble.n	8005b6c <__ieee754_atan2f+0x24>
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fa ff38 	bl	80009d8 <__addsf3>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	e011      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005b6c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8005b70:	d103      	bne.n	8005b7a <__ieee754_atan2f+0x32>
 8005b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005b76:	f000 b8bf 	b.w	8005cf8 <atanf>
 8005b7a:	178c      	asrs	r4, r1, #30
 8005b7c:	f004 0402 	and.w	r4, r4, #2
 8005b80:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005b84:	b932      	cbnz	r2, 8005b94 <__ieee754_atan2f+0x4c>
 8005b86:	2c02      	cmp	r4, #2
 8005b88:	d04c      	beq.n	8005c24 <__ieee754_atan2f+0xdc>
 8005b8a:	2c03      	cmp	r4, #3
 8005b8c:	d100      	bne.n	8005b90 <__ieee754_atan2f+0x48>
 8005b8e:	4b29      	ldr	r3, [pc, #164]	; (8005c34 <__ieee754_atan2f+0xec>)
 8005b90:	4618      	mov	r0, r3
 8005b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b94:	b91e      	cbnz	r6, 8005b9e <__ieee754_atan2f+0x56>
 8005b96:	2f00      	cmp	r7, #0
 8005b98:	da4a      	bge.n	8005c30 <__ieee754_atan2f+0xe8>
 8005b9a:	4b27      	ldr	r3, [pc, #156]	; (8005c38 <__ieee754_atan2f+0xf0>)
 8005b9c:	e7f8      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005b9e:	f1b6 4fff 	cmp.w	r6, #2139095040	; 0x7f800000
 8005ba2:	d10e      	bne.n	8005bc2 <__ieee754_atan2f+0x7a>
 8005ba4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005ba8:	f104 34ff 	add.w	r4, r4, #4294967295
 8005bac:	d105      	bne.n	8005bba <__ieee754_atan2f+0x72>
 8005bae:	2c02      	cmp	r4, #2
 8005bb0:	d83a      	bhi.n	8005c28 <__ieee754_atan2f+0xe0>
 8005bb2:	4b22      	ldr	r3, [pc, #136]	; (8005c3c <__ieee754_atan2f+0xf4>)
 8005bb4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005bb8:	e7ea      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005bba:	2c02      	cmp	r4, #2
 8005bbc:	d836      	bhi.n	8005c2c <__ieee754_atan2f+0xe4>
 8005bbe:	4b20      	ldr	r3, [pc, #128]	; (8005c40 <__ieee754_atan2f+0xf8>)
 8005bc0:	e7f8      	b.n	8005bb4 <__ieee754_atan2f+0x6c>
 8005bc2:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005bc6:	d0e6      	beq.n	8005b96 <__ieee754_atan2f+0x4e>
 8005bc8:	1b92      	subs	r2, r2, r6
 8005bca:	f1b2 5ff4 	cmp.w	r2, #511705088	; 0x1e800000
 8005bce:	ea4f 50e2 	mov.w	r0, r2, asr #23
 8005bd2:	da17      	bge.n	8005c04 <__ieee754_atan2f+0xbc>
 8005bd4:	2900      	cmp	r1, #0
 8005bd6:	da01      	bge.n	8005bdc <__ieee754_atan2f+0x94>
 8005bd8:	303c      	adds	r0, #60	; 0x3c
 8005bda:	db15      	blt.n	8005c08 <__ieee754_atan2f+0xc0>
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fb f8b7 	bl	8000d50 <__aeabi_fdiv>
 8005be2:	f000 f995 	bl	8005f10 <fabsf>
 8005be6:	f000 f887 	bl	8005cf8 <atanf>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2c01      	cmp	r4, #1
 8005bee:	d00d      	beq.n	8005c0c <__ieee754_atan2f+0xc4>
 8005bf0:	2c02      	cmp	r4, #2
 8005bf2:	d00e      	beq.n	8005c12 <__ieee754_atan2f+0xca>
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d0cb      	beq.n	8005b90 <__ieee754_atan2f+0x48>
 8005bf8:	4912      	ldr	r1, [pc, #72]	; (8005c44 <__ieee754_atan2f+0xfc>)
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fa feec 	bl	80009d8 <__addsf3>
 8005c00:	4911      	ldr	r1, [pc, #68]	; (8005c48 <__ieee754_atan2f+0x100>)
 8005c02:	e00c      	b.n	8005c1e <__ieee754_atan2f+0xd6>
 8005c04:	4b11      	ldr	r3, [pc, #68]	; (8005c4c <__ieee754_atan2f+0x104>)
 8005c06:	e7f1      	b.n	8005bec <__ieee754_atan2f+0xa4>
 8005c08:	2300      	movs	r3, #0
 8005c0a:	e7ef      	b.n	8005bec <__ieee754_atan2f+0xa4>
 8005c0c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005c10:	e7be      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005c12:	490c      	ldr	r1, [pc, #48]	; (8005c44 <__ieee754_atan2f+0xfc>)
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fa fedf 	bl	80009d8 <__addsf3>
 8005c1a:	4601      	mov	r1, r0
 8005c1c:	480a      	ldr	r0, [pc, #40]	; (8005c48 <__ieee754_atan2f+0x100>)
 8005c1e:	f7fa fed9 	bl	80009d4 <__aeabi_fsub>
 8005c22:	e7a1      	b.n	8005b68 <__ieee754_atan2f+0x20>
 8005c24:	4b08      	ldr	r3, [pc, #32]	; (8005c48 <__ieee754_atan2f+0x100>)
 8005c26:	e7b3      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <__ieee754_atan2f+0x108>)
 8005c2a:	e7b1      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e7af      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005c30:	4b06      	ldr	r3, [pc, #24]	; (8005c4c <__ieee754_atan2f+0x104>)
 8005c32:	e7ad      	b.n	8005b90 <__ieee754_atan2f+0x48>
 8005c34:	c0490fdb 	.word	0xc0490fdb
 8005c38:	bfc90fdb 	.word	0xbfc90fdb
 8005c3c:	08005fc4 	.word	0x08005fc4
 8005c40:	08005fd0 	.word	0x08005fd0
 8005c44:	33bbbd2e 	.word	0x33bbbd2e
 8005c48:	40490fdb 	.word	0x40490fdb
 8005c4c:	3fc90fdb 	.word	0x3fc90fdb
 8005c50:	3f490fdb 	.word	0x3f490fdb

08005c54 <__ieee754_sqrtf>:
 8005c54:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 8005c58:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4603      	mov	r3, r0
 8005c60:	4604      	mov	r4, r0
 8005c62:	d309      	bcc.n	8005c78 <__ieee754_sqrtf+0x24>
 8005c64:	4601      	mov	r1, r0
 8005c66:	f7fa ffbf 	bl	8000be8 <__aeabi_fmul>
 8005c6a:	4601      	mov	r1, r0
 8005c6c:	4620      	mov	r0, r4
 8005c6e:	f7fa feb3 	bl	80009d8 <__addsf3>
 8005c72:	4604      	mov	r4, r0
 8005c74:	4620      	mov	r0, r4
 8005c76:	bd70      	pop	{r4, r5, r6, pc}
 8005c78:	2a00      	cmp	r2, #0
 8005c7a:	d0fb      	beq.n	8005c74 <__ieee754_sqrtf+0x20>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	da06      	bge.n	8005c8e <__ieee754_sqrtf+0x3a>
 8005c80:	4601      	mov	r1, r0
 8005c82:	f7fa fea7 	bl	80009d4 <__aeabi_fsub>
 8005c86:	4601      	mov	r1, r0
 8005c88:	f7fb f862 	bl	8000d50 <__aeabi_fdiv>
 8005c8c:	e7f1      	b.n	8005c72 <__ieee754_sqrtf+0x1e>
 8005c8e:	f010 42ff 	ands.w	r2, r0, #2139095040	; 0x7f800000
 8005c92:	ea4f 51e0 	mov.w	r1, r0, asr #23
 8005c96:	d029      	beq.n	8005cec <__ieee754_sqrtf+0x98>
 8005c98:	f3c3 0216 	ubfx	r2, r3, #0, #23
 8005c9c:	07cb      	lsls	r3, r1, #31
 8005c9e:	f04f 0300 	mov.w	r3, #0
 8005ca2:	f1a1 007f 	sub.w	r0, r1, #127	; 0x7f
 8005ca6:	f04f 0419 	mov.w	r4, #25
 8005caa:	461e      	mov	r6, r3
 8005cac:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8005cb0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005cb4:	bf58      	it	pl
 8005cb6:	0052      	lslpl	r2, r2, #1
 8005cb8:	1040      	asrs	r0, r0, #1
 8005cba:	0052      	lsls	r2, r2, #1
 8005cbc:	1875      	adds	r5, r6, r1
 8005cbe:	4295      	cmp	r5, r2
 8005cc0:	bfde      	ittt	le
 8005cc2:	186e      	addle	r6, r5, r1
 8005cc4:	1b52      	suble	r2, r2, r5
 8005cc6:	185b      	addle	r3, r3, r1
 8005cc8:	3c01      	subs	r4, #1
 8005cca:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8005cce:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005cd2:	d1f3      	bne.n	8005cbc <__ieee754_sqrtf+0x68>
 8005cd4:	b112      	cbz	r2, 8005cdc <__ieee754_sqrtf+0x88>
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	f023 0301 	bic.w	r3, r3, #1
 8005cdc:	105c      	asrs	r4, r3, #1
 8005cde:	f104 547c 	add.w	r4, r4, #1056964608	; 0x3f000000
 8005ce2:	eb04 54c0 	add.w	r4, r4, r0, lsl #23
 8005ce6:	e7c5      	b.n	8005c74 <__ieee754_sqrtf+0x20>
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	3201      	adds	r2, #1
 8005cec:	0218      	lsls	r0, r3, #8
 8005cee:	d5fb      	bpl.n	8005ce8 <__ieee754_sqrtf+0x94>
 8005cf0:	3a01      	subs	r2, #1
 8005cf2:	1a89      	subs	r1, r1, r2
 8005cf4:	e7d0      	b.n	8005c98 <__ieee754_sqrtf+0x44>
	...

08005cf8 <atanf>:
 8005cf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfc:	f020 4500 	bic.w	r5, r0, #2147483648	; 0x80000000
 8005d00:	f1b5 4fa1 	cmp.w	r5, #1350565888	; 0x50800000
 8005d04:	4604      	mov	r4, r0
 8005d06:	4680      	mov	r8, r0
 8005d08:	db0e      	blt.n	8005d28 <atanf+0x30>
 8005d0a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005d0e:	dd04      	ble.n	8005d1a <atanf+0x22>
 8005d10:	4601      	mov	r1, r0
 8005d12:	f7fa fe61 	bl	80009d8 <__addsf3>
 8005d16:	4604      	mov	r4, r0
 8005d18:	e003      	b.n	8005d22 <atanf+0x2a>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	f300 80ce 	bgt.w	8005ebc <atanf+0x1c4>
 8005d20:	4c67      	ldr	r4, [pc, #412]	; (8005ec0 <atanf+0x1c8>)
 8005d22:	4620      	mov	r0, r4
 8005d24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d28:	4b66      	ldr	r3, [pc, #408]	; (8005ec4 <atanf+0x1cc>)
 8005d2a:	429d      	cmp	r5, r3
 8005d2c:	dc0e      	bgt.n	8005d4c <atanf+0x54>
 8005d2e:	f1b5 5f44 	cmp.w	r5, #822083584	; 0x31000000
 8005d32:	da08      	bge.n	8005d46 <atanf+0x4e>
 8005d34:	4964      	ldr	r1, [pc, #400]	; (8005ec8 <atanf+0x1d0>)
 8005d36:	f7fa fe4f 	bl	80009d8 <__addsf3>
 8005d3a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d3e:	f7fb f90f 	bl	8000f60 <__aeabi_fcmpgt>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d1ed      	bne.n	8005d22 <atanf+0x2a>
 8005d46:	f04f 36ff 	mov.w	r6, #4294967295
 8005d4a:	e01c      	b.n	8005d86 <atanf+0x8e>
 8005d4c:	f000 f8e0 	bl	8005f10 <fabsf>
 8005d50:	4b5e      	ldr	r3, [pc, #376]	; (8005ecc <atanf+0x1d4>)
 8005d52:	4604      	mov	r4, r0
 8005d54:	429d      	cmp	r5, r3
 8005d56:	dc7c      	bgt.n	8005e52 <atanf+0x15a>
 8005d58:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005d5c:	429d      	cmp	r5, r3
 8005d5e:	dc67      	bgt.n	8005e30 <atanf+0x138>
 8005d60:	4601      	mov	r1, r0
 8005d62:	f7fa fe39 	bl	80009d8 <__addsf3>
 8005d66:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005d6a:	f7fa fe33 	bl	80009d4 <__aeabi_fsub>
 8005d6e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005d72:	4605      	mov	r5, r0
 8005d74:	4620      	mov	r0, r4
 8005d76:	f7fa fe2f 	bl	80009d8 <__addsf3>
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	4628      	mov	r0, r5
 8005d7e:	f7fa ffe7 	bl	8000d50 <__aeabi_fdiv>
 8005d82:	2600      	movs	r6, #0
 8005d84:	4604      	mov	r4, r0
 8005d86:	4621      	mov	r1, r4
 8005d88:	4620      	mov	r0, r4
 8005d8a:	f7fa ff2d 	bl	8000be8 <__aeabi_fmul>
 8005d8e:	4601      	mov	r1, r0
 8005d90:	4607      	mov	r7, r0
 8005d92:	f7fa ff29 	bl	8000be8 <__aeabi_fmul>
 8005d96:	4605      	mov	r5, r0
 8005d98:	494d      	ldr	r1, [pc, #308]	; (8005ed0 <atanf+0x1d8>)
 8005d9a:	f7fa ff25 	bl	8000be8 <__aeabi_fmul>
 8005d9e:	494d      	ldr	r1, [pc, #308]	; (8005ed4 <atanf+0x1dc>)
 8005da0:	f7fa fe1a 	bl	80009d8 <__addsf3>
 8005da4:	4629      	mov	r1, r5
 8005da6:	f7fa ff1f 	bl	8000be8 <__aeabi_fmul>
 8005daa:	494b      	ldr	r1, [pc, #300]	; (8005ed8 <atanf+0x1e0>)
 8005dac:	f7fa fe14 	bl	80009d8 <__addsf3>
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa ff19 	bl	8000be8 <__aeabi_fmul>
 8005db6:	4949      	ldr	r1, [pc, #292]	; (8005edc <atanf+0x1e4>)
 8005db8:	f7fa fe0e 	bl	80009d8 <__addsf3>
 8005dbc:	4629      	mov	r1, r5
 8005dbe:	f7fa ff13 	bl	8000be8 <__aeabi_fmul>
 8005dc2:	4947      	ldr	r1, [pc, #284]	; (8005ee0 <atanf+0x1e8>)
 8005dc4:	f7fa fe08 	bl	80009d8 <__addsf3>
 8005dc8:	4629      	mov	r1, r5
 8005dca:	f7fa ff0d 	bl	8000be8 <__aeabi_fmul>
 8005dce:	4945      	ldr	r1, [pc, #276]	; (8005ee4 <atanf+0x1ec>)
 8005dd0:	f7fa fe02 	bl	80009d8 <__addsf3>
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	f7fa ff07 	bl	8000be8 <__aeabi_fmul>
 8005dda:	4943      	ldr	r1, [pc, #268]	; (8005ee8 <atanf+0x1f0>)
 8005ddc:	4607      	mov	r7, r0
 8005dde:	4628      	mov	r0, r5
 8005de0:	f7fa ff02 	bl	8000be8 <__aeabi_fmul>
 8005de4:	4941      	ldr	r1, [pc, #260]	; (8005eec <atanf+0x1f4>)
 8005de6:	f7fa fdf5 	bl	80009d4 <__aeabi_fsub>
 8005dea:	4629      	mov	r1, r5
 8005dec:	f7fa fefc 	bl	8000be8 <__aeabi_fmul>
 8005df0:	493f      	ldr	r1, [pc, #252]	; (8005ef0 <atanf+0x1f8>)
 8005df2:	f7fa fdef 	bl	80009d4 <__aeabi_fsub>
 8005df6:	4629      	mov	r1, r5
 8005df8:	f7fa fef6 	bl	8000be8 <__aeabi_fmul>
 8005dfc:	493d      	ldr	r1, [pc, #244]	; (8005ef4 <atanf+0x1fc>)
 8005dfe:	f7fa fde9 	bl	80009d4 <__aeabi_fsub>
 8005e02:	4629      	mov	r1, r5
 8005e04:	f7fa fef0 	bl	8000be8 <__aeabi_fmul>
 8005e08:	493b      	ldr	r1, [pc, #236]	; (8005ef8 <atanf+0x200>)
 8005e0a:	f7fa fde3 	bl	80009d4 <__aeabi_fsub>
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa feea 	bl	8000be8 <__aeabi_fmul>
 8005e14:	4601      	mov	r1, r0
 8005e16:	4638      	mov	r0, r7
 8005e18:	f7fa fdde 	bl	80009d8 <__addsf3>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	f7fa fee3 	bl	8000be8 <__aeabi_fmul>
 8005e22:	1c73      	adds	r3, r6, #1
 8005e24:	4601      	mov	r1, r0
 8005e26:	d133      	bne.n	8005e90 <atanf+0x198>
 8005e28:	4620      	mov	r0, r4
 8005e2a:	f7fa fdd3 	bl	80009d4 <__aeabi_fsub>
 8005e2e:	e772      	b.n	8005d16 <atanf+0x1e>
 8005e30:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e34:	f7fa fdce 	bl	80009d4 <__aeabi_fsub>
 8005e38:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e3c:	4605      	mov	r5, r0
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f7fa fdca 	bl	80009d8 <__addsf3>
 8005e44:	4601      	mov	r1, r0
 8005e46:	4628      	mov	r0, r5
 8005e48:	f7fa ff82 	bl	8000d50 <__aeabi_fdiv>
 8005e4c:	2601      	movs	r6, #1
 8005e4e:	4604      	mov	r4, r0
 8005e50:	e799      	b.n	8005d86 <atanf+0x8e>
 8005e52:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <atanf+0x204>)
 8005e54:	429d      	cmp	r5, r3
 8005e56:	dc14      	bgt.n	8005e82 <atanf+0x18a>
 8005e58:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005e5c:	f7fa fdba 	bl	80009d4 <__aeabi_fsub>
 8005e60:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8005e64:	4605      	mov	r5, r0
 8005e66:	4620      	mov	r0, r4
 8005e68:	f7fa febe 	bl	8000be8 <__aeabi_fmul>
 8005e6c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8005e70:	f7fa fdb2 	bl	80009d8 <__addsf3>
 8005e74:	4601      	mov	r1, r0
 8005e76:	4628      	mov	r0, r5
 8005e78:	f7fa ff6a 	bl	8000d50 <__aeabi_fdiv>
 8005e7c:	2602      	movs	r6, #2
 8005e7e:	4604      	mov	r4, r0
 8005e80:	e781      	b.n	8005d86 <atanf+0x8e>
 8005e82:	4601      	mov	r1, r0
 8005e84:	481e      	ldr	r0, [pc, #120]	; (8005f00 <atanf+0x208>)
 8005e86:	f7fa ff63 	bl	8000d50 <__aeabi_fdiv>
 8005e8a:	2603      	movs	r6, #3
 8005e8c:	4604      	mov	r4, r0
 8005e8e:	e77a      	b.n	8005d86 <atanf+0x8e>
 8005e90:	4b1c      	ldr	r3, [pc, #112]	; (8005f04 <atanf+0x20c>)
 8005e92:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
 8005e96:	f7fa fd9d 	bl	80009d4 <__aeabi_fsub>
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	f7fa fd9a 	bl	80009d4 <__aeabi_fsub>
 8005ea0:	4b19      	ldr	r3, [pc, #100]	; (8005f08 <atanf+0x210>)
 8005ea2:	4601      	mov	r1, r0
 8005ea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005ea8:	f7fa fd94 	bl	80009d4 <__aeabi_fsub>
 8005eac:	f1b8 0f00 	cmp.w	r8, #0
 8005eb0:	4604      	mov	r4, r0
 8005eb2:	f6bf af36 	bge.w	8005d22 <atanf+0x2a>
 8005eb6:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
 8005eba:	e72c      	b.n	8005d16 <atanf+0x1e>
 8005ebc:	4c13      	ldr	r4, [pc, #76]	; (8005f0c <atanf+0x214>)
 8005ebe:	e730      	b.n	8005d22 <atanf+0x2a>
 8005ec0:	bfc90fdb 	.word	0xbfc90fdb
 8005ec4:	3edfffff 	.word	0x3edfffff
 8005ec8:	7149f2ca 	.word	0x7149f2ca
 8005ecc:	3f97ffff 	.word	0x3f97ffff
 8005ed0:	3c8569d7 	.word	0x3c8569d7
 8005ed4:	3d4bda59 	.word	0x3d4bda59
 8005ed8:	3d886b35 	.word	0x3d886b35
 8005edc:	3dba2e6e 	.word	0x3dba2e6e
 8005ee0:	3e124925 	.word	0x3e124925
 8005ee4:	3eaaaaab 	.word	0x3eaaaaab
 8005ee8:	bd15a221 	.word	0xbd15a221
 8005eec:	3d6ef16b 	.word	0x3d6ef16b
 8005ef0:	3d9d8795 	.word	0x3d9d8795
 8005ef4:	3de38e38 	.word	0x3de38e38
 8005ef8:	3e4ccccd 	.word	0x3e4ccccd
 8005efc:	401bffff 	.word	0x401bffff
 8005f00:	bf800000 	.word	0xbf800000
 8005f04:	08005fec 	.word	0x08005fec
 8005f08:	08005fdc 	.word	0x08005fdc
 8005f0c:	3fc90fdb 	.word	0x3fc90fdb

08005f10 <fabsf>:
 8005f10:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8005f14:	4770      	bx	lr
	...

08005f18 <__errno>:
 8005f18:	4b01      	ldr	r3, [pc, #4]	; (8005f20 <__errno+0x8>)
 8005f1a:	6818      	ldr	r0, [r3, #0]
 8005f1c:	4770      	bx	lr
 8005f1e:	bf00      	nop
 8005f20:	20000028 	.word	0x20000028

08005f24 <__libc_init_array>:
 8005f24:	b570      	push	{r4, r5, r6, lr}
 8005f26:	2600      	movs	r6, #0
 8005f28:	4d0c      	ldr	r5, [pc, #48]	; (8005f5c <__libc_init_array+0x38>)
 8005f2a:	4c0d      	ldr	r4, [pc, #52]	; (8005f60 <__libc_init_array+0x3c>)
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	42a6      	cmp	r6, r4
 8005f32:	d109      	bne.n	8005f48 <__libc_init_array+0x24>
 8005f34:	f000 f822 	bl	8005f7c <_init>
 8005f38:	2600      	movs	r6, #0
 8005f3a:	4d0a      	ldr	r5, [pc, #40]	; (8005f64 <__libc_init_array+0x40>)
 8005f3c:	4c0a      	ldr	r4, [pc, #40]	; (8005f68 <__libc_init_array+0x44>)
 8005f3e:	1b64      	subs	r4, r4, r5
 8005f40:	10a4      	asrs	r4, r4, #2
 8005f42:	42a6      	cmp	r6, r4
 8005f44:	d105      	bne.n	8005f52 <__libc_init_array+0x2e>
 8005f46:	bd70      	pop	{r4, r5, r6, pc}
 8005f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4c:	4798      	blx	r3
 8005f4e:	3601      	adds	r6, #1
 8005f50:	e7ee      	b.n	8005f30 <__libc_init_array+0xc>
 8005f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f56:	4798      	blx	r3
 8005f58:	3601      	adds	r6, #1
 8005f5a:	e7f2      	b.n	8005f42 <__libc_init_array+0x1e>
 8005f5c:	08005ffc 	.word	0x08005ffc
 8005f60:	08005ffc 	.word	0x08005ffc
 8005f64:	08005ffc 	.word	0x08005ffc
 8005f68:	08006000 	.word	0x08006000

08005f6c <memset>:
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	4402      	add	r2, r0
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d100      	bne.n	8005f76 <memset+0xa>
 8005f74:	4770      	bx	lr
 8005f76:	f803 1b01 	strb.w	r1, [r3], #1
 8005f7a:	e7f9      	b.n	8005f70 <memset+0x4>

08005f7c <_init>:
 8005f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7e:	bf00      	nop
 8005f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f82:	bc08      	pop	{r3}
 8005f84:	469e      	mov	lr, r3
 8005f86:	4770      	bx	lr

08005f88 <_fini>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	bf00      	nop
 8005f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f8e:	bc08      	pop	{r3}
 8005f90:	469e      	mov	lr, r3
 8005f92:	4770      	bx	lr
