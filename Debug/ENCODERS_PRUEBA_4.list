
ENCODERS_PRUEBA_4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d80  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08004e90  08004e90  00005e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ebc  08004ebc  00006018  2**0
                  CONTENTS
  4 .ARM          00000000  08004ebc  08004ebc  00006018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ebc  08004ebc  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ebc  08004ebc  00005ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ec0  08004ec0  00005ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004ec4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000018  08004edc  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000238  08004edc  00006238  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0aa  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c3c  00000000  00000000  000140eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  00015d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b7a  00000000  00000000  00016b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b2c  00000000  00000000  00017702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104a6  00000000  00000000  0002f22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ca12  00000000  00000000  0003f6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc0e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004078  00000000  00000000  000cc12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000d01a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08004e78 	.word	0x08004e78

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08004e78 	.word	0x08004e78

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__aeabi_d2iz>:
 800071c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000720:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000724:	d215      	bcs.n	8000752 <__aeabi_d2iz+0x36>
 8000726:	d511      	bpl.n	800074c <__aeabi_d2iz+0x30>
 8000728:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800072c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000730:	d912      	bls.n	8000758 <__aeabi_d2iz+0x3c>
 8000732:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000736:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800073a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800073e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000742:	fa23 f002 	lsr.w	r0, r3, r2
 8000746:	bf18      	it	ne
 8000748:	4240      	negne	r0, r0
 800074a:	4770      	bx	lr
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	4770      	bx	lr
 8000752:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000756:	d105      	bne.n	8000764 <__aeabi_d2iz+0x48>
 8000758:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800075c:	bf08      	it	eq
 800075e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000762:	4770      	bx	lr
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop

0800076c <__aeabi_frsub>:
 800076c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000770:	e002      	b.n	8000778 <__addsf3>
 8000772:	bf00      	nop

08000774 <__aeabi_fsub>:
 8000774:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000778 <__addsf3>:
 8000778:	0042      	lsls	r2, r0, #1
 800077a:	bf1f      	itttt	ne
 800077c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000780:	ea92 0f03 	teqne	r2, r3
 8000784:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000788:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800078c:	d06a      	beq.n	8000864 <__addsf3+0xec>
 800078e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000792:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000796:	bfc1      	itttt	gt
 8000798:	18d2      	addgt	r2, r2, r3
 800079a:	4041      	eorgt	r1, r0
 800079c:	4048      	eorgt	r0, r1
 800079e:	4041      	eorgt	r1, r0
 80007a0:	bfb8      	it	lt
 80007a2:	425b      	neglt	r3, r3
 80007a4:	2b19      	cmp	r3, #25
 80007a6:	bf88      	it	hi
 80007a8:	4770      	bxhi	lr
 80007aa:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007ae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80007b6:	bf18      	it	ne
 80007b8:	4240      	negne	r0, r0
 80007ba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80007be:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80007c2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80007c6:	bf18      	it	ne
 80007c8:	4249      	negne	r1, r1
 80007ca:	ea92 0f03 	teq	r2, r3
 80007ce:	d03f      	beq.n	8000850 <__addsf3+0xd8>
 80007d0:	f1a2 0201 	sub.w	r2, r2, #1
 80007d4:	fa41 fc03 	asr.w	ip, r1, r3
 80007d8:	eb10 000c 	adds.w	r0, r0, ip
 80007dc:	f1c3 0320 	rsb	r3, r3, #32
 80007e0:	fa01 f103 	lsl.w	r1, r1, r3
 80007e4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007e8:	d502      	bpl.n	80007f0 <__addsf3+0x78>
 80007ea:	4249      	negs	r1, r1
 80007ec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80007f0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80007f4:	d313      	bcc.n	800081e <__addsf3+0xa6>
 80007f6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80007fa:	d306      	bcc.n	800080a <__addsf3+0x92>
 80007fc:	0840      	lsrs	r0, r0, #1
 80007fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000802:	f102 0201 	add.w	r2, r2, #1
 8000806:	2afe      	cmp	r2, #254	@ 0xfe
 8000808:	d251      	bcs.n	80008ae <__addsf3+0x136>
 800080a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800080e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000812:	bf08      	it	eq
 8000814:	f020 0001 	biceq.w	r0, r0, #1
 8000818:	ea40 0003 	orr.w	r0, r0, r3
 800081c:	4770      	bx	lr
 800081e:	0049      	lsls	r1, r1, #1
 8000820:	eb40 0000 	adc.w	r0, r0, r0
 8000824:	3a01      	subs	r2, #1
 8000826:	bf28      	it	cs
 8000828:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 800082c:	d2ed      	bcs.n	800080a <__addsf3+0x92>
 800082e:	fab0 fc80 	clz	ip, r0
 8000832:	f1ac 0c08 	sub.w	ip, ip, #8
 8000836:	ebb2 020c 	subs.w	r2, r2, ip
 800083a:	fa00 f00c 	lsl.w	r0, r0, ip
 800083e:	bfaa      	itet	ge
 8000840:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000844:	4252      	neglt	r2, r2
 8000846:	4318      	orrge	r0, r3
 8000848:	bfbc      	itt	lt
 800084a:	40d0      	lsrlt	r0, r2
 800084c:	4318      	orrlt	r0, r3
 800084e:	4770      	bx	lr
 8000850:	f092 0f00 	teq	r2, #0
 8000854:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000858:	bf06      	itte	eq
 800085a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 800085e:	3201      	addeq	r2, #1
 8000860:	3b01      	subne	r3, #1
 8000862:	e7b5      	b.n	80007d0 <__addsf3+0x58>
 8000864:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000868:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800086c:	bf18      	it	ne
 800086e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000872:	d021      	beq.n	80008b8 <__addsf3+0x140>
 8000874:	ea92 0f03 	teq	r2, r3
 8000878:	d004      	beq.n	8000884 <__addsf3+0x10c>
 800087a:	f092 0f00 	teq	r2, #0
 800087e:	bf08      	it	eq
 8000880:	4608      	moveq	r0, r1
 8000882:	4770      	bx	lr
 8000884:	ea90 0f01 	teq	r0, r1
 8000888:	bf1c      	itt	ne
 800088a:	2000      	movne	r0, #0
 800088c:	4770      	bxne	lr
 800088e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000892:	d104      	bne.n	800089e <__addsf3+0x126>
 8000894:	0040      	lsls	r0, r0, #1
 8000896:	bf28      	it	cs
 8000898:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 800089c:	4770      	bx	lr
 800089e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008a2:	bf3c      	itt	cc
 80008a4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008a8:	4770      	bxcc	lr
 80008aa:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008ae:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008b2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008b6:	4770      	bx	lr
 80008b8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80008bc:	bf16      	itet	ne
 80008be:	4608      	movne	r0, r1
 80008c0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80008c4:	4601      	movne	r1, r0
 80008c6:	0242      	lsls	r2, r0, #9
 80008c8:	bf06      	itte	eq
 80008ca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80008ce:	ea90 0f01 	teqeq	r0, r1
 80008d2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80008d6:	4770      	bx	lr

080008d8 <__aeabi_ui2f>:
 80008d8:	f04f 0300 	mov.w	r3, #0
 80008dc:	e004      	b.n	80008e8 <__aeabi_i2f+0x8>
 80008de:	bf00      	nop

080008e0 <__aeabi_i2f>:
 80008e0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80008e4:	bf48      	it	mi
 80008e6:	4240      	negmi	r0, r0
 80008e8:	ea5f 0c00 	movs.w	ip, r0
 80008ec:	bf08      	it	eq
 80008ee:	4770      	bxeq	lr
 80008f0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80008f4:	4601      	mov	r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	e01c      	b.n	8000936 <__aeabi_l2f+0x2a>

080008fc <__aeabi_ul2f>:
 80008fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000900:	bf08      	it	eq
 8000902:	4770      	bxeq	lr
 8000904:	f04f 0300 	mov.w	r3, #0
 8000908:	e00a      	b.n	8000920 <__aeabi_l2f+0x14>
 800090a:	bf00      	nop

0800090c <__aeabi_l2f>:
 800090c:	ea50 0201 	orrs.w	r2, r0, r1
 8000910:	bf08      	it	eq
 8000912:	4770      	bxeq	lr
 8000914:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000918:	d502      	bpl.n	8000920 <__aeabi_l2f+0x14>
 800091a:	4240      	negs	r0, r0
 800091c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000920:	ea5f 0c01 	movs.w	ip, r1
 8000924:	bf02      	ittt	eq
 8000926:	4684      	moveq	ip, r0
 8000928:	4601      	moveq	r1, r0
 800092a:	2000      	moveq	r0, #0
 800092c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000930:	bf08      	it	eq
 8000932:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000936:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800093a:	fabc f28c 	clz	r2, ip
 800093e:	3a08      	subs	r2, #8
 8000940:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000944:	db10      	blt.n	8000968 <__aeabi_l2f+0x5c>
 8000946:	fa01 fc02 	lsl.w	ip, r1, r2
 800094a:	4463      	add	r3, ip
 800094c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000950:	f1c2 0220 	rsb	r2, r2, #32
 8000954:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000958:	fa20 f202 	lsr.w	r2, r0, r2
 800095c:	eb43 0002 	adc.w	r0, r3, r2
 8000960:	bf08      	it	eq
 8000962:	f020 0001 	biceq.w	r0, r0, #1
 8000966:	4770      	bx	lr
 8000968:	f102 0220 	add.w	r2, r2, #32
 800096c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000970:	f1c2 0220 	rsb	r2, r2, #32
 8000974:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000978:	fa21 f202 	lsr.w	r2, r1, r2
 800097c:	eb43 0002 	adc.w	r0, r3, r2
 8000980:	bf08      	it	eq
 8000982:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000986:	4770      	bx	lr

08000988 <__aeabi_fmul>:
 8000988:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800098c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000990:	bf1e      	ittt	ne
 8000992:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000996:	ea92 0f0c 	teqne	r2, ip
 800099a:	ea93 0f0c 	teqne	r3, ip
 800099e:	d06f      	beq.n	8000a80 <__aeabi_fmul+0xf8>
 80009a0:	441a      	add	r2, r3
 80009a2:	ea80 0c01 	eor.w	ip, r0, r1
 80009a6:	0240      	lsls	r0, r0, #9
 80009a8:	bf18      	it	ne
 80009aa:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009ae:	d01e      	beq.n	80009ee <__aeabi_fmul+0x66>
 80009b0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80009b4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80009b8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80009bc:	fba0 3101 	umull	r3, r1, r0, r1
 80009c0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009c4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80009c8:	bf3e      	ittt	cc
 80009ca:	0049      	lslcc	r1, r1, #1
 80009cc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80009d0:	005b      	lslcc	r3, r3, #1
 80009d2:	ea40 0001 	orr.w	r0, r0, r1
 80009d6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80009da:	2afd      	cmp	r2, #253	@ 0xfd
 80009dc:	d81d      	bhi.n	8000a1a <__aeabi_fmul+0x92>
 80009de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80009e2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009e6:	bf08      	it	eq
 80009e8:	f020 0001 	biceq.w	r0, r0, #1
 80009ec:	4770      	bx	lr
 80009ee:	f090 0f00 	teq	r0, #0
 80009f2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80009f6:	bf08      	it	eq
 80009f8:	0249      	lsleq	r1, r1, #9
 80009fa:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80009fe:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a02:	3a7f      	subs	r2, #127	@ 0x7f
 8000a04:	bfc2      	ittt	gt
 8000a06:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a0a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a0e:	4770      	bxgt	lr
 8000a10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a14:	f04f 0300 	mov.w	r3, #0
 8000a18:	3a01      	subs	r2, #1
 8000a1a:	dc5d      	bgt.n	8000ad8 <__aeabi_fmul+0x150>
 8000a1c:	f112 0f19 	cmn.w	r2, #25
 8000a20:	bfdc      	itt	le
 8000a22:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a26:	4770      	bxle	lr
 8000a28:	f1c2 0200 	rsb	r2, r2, #0
 8000a2c:	0041      	lsls	r1, r0, #1
 8000a2e:	fa21 f102 	lsr.w	r1, r1, r2
 8000a32:	f1c2 0220 	rsb	r2, r2, #32
 8000a36:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a3a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a3e:	f140 0000 	adc.w	r0, r0, #0
 8000a42:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a46:	bf08      	it	eq
 8000a48:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a4c:	4770      	bx	lr
 8000a4e:	f092 0f00 	teq	r2, #0
 8000a52:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0040      	lsleq	r0, r0, #1
 8000a5a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a5e:	3a01      	subeq	r2, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fmul+0xce>
 8000a62:	ea40 000c 	orr.w	r0, r0, ip
 8000a66:	f093 0f00 	teq	r3, #0
 8000a6a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a6e:	bf02      	ittt	eq
 8000a70:	0049      	lsleq	r1, r1, #1
 8000a72:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a76:	3b01      	subeq	r3, #1
 8000a78:	d0f9      	beq.n	8000a6e <__aeabi_fmul+0xe6>
 8000a7a:	ea41 010c 	orr.w	r1, r1, ip
 8000a7e:	e78f      	b.n	80009a0 <__aeabi_fmul+0x18>
 8000a80:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a84:	ea92 0f0c 	teq	r2, ip
 8000a88:	bf18      	it	ne
 8000a8a:	ea93 0f0c 	teqne	r3, ip
 8000a8e:	d00a      	beq.n	8000aa6 <__aeabi_fmul+0x11e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9a:	d1d8      	bne.n	8000a4e <__aeabi_fmul+0xc6>
 8000a9c:	ea80 0001 	eor.w	r0, r0, r1
 8000aa0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000aa4:	4770      	bx	lr
 8000aa6:	f090 0f00 	teq	r0, #0
 8000aaa:	bf17      	itett	ne
 8000aac:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	f091 0f00 	teqne	r1, #0
 8000ab6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000aba:	d014      	beq.n	8000ae6 <__aeabi_fmul+0x15e>
 8000abc:	ea92 0f0c 	teq	r2, ip
 8000ac0:	d101      	bne.n	8000ac6 <__aeabi_fmul+0x13e>
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	d10f      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ac6:	ea93 0f0c 	teq	r3, ip
 8000aca:	d103      	bne.n	8000ad4 <__aeabi_fmul+0x14c>
 8000acc:	024b      	lsls	r3, r1, #9
 8000ace:	bf18      	it	ne
 8000ad0:	4608      	movne	r0, r1
 8000ad2:	d108      	bne.n	8000ae6 <__aeabi_fmul+0x15e>
 8000ad4:	ea80 0001 	eor.w	r0, r0, r1
 8000ad8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000adc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae4:	4770      	bx	lr
 8000ae6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aea:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_fdiv>:
 8000af0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000af4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000af8:	bf1e      	ittt	ne
 8000afa:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000afe:	ea92 0f0c 	teqne	r2, ip
 8000b02:	ea93 0f0c 	teqne	r3, ip
 8000b06:	d069      	beq.n	8000bdc <__aeabi_fdiv+0xec>
 8000b08:	eba2 0203 	sub.w	r2, r2, r3
 8000b0c:	ea80 0c01 	eor.w	ip, r0, r1
 8000b10:	0249      	lsls	r1, r1, #9
 8000b12:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b16:	d037      	beq.n	8000b88 <__aeabi_fdiv+0x98>
 8000b18:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b1c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b20:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b24:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b28:	428b      	cmp	r3, r1
 8000b2a:	bf38      	it	cc
 8000b2c:	005b      	lslcc	r3, r3, #1
 8000b2e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b32:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b36:	428b      	cmp	r3, r1
 8000b38:	bf24      	itt	cs
 8000b3a:	1a5b      	subcs	r3, r3, r1
 8000b3c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b40:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b44:	bf24      	itt	cs
 8000b46:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b4a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b52:	bf24      	itt	cs
 8000b54:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000b58:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b5c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000b60:	bf24      	itt	cs
 8000b62:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000b66:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b6a:	011b      	lsls	r3, r3, #4
 8000b6c:	bf18      	it	ne
 8000b6e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b72:	d1e0      	bne.n	8000b36 <__aeabi_fdiv+0x46>
 8000b74:	2afd      	cmp	r2, #253	@ 0xfd
 8000b76:	f63f af50 	bhi.w	8000a1a <__aeabi_fmul+0x92>
 8000b7a:	428b      	cmp	r3, r1
 8000b7c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000b8c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b90:	327f      	adds	r2, #127	@ 0x7f
 8000b92:	bfc2      	ittt	gt
 8000b94:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000b98:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b9c:	4770      	bxgt	lr
 8000b9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ba2:	f04f 0300 	mov.w	r3, #0
 8000ba6:	3a01      	subs	r2, #1
 8000ba8:	e737      	b.n	8000a1a <__aeabi_fmul+0x92>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bb2:	bf02      	ittt	eq
 8000bb4:	0040      	lsleq	r0, r0, #1
 8000bb6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000bba:	3a01      	subeq	r2, #1
 8000bbc:	d0f9      	beq.n	8000bb2 <__aeabi_fdiv+0xc2>
 8000bbe:	ea40 000c 	orr.w	r0, r0, ip
 8000bc2:	f093 0f00 	teq	r3, #0
 8000bc6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bca:	bf02      	ittt	eq
 8000bcc:	0049      	lsleq	r1, r1, #1
 8000bce:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000bd2:	3b01      	subeq	r3, #1
 8000bd4:	d0f9      	beq.n	8000bca <__aeabi_fdiv+0xda>
 8000bd6:	ea41 010c 	orr.w	r1, r1, ip
 8000bda:	e795      	b.n	8000b08 <__aeabi_fdiv+0x18>
 8000bdc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000be0:	ea92 0f0c 	teq	r2, ip
 8000be4:	d108      	bne.n	8000bf8 <__aeabi_fdiv+0x108>
 8000be6:	0242      	lsls	r2, r0, #9
 8000be8:	f47f af7d 	bne.w	8000ae6 <__aeabi_fmul+0x15e>
 8000bec:	ea93 0f0c 	teq	r3, ip
 8000bf0:	f47f af70 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000bf4:	4608      	mov	r0, r1
 8000bf6:	e776      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000bf8:	ea93 0f0c 	teq	r3, ip
 8000bfc:	d104      	bne.n	8000c08 <__aeabi_fdiv+0x118>
 8000bfe:	024b      	lsls	r3, r1, #9
 8000c00:	f43f af4c 	beq.w	8000a9c <__aeabi_fmul+0x114>
 8000c04:	4608      	mov	r0, r1
 8000c06:	e76e      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c08:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c0c:	bf18      	it	ne
 8000c0e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c12:	d1ca      	bne.n	8000baa <__aeabi_fdiv+0xba>
 8000c14:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c18:	f47f af5c 	bne.w	8000ad4 <__aeabi_fmul+0x14c>
 8000c1c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c20:	f47f af3c 	bne.w	8000a9c <__aeabi_fmul+0x114>
 8000c24:	e75f      	b.n	8000ae6 <__aeabi_fmul+0x15e>
 8000c26:	bf00      	nop

08000c28 <__gesf2>:
 8000c28:	f04f 3cff 	mov.w	ip, #4294967295
 8000c2c:	e006      	b.n	8000c3c <__cmpsf2+0x4>
 8000c2e:	bf00      	nop

08000c30 <__lesf2>:
 8000c30:	f04f 0c01 	mov.w	ip, #1
 8000c34:	e002      	b.n	8000c3c <__cmpsf2+0x4>
 8000c36:	bf00      	nop

08000c38 <__cmpsf2>:
 8000c38:	f04f 0c01 	mov.w	ip, #1
 8000c3c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c40:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c44:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c4c:	bf18      	it	ne
 8000c4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c52:	d011      	beq.n	8000c78 <__cmpsf2+0x40>
 8000c54:	b001      	add	sp, #4
 8000c56:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000c5a:	bf18      	it	ne
 8000c5c:	ea90 0f01 	teqne	r0, r1
 8000c60:	bf58      	it	pl
 8000c62:	ebb2 0003 	subspl.w	r0, r2, r3
 8000c66:	bf88      	it	hi
 8000c68:	17c8      	asrhi	r0, r1, #31
 8000c6a:	bf38      	it	cc
 8000c6c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000c70:	bf18      	it	ne
 8000c72:	f040 0001 	orrne.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c7c:	d102      	bne.n	8000c84 <__cmpsf2+0x4c>
 8000c7e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000c82:	d105      	bne.n	8000c90 <__cmpsf2+0x58>
 8000c84:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000c88:	d1e4      	bne.n	8000c54 <__cmpsf2+0x1c>
 8000c8a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000c8e:	d0e1      	beq.n	8000c54 <__cmpsf2+0x1c>
 8000c90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_cfrcmple>:
 8000c98:	4684      	mov	ip, r0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	4661      	mov	r1, ip
 8000c9e:	e7ff      	b.n	8000ca0 <__aeabi_cfcmpeq>

08000ca0 <__aeabi_cfcmpeq>:
 8000ca0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ca2:	f7ff ffc9 	bl	8000c38 <__cmpsf2>
 8000ca6:	2800      	cmp	r0, #0
 8000ca8:	bf48      	it	mi
 8000caa:	f110 0f00 	cmnmi.w	r0, #0
 8000cae:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cb0 <__aeabi_fcmpeq>:
 8000cb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cb4:	f7ff fff4 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000cb8:	bf0c      	ite	eq
 8000cba:	2001      	moveq	r0, #1
 8000cbc:	2000      	movne	r0, #0
 8000cbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_fcmplt>:
 8000cc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cc8:	f7ff ffea 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ccc:	bf34      	ite	cc
 8000cce:	2001      	movcc	r0, #1
 8000cd0:	2000      	movcs	r0, #0
 8000cd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_fcmple>:
 8000cd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cdc:	f7ff ffe0 	bl	8000ca0 <__aeabi_cfcmpeq>
 8000ce0:	bf94      	ite	ls
 8000ce2:	2001      	movls	r0, #1
 8000ce4:	2000      	movhi	r0, #0
 8000ce6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cea:	bf00      	nop

08000cec <__aeabi_fcmpge>:
 8000cec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf0:	f7ff ffd2 	bl	8000c98 <__aeabi_cfrcmple>
 8000cf4:	bf94      	ite	ls
 8000cf6:	2001      	movls	r0, #1
 8000cf8:	2000      	movhi	r0, #0
 8000cfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cfe:	bf00      	nop

08000d00 <__aeabi_fcmpgt>:
 8000d00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d04:	f7ff ffc8 	bl	8000c98 <__aeabi_cfrcmple>
 8000d08:	bf34      	ite	cc
 8000d0a:	2001      	movcc	r0, #1
 8000d0c:	2000      	movcs	r0, #0
 8000d0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d12:	bf00      	nop

08000d14 <__aeabi_f2uiz>:
 8000d14:	0042      	lsls	r2, r0, #1
 8000d16:	d20e      	bcs.n	8000d36 <__aeabi_f2uiz+0x22>
 8000d18:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d1c:	d30b      	bcc.n	8000d36 <__aeabi_f2uiz+0x22>
 8000d1e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d22:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d26:	d409      	bmi.n	8000d3c <__aeabi_f2uiz+0x28>
 8000d28:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d30:	fa23 f002 	lsr.w	r0, r3, r2
 8000d34:	4770      	bx	lr
 8000d36:	f04f 0000 	mov.w	r0, #0
 8000d3a:	4770      	bx	lr
 8000d3c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d40:	d101      	bne.n	8000d46 <__aeabi_f2uiz+0x32>
 8000d42:	0242      	lsls	r2, r0, #9
 8000d44:	d102      	bne.n	8000d4c <__aeabi_f2uiz+0x38>
 8000d46:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4a:	4770      	bx	lr
 8000d4c:	f04f 0000 	mov.w	r0, #0
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	0000      	movs	r0, r0
	...

08000d58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d5a:	b0ab      	sub	sp, #172	@ 0xac
 8000d5c:	af0e      	add	r7, sp, #56	@ 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d5e:	f001 fa99 	bl	8002294 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d62:	f000 fa11 	bl	8001188 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d66:	f000 fbcf 	bl	8001508 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d6a:	f000 fa81 	bl	8001270 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000d6e:	f000 fad3 	bl	8001318 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d72:	f000 fb25 	bl	80013c0 <MX_TIM4_Init>
  MX_I2C2_Init();
 8000d76:	f000 fa4d 	bl	8001214 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8000d7a:	f000 fb9b 	bl	80014b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //Dron Innit
  Init_IMU();
 8000d7e:	f000 fc29 	bl	80015d4 <Init_IMU>
  HAL_Delay(100);
 8000d82:	2064      	movs	r0, #100	@ 0x64
 8000d84:	f001 fae8 	bl	8002358 <HAL_Delay>
  mag_offset = ComputeMagOffset(500, 10);
 8000d88:	4c9f      	ldr	r4, [pc, #636]	@ (8001008 <main+0x2b0>)
 8000d8a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d8e:	220a      	movs	r2, #10
 8000d90:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000d94:	4618      	mov	r0, r3
 8000d96:	f000 fec7 	bl	8001b28 <ComputeMagOffset>
 8000d9a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000d9e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000da2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mag_scale = ComputeMagScale(500, 10, mag_offset);
 8000da6:	4e99      	ldr	r6, [pc, #612]	@ (800100c <main+0x2b4>)
 8000da8:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8000dac:	4b96      	ldr	r3, [pc, #600]	@ (8001008 <main+0x2b0>)
 8000dae:	466d      	mov	r5, sp
 8000db0:	1d1a      	adds	r2, r3, #4
 8000db2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000db6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	220a      	movs	r2, #10
 8000dbe:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000dc2:	4620      	mov	r0, r4
 8000dc4:	f000 ff92 	bl	8001cec <ComputeMagScale>
 8000dc8:	4634      	mov	r4, r6
 8000dca:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000dce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000dd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  HAL_Delay(100);
 8000dd6:	2064      	movs	r0, #100	@ 0x64
 8000dd8:	f001 fabe 	bl	8002358 <HAL_Delay>
  //Dron fin Innit

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ddc:	213c      	movs	r1, #60	@ 0x3c
 8000dde:	488c      	ldr	r0, [pc, #560]	@ (8001010 <main+0x2b8>)
 8000de0:	f003 fb78 	bl	80044d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000de4:	213c      	movs	r1, #60	@ 0x3c
 8000de6:	488b      	ldr	r0, [pc, #556]	@ (8001014 <main+0x2bc>)
 8000de8:	f003 fb74 	bl	80044d4 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	488a      	ldr	r0, [pc, #552]	@ (8001018 <main+0x2c0>)
 8000df0:	f003 fa2c 	bl	800424c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000df4:	2104      	movs	r1, #4
 8000df6:	4888      	ldr	r0, [pc, #544]	@ (8001018 <main+0x2c0>)
 8000df8:	f003 fa28 	bl	800424c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	4886      	ldr	r0, [pc, #536]	@ (8001018 <main+0x2c0>)
 8000e00:	f003 fa24 	bl	800424c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8000e04:	210c      	movs	r1, #12
 8000e06:	4884      	ldr	r0, [pc, #528]	@ (8001018 <main+0x2c0>)
 8000e08:	f003 fa20 	bl	800424c <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000e0c:	4b82      	ldr	r3, [pc, #520]	@ (8001018 <main+0x2c0>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2200      	movs	r2, #0
 8000e12:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000e14:	4b80      	ldr	r3, [pc, #512]	@ (8001018 <main+0x2c0>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	639a      	str	r2, [r3, #56]	@ 0x38
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8000e1c:	4b7e      	ldr	r3, [pc, #504]	@ (8001018 <main+0x2c0>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	2200      	movs	r2, #0
 8000e22:	63da      	str	r2, [r3, #60]	@ 0x3c
  __HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8000e24:	4b7c      	ldr	r3, [pc, #496]	@ (8001018 <main+0x2c0>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	641a      	str	r2, [r3, #64]	@ 0x40
  // Leer posición inicial
  enc1_ini = __HAL_TIM_GET_COUNTER(&htim2); // Encoder 1
 8000e2c:	4b78      	ldr	r3, [pc, #480]	@ (8001010 <main+0x2b8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e32:	461a      	mov	r2, r3
 8000e34:	4b79      	ldr	r3, [pc, #484]	@ (800101c <main+0x2c4>)
 8000e36:	601a      	str	r2, [r3, #0]
  enc2_ini = __HAL_TIM_GET_COUNTER(&htim3); // Encoder 2
 8000e38:	4b76      	ldr	r3, [pc, #472]	@ (8001014 <main+0x2bc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e3e:	461a      	mov	r2, r3
 8000e40:	4b77      	ldr	r3, [pc, #476]	@ (8001020 <main+0x2c8>)
 8000e42:	601a      	str	r2, [r3, #0]
  enc3_ini = encoder3_count; // Encoder 3 por interrupción
 8000e44:	4b77      	ldr	r3, [pc, #476]	@ (8001024 <main+0x2cc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a77      	ldr	r2, [pc, #476]	@ (8001028 <main+0x2d0>)
 8000e4a:	6013      	str	r3, [r2, #0]
  enc4_ini = encoder4_count; // Encoder 4 por interrupción
 8000e4c:	4b77      	ldr	r3, [pc, #476]	@ (800102c <main+0x2d4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a77      	ldr	r2, [pc, #476]	@ (8001030 <main+0x2d8>)
 8000e52:	6013      	str	r3, [r2, #0]

  objetivo1 = distancia_cm * ENC1_PULSOS_CM;  //Calcular pulsos
 8000e54:	4b77      	ldr	r3, [pc, #476]	@ (8001034 <main+0x2dc>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fc07 	bl	800066c <__aeabi_f2d>
 8000e5e:	a362      	add	r3, pc, #392	@ (adr r3, 8000fe8 <main+0x290>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	f7ff f974 	bl	8000150 <__aeabi_dmul>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	460b      	mov	r3, r1
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f7ff fc54 	bl	800071c <__aeabi_d2iz>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4a70      	ldr	r2, [pc, #448]	@ (8001038 <main+0x2e0>)
 8000e78:	6013      	str	r3, [r2, #0]
  objetivo2 = distancia_cm * ENC2_PULSOS_CM;
 8000e7a:	4b6e      	ldr	r3, [pc, #440]	@ (8001034 <main+0x2dc>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff fbf4 	bl	800066c <__aeabi_f2d>
 8000e84:	a35a      	add	r3, pc, #360	@ (adr r3, 8000ff0 <main+0x298>)
 8000e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8a:	f7ff f961 	bl	8000150 <__aeabi_dmul>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	460b      	mov	r3, r1
 8000e92:	4610      	mov	r0, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	f7ff fc41 	bl	800071c <__aeabi_d2iz>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	4a67      	ldr	r2, [pc, #412]	@ (800103c <main+0x2e4>)
 8000e9e:	6013      	str	r3, [r2, #0]
  objetivo3 = distancia_cm * ENC3_PULSOS_CM;
 8000ea0:	4b64      	ldr	r3, [pc, #400]	@ (8001034 <main+0x2dc>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fbe1 	bl	800066c <__aeabi_f2d>
 8000eaa:	a353      	add	r3, pc, #332	@ (adr r3, 8000ff8 <main+0x2a0>)
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f7ff f94e 	bl	8000150 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4610      	mov	r0, r2
 8000eba:	4619      	mov	r1, r3
 8000ebc:	f7ff fc2e 	bl	800071c <__aeabi_d2iz>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	4a5f      	ldr	r2, [pc, #380]	@ (8001040 <main+0x2e8>)
 8000ec4:	6013      	str	r3, [r2, #0]
  objetivo4 = distancia_cm * ENC4_PULSOS_CM;
 8000ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8001034 <main+0x2dc>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fbce 	bl	800066c <__aeabi_f2d>
 8000ed0:	a34b      	add	r3, pc, #300	@ (adr r3, 8001000 <main+0x2a8>)
 8000ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed6:	f7ff f93b 	bl	8000150 <__aeabi_dmul>
 8000eda:	4602      	mov	r2, r0
 8000edc:	460b      	mov	r3, r1
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fc1b 	bl	800071c <__aeabi_d2iz>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	4a56      	ldr	r2, [pc, #344]	@ (8001044 <main+0x2ec>)
 8000eea:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    enc1 = __HAL_TIM_GET_COUNTER(&htim2);
 8000eec:	4b48      	ldr	r3, [pc, #288]	@ (8001010 <main+0x2b8>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	4b54      	ldr	r3, [pc, #336]	@ (8001048 <main+0x2f0>)
 8000ef6:	601a      	str	r2, [r3, #0]
    enc2 = __HAL_TIM_GET_COUNTER(&htim3);
 8000ef8:	4b46      	ldr	r3, [pc, #280]	@ (8001014 <main+0x2bc>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000efe:	461a      	mov	r2, r3
 8000f00:	4b52      	ldr	r3, [pc, #328]	@ (800104c <main+0x2f4>)
 8000f02:	601a      	str	r2, [r3, #0]

    avance1 = abs(enc1 - enc1_ini);
 8000f04:	4b50      	ldr	r3, [pc, #320]	@ (8001048 <main+0x2f0>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b44      	ldr	r3, [pc, #272]	@ (800101c <main+0x2c4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	1ad3      	subs	r3, r2, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	bfb8      	it	lt
 8000f12:	425b      	neglt	r3, r3
 8000f14:	4a4e      	ldr	r2, [pc, #312]	@ (8001050 <main+0x2f8>)
 8000f16:	6013      	str	r3, [r2, #0]
    avance2 = abs(enc2 - enc2_ini);
 8000f18:	4b4c      	ldr	r3, [pc, #304]	@ (800104c <main+0x2f4>)
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	4b40      	ldr	r3, [pc, #256]	@ (8001020 <main+0x2c8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	bfb8      	it	lt
 8000f26:	425b      	neglt	r3, r3
 8000f28:	4a4a      	ldr	r2, [pc, #296]	@ (8001054 <main+0x2fc>)
 8000f2a:	6013      	str	r3, [r2, #0]
    avance3 = abs(encoder3_count - enc3_ini);
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	@ (8001024 <main+0x2cc>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b3d      	ldr	r3, [pc, #244]	@ (8001028 <main+0x2d0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bfb8      	it	lt
 8000f3a:	425b      	neglt	r3, r3
 8000f3c:	4a46      	ldr	r2, [pc, #280]	@ (8001058 <main+0x300>)
 8000f3e:	6013      	str	r3, [r2, #0]
    avance4 = abs(encoder4_count - enc4_ini);
 8000f40:	4b3a      	ldr	r3, [pc, #232]	@ (800102c <main+0x2d4>)
 8000f42:	681a      	ldr	r2, [r3, #0]
 8000f44:	4b3a      	ldr	r3, [pc, #232]	@ (8001030 <main+0x2d8>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	bfb8      	it	lt
 8000f4e:	425b      	neglt	r3, r3
 8000f50:	4a42      	ldr	r2, [pc, #264]	@ (800105c <main+0x304>)
 8000f52:	6013      	str	r3, [r2, #0]

    if (encoder4_count < objetivo4){
 8000f54:	4b35      	ldr	r3, [pc, #212]	@ (800102c <main+0x2d4>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b3a      	ldr	r3, [pc, #232]	@ (8001044 <main+0x2ec>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	da05      	bge.n	8000f6c <main+0x214>
    	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,pwmValue);
 8000f60:	4b3f      	ldr	r3, [pc, #252]	@ (8001060 <main+0x308>)
 8000f62:	781a      	ldrb	r2, [r3, #0]
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <main+0x2c0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	639a      	str	r2, [r3, #56]	@ 0x38
 8000f6a:	e003      	b.n	8000f74 <main+0x21c>
    }
    else{
    	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_2,0);
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <main+0x2c0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2200      	movs	r2, #0
 8000f72:	639a      	str	r2, [r3, #56]	@ 0x38
    }
    if (encoder3_count < objetivo3){
 8000f74:	4b2b      	ldr	r3, [pc, #172]	@ (8001024 <main+0x2cc>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b31      	ldr	r3, [pc, #196]	@ (8001040 <main+0x2e8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	da05      	bge.n	8000f8c <main+0x234>
    	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,pwmValue);
 8000f80:	4b37      	ldr	r3, [pc, #220]	@ (8001060 <main+0x308>)
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <main+0x2c0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f8a:	e003      	b.n	8000f94 <main+0x23c>
    }
    else{
    	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1,0);
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <main+0x2c0>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	635a      	str	r2, [r3, #52]	@ 0x34
    }
    if (enc1 < objetivo1){
 8000f94:	4b2c      	ldr	r3, [pc, #176]	@ (8001048 <main+0x2f0>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b27      	ldr	r3, [pc, #156]	@ (8001038 <main+0x2e0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	da05      	bge.n	8000fac <main+0x254>
    	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,pwmValue);
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	@ (8001060 <main+0x308>)
 8000fa2:	781a      	ldrb	r2, [r3, #0]
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <main+0x2c0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000faa:	e003      	b.n	8000fb4 <main+0x25c>
    }
    else{
    	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_4,0);
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <main+0x2c0>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if (enc2 < objetivo2){
 8000fb4:	4b25      	ldr	r3, [pc, #148]	@ (800104c <main+0x2f4>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b20      	ldr	r3, [pc, #128]	@ (800103c <main+0x2e4>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	da05      	bge.n	8000fcc <main+0x274>
      	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,pwmValue);
 8000fc0:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <main+0x308>)
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <main+0x2c0>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fca:	e003      	b.n	8000fd4 <main+0x27c>
      }
      else{
      	__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_3,0);
 8000fcc:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <main+0x2c0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	63da      	str	r2, [r3, #60]	@ 0x3c
      }


    HAL_Delay(10);
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f001 f9bf 	bl	8002358 <HAL_Delay>

    //Medimos Datos
	for (uint8_t i = 0; i < medicionesParaPromedio ;i++){
 8000fda:	2300      	movs	r3, #0
 8000fdc:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8000fe0:	e0ac      	b.n	800113c <main+0x3e4>
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	33333333 	.word	0x33333333
 8000fec:	40571333 	.word	0x40571333
 8000ff0:	00000000 	.word	0x00000000
 8000ff4:	40572000 	.word	0x40572000
 8000ff8:	33333333 	.word	0x33333333
 8000ffc:	40383333 	.word	0x40383333
 8001000:	66666666 	.word	0x66666666
 8001004:	4038e666 	.word	0x4038e666
 8001008:	200001d0 	.word	0x200001d0
 800100c:	200001dc 	.word	0x200001dc
 8001010:	20000088 	.word	0x20000088
 8001014:	200000d0 	.word	0x200000d0
 8001018:	20000118 	.word	0x20000118
 800101c:	200001fc 	.word	0x200001fc
 8001020:	20000200 	.word	0x20000200
 8001024:	2000022c 	.word	0x2000022c
 8001028:	20000204 	.word	0x20000204
 800102c:	20000230 	.word	0x20000230
 8001030:	20000208 	.word	0x20000208
 8001034:	20000008 	.word	0x20000008
 8001038:	2000021c 	.word	0x2000021c
 800103c:	20000220 	.word	0x20000220
 8001040:	20000224 	.word	0x20000224
 8001044:	20000228 	.word	0x20000228
 8001048:	200001f4 	.word	0x200001f4
 800104c:	200001f8 	.word	0x200001f8
 8001050:	2000020c 	.word	0x2000020c
 8001054:	20000210 	.word	0x20000210
 8001058:	20000214 	.word	0x20000214
 800105c:	20000218 	.word	0x20000218
 8001060:	20000004 	.word	0x20000004
		lecturasIMU = GetData__stMPU_9255();
 8001064:	4c42      	ldr	r4, [pc, #264]	@ (8001170 <main+0x418>)
 8001066:	f107 0308 	add.w	r3, r7, #8
 800106a:	4618      	mov	r0, r3
 800106c:	f000 fc24 	bl	80018b8 <GetData__stMPU_9255>
 8001070:	4625      	mov	r5, r4
 8001072:	f107 0408 	add.w	r4, r7, #8
 8001076:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001078:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800107c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800107e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001082:	e885 0003 	stmia.w	r5, {r0, r1}

		lecturasIMU = NormalizeMag(GetData__stMPU_9255(), mag_offset, mag_scale);
 8001086:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fc14 	bl	80018b8 <GetData__stMPU_9255>
 8001090:	4b37      	ldr	r3, [pc, #220]	@ (8001170 <main+0x418>)
 8001092:	607b      	str	r3, [r7, #4]
 8001094:	f107 0608 	add.w	r6, r7, #8
 8001098:	4a36      	ldr	r2, [pc, #216]	@ (8001174 <main+0x41c>)
 800109a:	ab0a      	add	r3, sp, #40	@ 0x28
 800109c:	ca07      	ldmia	r2, {r0, r1, r2}
 800109e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010a2:	4a35      	ldr	r2, [pc, #212]	@ (8001178 <main+0x420>)
 80010a4:	ab07      	add	r3, sp, #28
 80010a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80010ac:	466d      	mov	r5, sp
 80010ae:	f107 0450 	add.w	r4, r7, #80	@ 0x50
 80010b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80010ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80010be:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80010c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c4:	4630      	mov	r0, r6
 80010c6:	f000 fdc7 	bl	8001c58 <NormalizeMag>
 80010ca:	687d      	ldr	r5, [r7, #4]
 80010cc:	f107 0408 	add.w	r4, r7, #8
 80010d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010d8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010dc:	e885 0003 	stmia.w	r5, {r0, r1}
		vectorLecturasMagX += lecturasIMU.MagXData;
 80010e0:	4b23      	ldr	r3, [pc, #140]	@ (8001170 <main+0x418>)
 80010e2:	69dc      	ldr	r4, [r3, #28]
 80010e4:	4b25      	ldr	r3, [pc, #148]	@ (800117c <main+0x424>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fbf5 	bl	80008d8 <__aeabi_ui2f>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4619      	mov	r1, r3
 80010f2:	4620      	mov	r0, r4
 80010f4:	f7ff fb40 	bl	8000778 <__addsf3>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fe0a 	bl	8000d14 <__aeabi_f2uiz>
 8001100:	4603      	mov	r3, r0
 8001102:	4a1e      	ldr	r2, [pc, #120]	@ (800117c <main+0x424>)
 8001104:	6013      	str	r3, [r2, #0]
		vectorLecturasMagY += lecturasIMU.MagYData;
 8001106:	4b1a      	ldr	r3, [pc, #104]	@ (8001170 <main+0x418>)
 8001108:	6a1c      	ldr	r4, [r3, #32]
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <main+0x428>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff fbe2 	bl	80008d8 <__aeabi_ui2f>
 8001114:	4603      	mov	r3, r0
 8001116:	4619      	mov	r1, r3
 8001118:	4620      	mov	r0, r4
 800111a:	f7ff fb2d 	bl	8000778 <__addsf3>
 800111e:	4603      	mov	r3, r0
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff fdf7 	bl	8000d14 <__aeabi_f2uiz>
 8001126:	4603      	mov	r3, r0
 8001128:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <main+0x428>)
 800112a:	6013      	str	r3, [r2, #0]
		HAL_Delay(50);
 800112c:	2032      	movs	r0, #50	@ 0x32
 800112e:	f001 f913 	bl	8002358 <HAL_Delay>
	for (uint8_t i = 0; i < medicionesParaPromedio ;i++){
 8001132:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001136:	3301      	adds	r3, #1
 8001138:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800113c:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 8001140:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <main+0x42c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d38d      	bcc.n	8001064 <main+0x30c>
	}
	vectorLecturasMagX = vectorLecturasMagX / medicionesParaPromedio;
 8001148:	4b0c      	ldr	r3, [pc, #48]	@ (800117c <main+0x424>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <main+0x42c>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	fbb2 f3f3 	udiv	r3, r2, r3
 8001154:	4a09      	ldr	r2, [pc, #36]	@ (800117c <main+0x424>)
 8001156:	6013      	str	r3, [r2, #0]
	vectorLecturasMagY = vectorLecturasMagY / medicionesParaPromedio;
 8001158:	4b09      	ldr	r3, [pc, #36]	@ (8001180 <main+0x428>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <main+0x42c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	4a06      	ldr	r2, [pc, #24]	@ (8001180 <main+0x428>)
 8001166:	6013      	str	r3, [r2, #0]
	HAL_Delay(50);
 8001168:	2032      	movs	r0, #50	@ 0x32
 800116a:	f001 f8f5 	bl	8002358 <HAL_Delay>
    enc1 = __HAL_TIM_GET_COUNTER(&htim2);
 800116e:	e6bd      	b.n	8000eec <main+0x194>
 8001170:	200001a8 	.word	0x200001a8
 8001174:	200001dc 	.word	0x200001dc
 8001178:	200001d0 	.word	0x200001d0
 800117c:	200001e8 	.word	0x200001e8
 8001180:	200001ec 	.word	0x200001ec
 8001184:	20000000 	.word	0x20000000

08001188 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b090      	sub	sp, #64	@ 0x40
 800118c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0318 	add.w	r3, r7, #24
 8001192:	2228      	movs	r2, #40	@ 0x28
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f003 fe42 	bl	8004e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	1d3b      	adds	r3, r7, #4
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011ae:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b8:	2301      	movs	r3, #1
 80011ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011c6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80011ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fbdb 	bl	800398c <HAL_RCC_OscConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011dc:	f000 fe3a 	bl	8001e54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e0:	230f      	movs	r3, #15
 80011e2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011e4:	2302      	movs	r3, #2
 80011e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2102      	movs	r1, #2
 80011fa:	4618      	mov	r0, r3
 80011fc:	f002 fe48 	bl	8003e90 <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001206:	f000 fe25 	bl	8001e54 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3740      	adds	r7, #64	@ 0x40
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
	...

08001214 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_I2C2_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <MX_I2C2_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_I2C2_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_I2C2_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_I2C2_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_I2C2_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_I2C2_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_I2C2_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_I2C2_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_I2C2_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_I2C2_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_I2C2_Init+0x50>)
 8001252:	f001 fb67 	bl	8002924 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 fdfa 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000034 	.word	0x20000034
 8001268:	40005800 	.word	0x40005800
 800126c:	000186a0 	.word	0x000186a0

08001270 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08c      	sub	sp, #48	@ 0x30
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	2224      	movs	r2, #36	@ 0x24
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f003 fdce 	bl	8004e20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001284:	1d3b      	adds	r3, r7, #4
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800128c:	4b21      	ldr	r3, [pc, #132]	@ (8001314 <MX_TIM2_Init+0xa4>)
 800128e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001292:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <MX_TIM2_Init+0xa4>)
 8001296:	2200      	movs	r2, #0
 8001298:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800129a:	4b1e      	ldr	r3, [pc, #120]	@ (8001314 <MX_TIM2_Init+0xa4>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80012a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001314 <MX_TIM2_Init+0xa4>)
 80012a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001314 <MX_TIM2_Init+0xa4>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ae:	4b19      	ldr	r3, [pc, #100]	@ (8001314 <MX_TIM2_Init+0xa4>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012b4:	2303      	movs	r3, #3
 80012b6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012bc:	2301      	movs	r3, #1
 80012be:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012c8:	2300      	movs	r3, #0
 80012ca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012cc:	2301      	movs	r3, #1
 80012ce:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012d0:	2300      	movs	r3, #0
 80012d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80012d4:	2300      	movs	r3, #0
 80012d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	4619      	mov	r1, r3
 80012de:	480d      	ldr	r0, [pc, #52]	@ (8001314 <MX_TIM2_Init+0xa4>)
 80012e0:	f003 f856 	bl	8004390 <HAL_TIM_Encoder_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012ea:	f000 fdb3 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	4619      	mov	r1, r3
 80012fa:	4806      	ldr	r0, [pc, #24]	@ (8001314 <MX_TIM2_Init+0xa4>)
 80012fc:	f003 fc54 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001306:	f000 fda5 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800130a:	bf00      	nop
 800130c:	3730      	adds	r7, #48	@ 0x30
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	20000088 	.word	0x20000088

08001318 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08c      	sub	sp, #48	@ 0x30
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	2224      	movs	r2, #36	@ 0x24
 8001324:	2100      	movs	r1, #0
 8001326:	4618      	mov	r0, r3
 8001328:	f003 fd7a 	bl	8004e20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	2200      	movs	r2, #0
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001334:	4b20      	ldr	r3, [pc, #128]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 8001336:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <MX_TIM3_Init+0xa4>)
 8001338:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800133a:	4b1f      	ldr	r3, [pc, #124]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b1d      	ldr	r3, [pc, #116]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001346:	4b1c      	ldr	r3, [pc, #112]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 8001348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800134c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b1a      	ldr	r3, [pc, #104]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b18      	ldr	r3, [pc, #96]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800135a:	2303      	movs	r3, #3
 800135c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800135e:	2300      	movs	r3, #0
 8001360:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001362:	2301      	movs	r3, #1
 8001364:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001366:	2300      	movs	r3, #0
 8001368:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800136e:	2300      	movs	r3, #0
 8001370:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001372:	2301      	movs	r3, #1
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001376:	2300      	movs	r3, #0
 8001378:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800137a:	2300      	movs	r3, #0
 800137c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 8001386:	f003 f803 	bl	8004390 <HAL_TIM_Encoder_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001390:	f000 fd60 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_TIM3_Init+0xa0>)
 80013a2:	f003 fc01 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013ac:	f000 fd52 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	@ 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	200000d0 	.word	0x200000d0
 80013bc:	40000400 	.word	0x40000400

080013c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	@ 0x28
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
 80013de:	615a      	str	r2, [r3, #20]
 80013e0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013e2:	4b32      	ldr	r3, [pc, #200]	@ (80014ac <MX_TIM4_Init+0xec>)
 80013e4:	4a32      	ldr	r2, [pc, #200]	@ (80014b0 <MX_TIM4_Init+0xf0>)
 80013e6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 80013e8:	4b30      	ldr	r3, [pc, #192]	@ (80014ac <MX_TIM4_Init+0xec>)
 80013ea:	2247      	movs	r2, #71	@ 0x47
 80013ec:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	4b2f      	ldr	r3, [pc, #188]	@ (80014ac <MX_TIM4_Init+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80013f4:	4b2d      	ldr	r3, [pc, #180]	@ (80014ac <MX_TIM4_Init+0xec>)
 80013f6:	2263      	movs	r2, #99	@ 0x63
 80013f8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013fa:	4b2c      	ldr	r3, [pc, #176]	@ (80014ac <MX_TIM4_Init+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001400:	4b2a      	ldr	r3, [pc, #168]	@ (80014ac <MX_TIM4_Init+0xec>)
 8001402:	2200      	movs	r2, #0
 8001404:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001406:	4829      	ldr	r0, [pc, #164]	@ (80014ac <MX_TIM4_Init+0xec>)
 8001408:	f002 fed0 	bl	80041ac <HAL_TIM_PWM_Init>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8001412:	f000 fd1f 	bl	8001e54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001416:	2300      	movs	r3, #0
 8001418:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	4619      	mov	r1, r3
 8001424:	4821      	ldr	r0, [pc, #132]	@ (80014ac <MX_TIM4_Init+0xec>)
 8001426:	f003 fbbf 	bl	8004ba8 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8001430:	f000 fd10 	bl	8001e54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001434:	2360      	movs	r3, #96	@ 0x60
 8001436:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001444:	1d3b      	adds	r3, r7, #4
 8001446:	2200      	movs	r2, #0
 8001448:	4619      	mov	r1, r3
 800144a:	4818      	ldr	r0, [pc, #96]	@ (80014ac <MX_TIM4_Init+0xec>)
 800144c:	f003 f8d0 	bl	80045f0 <HAL_TIM_PWM_ConfigChannel>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001456:	f000 fcfd 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2204      	movs	r2, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4812      	ldr	r0, [pc, #72]	@ (80014ac <MX_TIM4_Init+0xec>)
 8001462:	f003 f8c5 	bl	80045f0 <HAL_TIM_PWM_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 800146c:	f000 fcf2 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2208      	movs	r2, #8
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	@ (80014ac <MX_TIM4_Init+0xec>)
 8001478:	f003 f8ba 	bl	80045f0 <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8001482:	f000 fce7 	bl	8001e54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001486:	1d3b      	adds	r3, r7, #4
 8001488:	220c      	movs	r2, #12
 800148a:	4619      	mov	r1, r3
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM4_Init+0xec>)
 800148e:	f003 f8af 	bl	80045f0 <HAL_TIM_PWM_ConfigChannel>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 8001498:	f000 fcdc 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM4_Init+0xec>)
 800149e:	f000 fdd7 	bl	8002050 <HAL_TIM_MspPostInit>

}
 80014a2:	bf00      	nop
 80014a4:	3728      	adds	r7, #40	@ 0x28
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000118 	.word	0x20000118
 80014b0:	40000800 	.word	0x40000800

080014b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014b8:	4b11      	ldr	r3, [pc, #68]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	@ (8001504 <MX_USART1_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014be:	4b10      	ldr	r3, [pc, #64]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	@ (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ec:	f003 fbba 	bl	8004c64 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014f6:	f000 fcad 	bl	8001e54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20000160 	.word	0x20000160
 8001504:	40013800 	.word	0x40013800

08001508 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 0310 	add.w	r3, r7, #16
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800151c:	4b2a      	ldr	r3, [pc, #168]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 800151e:	699b      	ldr	r3, [r3, #24]
 8001520:	4a29      	ldr	r2, [pc, #164]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 8001522:	f043 0310 	orr.w	r3, r3, #16
 8001526:	6193      	str	r3, [r2, #24]
 8001528:	4b27      	ldr	r3, [pc, #156]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	f003 0310 	and.w	r3, r3, #16
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001534:	4b24      	ldr	r3, [pc, #144]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	4a23      	ldr	r2, [pc, #140]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 800153a:	f043 0320 	orr.w	r3, r3, #32
 800153e:	6193      	str	r3, [r2, #24]
 8001540:	4b21      	ldr	r3, [pc, #132]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	f003 0320 	and.w	r3, r3, #32
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154c:	4b1e      	ldr	r3, [pc, #120]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 800154e:	699b      	ldr	r3, [r3, #24]
 8001550:	4a1d      	ldr	r2, [pc, #116]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 8001552:	f043 0304 	orr.w	r3, r3, #4
 8001556:	6193      	str	r3, [r2, #24]
 8001558:	4b1b      	ldr	r3, [pc, #108]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	607b      	str	r3, [r7, #4]
 8001562:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001564:	4b18      	ldr	r3, [pc, #96]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 8001566:	699b      	ldr	r3, [r3, #24]
 8001568:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 800156a:	f043 0308 	orr.w	r3, r3, #8
 800156e:	6193      	str	r3, [r2, #24]
 8001570:	4b15      	ldr	r3, [pc, #84]	@ (80015c8 <MX_GPIO_Init+0xc0>)
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 800157c:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001580:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001582:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <MX_GPIO_Init+0xc4>)
 8001584:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158a:	f107 0310 	add.w	r3, r7, #16
 800158e:	4619      	mov	r1, r3
 8001590:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <MX_GPIO_Init+0xc8>)
 8001592:	f001 f813 	bl	80025bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001596:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800159a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <MX_GPIO_Init+0xc8>)
 80015ac:	f001 f806 	bl	80025bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2100      	movs	r1, #0
 80015b4:	2028      	movs	r0, #40	@ 0x28
 80015b6:	f000 ffca 	bl	800254e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015ba:	2028      	movs	r0, #40	@ 0x28
 80015bc:	f000 ffe3 	bl	8002586 <HAL_NVIC_EnableIRQ>

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40021000 	.word	0x40021000
 80015cc:	10110000 	.word	0x10110000
 80015d0:	40010c00 	.word	0x40010c00

080015d4 <Init_IMU>:

/* USER CODE BEGIN 4 */

void Init_IMU(void) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b088      	sub	sp, #32
 80015d8:	af02      	add	r7, sp, #8
	uint8_t u8destVal = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	737b      	strb	r3, [r7, #13]
	uint8_t u8sensMagVal[3] = {0};
 80015de:	f107 0308 	add.w	r3, r7, #8
 80015e2:	2100      	movs	r1, #0
 80015e4:	460a      	mov	r2, r1
 80015e6:	801a      	strh	r2, [r3, #0]
 80015e8:	460a      	mov	r2, r1
 80015ea:	709a      	strb	r2, [r3, #2]
	uint8_t data_tx[2];
	uint8_t reg;
	uint8_t dev_addr = 0x69 << 1;
 80015ec:	23d2      	movs	r3, #210	@ 0xd2
 80015ee:	73fb      	strb	r3, [r7, #15]
	uint8_t mag_addr = 0x0C << 1;
 80015f0:	2318      	movs	r3, #24
 80015f2:	73bb      	strb	r3, [r7, #14]

	// 0. Reset MPU
	data_tx[0] = 0x6B; data_tx[1] = 0x80;
 80015f4:	236b      	movs	r3, #107	@ 0x6b
 80015f6:	713b      	strb	r3, [r7, #4]
 80015f8:	2380      	movs	r3, #128	@ 0x80
 80015fa:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	b299      	uxth	r1, r3
 8001600:	1d3a      	adds	r2, r7, #4
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2302      	movs	r3, #2
 800160a:	48a9      	ldr	r0, [pc, #676]	@ (80018b0 <Init_IMU+0x2dc>)
 800160c:	f001 face 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <Init_IMU+0x56>
		HAL_Delay(100);
 8001616:	2064      	movs	r0, #100	@ 0x64
 8001618:	f000 fe9e 	bl	8002358 <HAL_Delay>
		check_flags |= (1 << 0);
 800161c:	4ba5      	ldr	r3, [pc, #660]	@ (80018b4 <Init_IMU+0x2e0>)
 800161e:	881b      	ldrh	r3, [r3, #0]
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4ba3      	ldr	r3, [pc, #652]	@ (80018b4 <Init_IMU+0x2e0>)
 8001628:	801a      	strh	r2, [r3, #0]
	}

	// 1. Clock source
	data_tx[0] = 0x6B; data_tx[1] = 0x01;
 800162a:	236b      	movs	r3, #107	@ 0x6b
 800162c:	713b      	strb	r3, [r7, #4]
 800162e:	2301      	movs	r3, #1
 8001630:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	b299      	uxth	r1, r3
 8001636:	1d3a      	adds	r2, r7, #4
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2302      	movs	r3, #2
 8001640:	489b      	ldr	r0, [pc, #620]	@ (80018b0 <Init_IMU+0x2dc>)
 8001642:	f001 fab3 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d106      	bne.n	800165a <Init_IMU+0x86>
		check_flags |= (1 << 1);
 800164c:	4b99      	ldr	r3, [pc, #612]	@ (80018b4 <Init_IMU+0x2e0>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	f043 0302 	orr.w	r3, r3, #2
 8001654:	b29a      	uxth	r2, r3
 8001656:	4b97      	ldr	r3, [pc, #604]	@ (80018b4 <Init_IMU+0x2e0>)
 8001658:	801a      	strh	r2, [r3, #0]
	}

	// 2. Gyro config
	data_tx[0] = 0x1B; data_tx[1] = 0x00;
 800165a:	231b      	movs	r3, #27
 800165c:	713b      	strb	r3, [r7, #4]
 800165e:	2300      	movs	r3, #0
 8001660:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	b299      	uxth	r1, r3
 8001666:	1d3a      	adds	r2, r7, #4
 8001668:	f04f 33ff 	mov.w	r3, #4294967295
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	2302      	movs	r3, #2
 8001670:	488f      	ldr	r0, [pc, #572]	@ (80018b0 <Init_IMU+0x2dc>)
 8001672:	f001 fa9b 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d106      	bne.n	800168a <Init_IMU+0xb6>
		check_flags |= (1 << 2);
 800167c:	4b8d      	ldr	r3, [pc, #564]	@ (80018b4 <Init_IMU+0x2e0>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b8b      	ldr	r3, [pc, #556]	@ (80018b4 <Init_IMU+0x2e0>)
 8001688:	801a      	strh	r2, [r3, #0]
	}

	// 3. Accel config
	data_tx[0] = 0x1C; data_tx[1] = 0x00;
 800168a:	231c      	movs	r3, #28
 800168c:	713b      	strb	r3, [r7, #4]
 800168e:	2300      	movs	r3, #0
 8001690:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	b299      	uxth	r1, r3
 8001696:	1d3a      	adds	r2, r7, #4
 8001698:	f04f 33ff 	mov.w	r3, #4294967295
 800169c:	9300      	str	r3, [sp, #0]
 800169e:	2302      	movs	r3, #2
 80016a0:	4883      	ldr	r0, [pc, #524]	@ (80018b0 <Init_IMU+0x2dc>)
 80016a2:	f001 fa83 	bl	8002bac <HAL_I2C_Master_Transmit>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <Init_IMU+0xe6>
		check_flags |= (1 << 3);
 80016ac:	4b81      	ldr	r3, [pc, #516]	@ (80018b4 <Init_IMU+0x2e0>)
 80016ae:	881b      	ldrh	r3, [r3, #0]
 80016b0:	f043 0308 	orr.w	r3, r3, #8
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b7f      	ldr	r3, [pc, #508]	@ (80018b4 <Init_IMU+0x2e0>)
 80016b8:	801a      	strh	r2, [r3, #0]
	}

	// 4. Enable I2C bypass
	data_tx[0] = 0x37; data_tx[1] = 0x02;
 80016ba:	2337      	movs	r3, #55	@ 0x37
 80016bc:	713b      	strb	r3, [r7, #4]
 80016be:	2302      	movs	r3, #2
 80016c0:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, dev_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
 80016c4:	b299      	uxth	r1, r3
 80016c6:	1d3a      	adds	r2, r7, #4
 80016c8:	f04f 33ff 	mov.w	r3, #4294967295
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2302      	movs	r3, #2
 80016d0:	4877      	ldr	r0, [pc, #476]	@ (80018b0 <Init_IMU+0x2dc>)
 80016d2:	f001 fa6b 	bl	8002bac <HAL_I2C_Master_Transmit>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d109      	bne.n	80016f0 <Init_IMU+0x11c>
		HAL_Delay(10);
 80016dc:	200a      	movs	r0, #10
 80016de:	f000 fe3b 	bl	8002358 <HAL_Delay>
		check_flags |= (1 << 4);
 80016e2:	4b74      	ldr	r3, [pc, #464]	@ (80018b4 <Init_IMU+0x2e0>)
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	f043 0310 	orr.w	r3, r3, #16
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	4b71      	ldr	r3, [pc, #452]	@ (80018b4 <Init_IMU+0x2e0>)
 80016ee:	801a      	strh	r2, [r3, #0]
	}

	// 5. Power down magnetometer
	data_tx[0] = 0x0A; data_tx[1] = 0x00;
 80016f0:	230a      	movs	r3, #10
 80016f2:	713b      	strb	r3, [r7, #4]
 80016f4:	2300      	movs	r3, #0
 80016f6:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 80016f8:	7bbb      	ldrb	r3, [r7, #14]
 80016fa:	b299      	uxth	r1, r3
 80016fc:	1d3a      	adds	r2, r7, #4
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	2302      	movs	r3, #2
 8001706:	486a      	ldr	r0, [pc, #424]	@ (80018b0 <Init_IMU+0x2dc>)
 8001708:	f001 fa50 	bl	8002bac <HAL_I2C_Master_Transmit>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d109      	bne.n	8001726 <Init_IMU+0x152>
		HAL_Delay(10);
 8001712:	200a      	movs	r0, #10
 8001714:	f000 fe20 	bl	8002358 <HAL_Delay>
		check_flags |= (1 << 5);
 8001718:	4b66      	ldr	r3, [pc, #408]	@ (80018b4 <Init_IMU+0x2e0>)
 800171a:	881b      	ldrh	r3, [r3, #0]
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	b29a      	uxth	r2, r3
 8001722:	4b64      	ldr	r3, [pc, #400]	@ (80018b4 <Init_IMU+0x2e0>)
 8001724:	801a      	strh	r2, [r3, #0]
	}

	// 6. Enter fuse ROM mode
	data_tx[0] = 0x0A; data_tx[1] = 0x0F;
 8001726:	230a      	movs	r3, #10
 8001728:	713b      	strb	r3, [r7, #4]
 800172a:	230f      	movs	r3, #15
 800172c:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 800172e:	7bbb      	ldrb	r3, [r7, #14]
 8001730:	b299      	uxth	r1, r3
 8001732:	1d3a      	adds	r2, r7, #4
 8001734:	f04f 33ff 	mov.w	r3, #4294967295
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	2302      	movs	r3, #2
 800173c:	485c      	ldr	r0, [pc, #368]	@ (80018b0 <Init_IMU+0x2dc>)
 800173e:	f001 fa35 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d109      	bne.n	800175c <Init_IMU+0x188>
		HAL_Delay(10);
 8001748:	200a      	movs	r0, #10
 800174a:	f000 fe05 	bl	8002358 <HAL_Delay>
		check_flags |= (1 << 6);
 800174e:	4b59      	ldr	r3, [pc, #356]	@ (80018b4 <Init_IMU+0x2e0>)
 8001750:	881b      	ldrh	r3, [r3, #0]
 8001752:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001756:	b29a      	uxth	r2, r3
 8001758:	4b56      	ldr	r3, [pc, #344]	@ (80018b4 <Init_IMU+0x2e0>)
 800175a:	801a      	strh	r2, [r3, #0]
	}

	// 7. Read ASA registers
	reg = 0x10;
 800175c:	2310      	movs	r3, #16
 800175e:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, HAL_MAX_DELAY) == HAL_OK &&
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	b299      	uxth	r1, r3
 8001764:	1cfa      	adds	r2, r7, #3
 8001766:	f04f 33ff 	mov.w	r3, #4294967295
 800176a:	9300      	str	r3, [sp, #0]
 800176c:	2301      	movs	r3, #1
 800176e:	4850      	ldr	r0, [pc, #320]	@ (80018b0 <Init_IMU+0x2dc>)
 8001770:	f001 fa1c 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d114      	bne.n	80017a4 <Init_IMU+0x1d0>
		HAL_I2C_Master_Receive(&hi2c2, mag_addr, u8sensMagVal, 3, HAL_MAX_DELAY) == HAL_OK) {
 800177a:	7bbb      	ldrb	r3, [r7, #14]
 800177c:	b299      	uxth	r1, r3
 800177e:	f107 0208 	add.w	r2, r7, #8
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
 8001786:	9300      	str	r3, [sp, #0]
 8001788:	2303      	movs	r3, #3
 800178a:	4849      	ldr	r0, [pc, #292]	@ (80018b0 <Init_IMU+0x2dc>)
 800178c:	f001 fb0c 	bl	8002da8 <HAL_I2C_Master_Receive>
 8001790:	4603      	mov	r3, r0
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, HAL_MAX_DELAY) == HAL_OK &&
 8001792:	2b00      	cmp	r3, #0
 8001794:	d106      	bne.n	80017a4 <Init_IMU+0x1d0>
		check_flags |= (1 << 7);
 8001796:	4b47      	ldr	r3, [pc, #284]	@ (80018b4 <Init_IMU+0x2e0>)
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800179e:	b29a      	uxth	r2, r3
 80017a0:	4b44      	ldr	r3, [pc, #272]	@ (80018b4 <Init_IMU+0x2e0>)
 80017a2:	801a      	strh	r2, [r3, #0]
	}

	// 8. Power down again
	data_tx[0] = 0x0A; data_tx[1] = 0x00;
 80017a4:	230a      	movs	r3, #10
 80017a6:	713b      	strb	r3, [r7, #4]
 80017a8:	2300      	movs	r3, #0
 80017aa:	717b      	strb	r3, [r7, #5]
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, HAL_MAX_DELAY) == HAL_OK) {
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	b299      	uxth	r1, r3
 80017b0:	1d3a      	adds	r2, r7, #4
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	9300      	str	r3, [sp, #0]
 80017b8:	2302      	movs	r3, #2
 80017ba:	483d      	ldr	r0, [pc, #244]	@ (80018b0 <Init_IMU+0x2dc>)
 80017bc:	f001 f9f6 	bl	8002bac <HAL_I2C_Master_Transmit>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d109      	bne.n	80017da <Init_IMU+0x206>
		HAL_Delay(10);
 80017c6:	200a      	movs	r0, #10
 80017c8:	f000 fdc6 	bl	8002358 <HAL_Delay>
		check_flags |= (1 << 8);
 80017cc:	4b39      	ldr	r3, [pc, #228]	@ (80018b4 <Init_IMU+0x2e0>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	4b37      	ldr	r3, [pc, #220]	@ (80018b4 <Init_IMU+0x2e0>)
 80017d8:	801a      	strh	r2, [r3, #0]
	}

	// 9. Set to continuous mode 2 (retry if needed)
	uint8_t mode_ok = 0;
 80017da:	2300      	movs	r3, #0
 80017dc:	75fb      	strb	r3, [r7, #23]
	for (int retry = 0; retry < 10; retry++) {
 80017de:	2300      	movs	r3, #0
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	e030      	b.n	8001846 <Init_IMU+0x272>
		data_tx[0] = 0x0A; data_tx[1] = 0x16;
 80017e4:	230a      	movs	r3, #10
 80017e6:	713b      	strb	r3, [r7, #4]
 80017e8:	2316      	movs	r3, #22
 80017ea:	717b      	strb	r3, [r7, #5]
		HAL_I2C_Master_Transmit(&hi2c2, mag_addr, data_tx, 2, HAL_MAX_DELAY);
 80017ec:	7bbb      	ldrb	r3, [r7, #14]
 80017ee:	b299      	uxth	r1, r3
 80017f0:	1d3a      	adds	r2, r7, #4
 80017f2:	f04f 33ff 	mov.w	r3, #4294967295
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2302      	movs	r3, #2
 80017fa:	482d      	ldr	r0, [pc, #180]	@ (80018b0 <Init_IMU+0x2dc>)
 80017fc:	f001 f9d6 	bl	8002bac <HAL_I2C_Master_Transmit>
		HAL_Delay(10);
 8001800:	200a      	movs	r0, #10
 8001802:	f000 fda9 	bl	8002358 <HAL_Delay>
		reg = 0x0A;
 8001806:	230a      	movs	r3, #10
 8001808:	70fb      	strb	r3, [r7, #3]
		HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, HAL_MAX_DELAY);
 800180a:	7bbb      	ldrb	r3, [r7, #14]
 800180c:	b299      	uxth	r1, r3
 800180e:	1cfa      	adds	r2, r7, #3
 8001810:	f04f 33ff 	mov.w	r3, #4294967295
 8001814:	9300      	str	r3, [sp, #0]
 8001816:	2301      	movs	r3, #1
 8001818:	4825      	ldr	r0, [pc, #148]	@ (80018b0 <Init_IMU+0x2dc>)
 800181a:	f001 f9c7 	bl	8002bac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, mag_addr, &u8destVal, 1, HAL_MAX_DELAY);
 800181e:	7bbb      	ldrb	r3, [r7, #14]
 8001820:	b299      	uxth	r1, r3
 8001822:	f107 020d 	add.w	r2, r7, #13
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2301      	movs	r3, #1
 800182e:	4820      	ldr	r0, [pc, #128]	@ (80018b0 <Init_IMU+0x2dc>)
 8001830:	f001 faba 	bl	8002da8 <HAL_I2C_Master_Receive>
		if (u8destVal == 0x16) {
 8001834:	7b7b      	ldrb	r3, [r7, #13]
 8001836:	2b16      	cmp	r3, #22
 8001838:	d102      	bne.n	8001840 <Init_IMU+0x26c>
			mode_ok = 1;
 800183a:	2301      	movs	r3, #1
 800183c:	75fb      	strb	r3, [r7, #23]
			break;
 800183e:	e005      	b.n	800184c <Init_IMU+0x278>
	for (int retry = 0; retry < 10; retry++) {
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	3301      	adds	r3, #1
 8001844:	613b      	str	r3, [r7, #16]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	2b09      	cmp	r3, #9
 800184a:	ddcb      	ble.n	80017e4 <Init_IMU+0x210>
		}
	}
	if (mode_ok) check_flags |= (1 << 9);
 800184c:	7dfb      	ldrb	r3, [r7, #23]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d006      	beq.n	8001860 <Init_IMU+0x28c>
 8001852:	4b18      	ldr	r3, [pc, #96]	@ (80018b4 <Init_IMU+0x2e0>)
 8001854:	881b      	ldrh	r3, [r3, #0]
 8001856:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800185a:	b29a      	uxth	r2, r3
 800185c:	4b15      	ldr	r3, [pc, #84]	@ (80018b4 <Init_IMU+0x2e0>)
 800185e:	801a      	strh	r2, [r3, #0]

	// 10. Confirm ST1 register responds
	reg = 0x02;
 8001860:	2302      	movs	r3, #2
 8001862:	70fb      	strb	r3, [r7, #3]
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, HAL_MAX_DELAY) == HAL_OK &&
 8001864:	7bbb      	ldrb	r3, [r7, #14]
 8001866:	b299      	uxth	r1, r3
 8001868:	1cfa      	adds	r2, r7, #3
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	2301      	movs	r3, #1
 8001872:	480f      	ldr	r0, [pc, #60]	@ (80018b0 <Init_IMU+0x2dc>)
 8001874:	f001 f99a 	bl	8002bac <HAL_I2C_Master_Transmit>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d114      	bne.n	80018a8 <Init_IMU+0x2d4>
		HAL_I2C_Master_Receive(&hi2c2, mag_addr, &u8destVal, 1, HAL_MAX_DELAY) == HAL_OK) {
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	b299      	uxth	r1, r3
 8001882:	f107 020d 	add.w	r2, r7, #13
 8001886:	f04f 33ff 	mov.w	r3, #4294967295
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	4808      	ldr	r0, [pc, #32]	@ (80018b0 <Init_IMU+0x2dc>)
 8001890:	f001 fa8a 	bl	8002da8 <HAL_I2C_Master_Receive>
 8001894:	4603      	mov	r3, r0
	if (HAL_I2C_Master_Transmit(&hi2c2, mag_addr, &reg, 1, HAL_MAX_DELAY) == HAL_OK &&
 8001896:	2b00      	cmp	r3, #0
 8001898:	d106      	bne.n	80018a8 <Init_IMU+0x2d4>
		check_flags |= (1 << 10);
 800189a:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <Init_IMU+0x2e0>)
 800189c:	881b      	ldrh	r3, [r3, #0]
 800189e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <Init_IMU+0x2e0>)
 80018a6:	801a      	strh	r2, [r3, #0]
	}
}
 80018a8:	bf00      	nop
 80018aa:	3718      	adds	r7, #24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000034 	.word	0x20000034
 80018b4:	200001f0 	.word	0x200001f0

080018b8 <GetData__stMPU_9255>:

IMU_Data GetData__stMPU_9255(void) {
 80018b8:	b5b0      	push	{r4, r5, r7, lr}
 80018ba:	b09a      	sub	sp, #104	@ 0x68
 80018bc:	af02      	add	r7, sp, #8
 80018be:	6078      	str	r0, [r7, #4]
	uint8_t imuData[14] = {0};
 80018c0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
 80018ca:	609a      	str	r2, [r3, #8]
 80018cc:	819a      	strh	r2, [r3, #12]
	uint8_t magData[7] = {0};
 80018ce:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t status1 = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	uint8_t reg;
	int16_t raw[10] = {0};
 80018e0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
	IMU_Data result;

	// Leer 14 bytes: accel, temp, gyro
	reg = ACCEL_XOUT_H;
 80018f0:	233b      	movs	r3, #59	@ 0x3b
 80018f2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	HAL_I2C_Master_Transmit(&hi2c2, MPU_ADDR, &reg, 1, HAL_MAX_DELAY);
 80018f6:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2301      	movs	r3, #1
 8001902:	21d2      	movs	r1, #210	@ 0xd2
 8001904:	4887      	ldr	r0, [pc, #540]	@ (8001b24 <GetData__stMPU_9255+0x26c>)
 8001906:	f001 f951 	bl	8002bac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MPU_ADDR, imuData, 14, HAL_MAX_DELAY);
 800190a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	230e      	movs	r3, #14
 8001916:	21d2      	movs	r1, #210	@ 0xd2
 8001918:	4882      	ldr	r0, [pc, #520]	@ (8001b24 <GetData__stMPU_9255+0x26c>)
 800191a:	f001 fa45 	bl	8002da8 <HAL_I2C_Master_Receive>

	raw[0] = (imuData[0] << 8) | imuData[1];  // AccX
 800191e:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001922:	b21b      	sxth	r3, r3
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800192c:	b21b      	sxth	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b21b      	sxth	r3, r3
 8001932:	863b      	strh	r3, [r7, #48]	@ 0x30
	raw[1] = (imuData[2] << 8) | imuData[3];  // AccY
 8001934:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8001938:	b21b      	sxth	r3, r3
 800193a:	021b      	lsls	r3, r3, #8
 800193c:	b21a      	sxth	r2, r3
 800193e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8001942:	b21b      	sxth	r3, r3
 8001944:	4313      	orrs	r3, r2
 8001946:	b21b      	sxth	r3, r3
 8001948:	867b      	strh	r3, [r7, #50]	@ 0x32
	raw[2] = (imuData[4] << 8) | imuData[5];  // AccZ
 800194a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800194e:	b21b      	sxth	r3, r3
 8001950:	021b      	lsls	r3, r3, #8
 8001952:	b21a      	sxth	r2, r3
 8001954:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001958:	b21b      	sxth	r3, r3
 800195a:	4313      	orrs	r3, r2
 800195c:	b21b      	sxth	r3, r3
 800195e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	raw[3] = (imuData[6] << 8) | imuData[7];  // Temp
 8001960:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001964:	b21b      	sxth	r3, r3
 8001966:	021b      	lsls	r3, r3, #8
 8001968:	b21a      	sxth	r2, r3
 800196a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800196e:	b21b      	sxth	r3, r3
 8001970:	4313      	orrs	r3, r2
 8001972:	b21b      	sxth	r3, r3
 8001974:	86fb      	strh	r3, [r7, #54]	@ 0x36
	raw[4] = (imuData[8] << 8) | imuData[9];  // GyroX
 8001976:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 800197a:	b21b      	sxth	r3, r3
 800197c:	021b      	lsls	r3, r3, #8
 800197e:	b21a      	sxth	r2, r3
 8001980:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001984:	b21b      	sxth	r3, r3
 8001986:	4313      	orrs	r3, r2
 8001988:	b21b      	sxth	r3, r3
 800198a:	873b      	strh	r3, [r7, #56]	@ 0x38
	raw[5] = (imuData[10] << 8) | imuData[11]; // GyroY
 800198c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001990:	b21b      	sxth	r3, r3
 8001992:	021b      	lsls	r3, r3, #8
 8001994:	b21a      	sxth	r2, r3
 8001996:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800199a:	b21b      	sxth	r3, r3
 800199c:	4313      	orrs	r3, r2
 800199e:	b21b      	sxth	r3, r3
 80019a0:	877b      	strh	r3, [r7, #58]	@ 0x3a
	raw[6] = (imuData[12] << 8) | imuData[13]; // GyroZ
 80019a2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	021b      	lsls	r3, r3, #8
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80019b0:	b21b      	sxth	r3, r3
 80019b2:	4313      	orrs	r3, r2
 80019b4:	b21b      	sxth	r3, r3
 80019b6:	87bb      	strh	r3, [r7, #60]	@ 0x3c

	HAL_Delay(10);
 80019b8:	200a      	movs	r0, #10
 80019ba:	f000 fccd 	bl	8002358 <HAL_Delay>
	// Verifica si hay datos magnéticos listos
	reg = MAG_STATUS_1;
 80019be:	2302      	movs	r3, #2
 80019c0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, &reg, 1, HAL_MAX_DELAY);
 80019c4:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	2301      	movs	r3, #1
 80019d0:	2118      	movs	r1, #24
 80019d2:	4854      	ldr	r0, [pc, #336]	@ (8001b24 <GetData__stMPU_9255+0x26c>)
 80019d4:	f001 f8ea 	bl	8002bac <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, &status1, 1, HAL_MAX_DELAY);
 80019d8:	f107 0247 	add.w	r2, r7, #71	@ 0x47
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	2301      	movs	r3, #1
 80019e4:	2118      	movs	r1, #24
 80019e6:	484f      	ldr	r0, [pc, #316]	@ (8001b24 <GetData__stMPU_9255+0x26c>)
 80019e8:	f001 f9de 	bl	8002da8 <HAL_I2C_Master_Receive>

	if ((status1 & MAG_DATA_READY) == MAG_DATA_READY) {
 80019ec:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80019f0:	f003 0301 	and.w	r3, r3, #1
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d03f      	beq.n	8001a78 <GetData__stMPU_9255+0x1c0>
		// Leer datos magnéticos (6 + 1 bytes: HOFL)
		reg = MAG_HXL;
 80019f8:	2303      	movs	r3, #3
 80019fa:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
		HAL_I2C_Master_Transmit(&hi2c2, MAG_ADDR, &reg, 1, HAL_MAX_DELAY);
 80019fe:	f107 0246 	add.w	r2, r7, #70	@ 0x46
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	9300      	str	r3, [sp, #0]
 8001a08:	2301      	movs	r3, #1
 8001a0a:	2118      	movs	r1, #24
 8001a0c:	4845      	ldr	r0, [pc, #276]	@ (8001b24 <GetData__stMPU_9255+0x26c>)
 8001a0e:	f001 f8cd 	bl	8002bac <HAL_I2C_Master_Transmit>
		HAL_I2C_Master_Receive(&hi2c2, MAG_ADDR, magData, 7, HAL_MAX_DELAY);
 8001a12:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	2118      	movs	r1, #24
 8001a20:	4840      	ldr	r0, [pc, #256]	@ (8001b24 <GetData__stMPU_9255+0x26c>)
 8001a22:	f001 f9c1 	bl	8002da8 <HAL_I2C_Master_Receive>

		// Si no hay overflow
		if (!(magData[6] & MAG_OVERFLOW_BIT)) {
 8001a26:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d122      	bne.n	8001a78 <GetData__stMPU_9255+0x1c0>
			raw[7] = (magData[1] << 8) | magData[0]; // MagX
 8001a32:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	87fb      	strh	r3, [r7, #62]	@ 0x3e
			raw[8] = (magData[3] << 8) | magData[2]; // MagY
 8001a48:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	021b      	lsls	r3, r3, #8
 8001a50:	b21a      	sxth	r2, r3
 8001a52:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001a56:	b21b      	sxth	r3, r3
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	b21b      	sxth	r3, r3
 8001a5c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
			raw[9] = (magData[5] << 8) | magData[4]; // MagZ
 8001a60:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	021b      	lsls	r3, r3, #8
 8001a68:	b21a      	sxth	r2, r3
 8001a6a:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
		}
	}

	// Copiar a estructura
	result.AccXData  = (float)raw[0];
 8001a78:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe ff2f 	bl	80008e0 <__aeabi_i2f>
 8001a82:	4603      	mov	r3, r0
 8001a84:	60bb      	str	r3, [r7, #8]
	result.AccYData  = (float)raw[1];
 8001a86:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7fe ff28 	bl	80008e0 <__aeabi_i2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]
	result.AccZData  = (float)raw[2];
 8001a94:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe ff21 	bl	80008e0 <__aeabi_i2f>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	613b      	str	r3, [r7, #16]
	result.Temp      = (float)raw[3];
 8001aa2:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe ff1a 	bl	80008e0 <__aeabi_i2f>
 8001aac:	4603      	mov	r3, r0
 8001aae:	617b      	str	r3, [r7, #20]
	result.GyroXData = (float)raw[4];
 8001ab0:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	@ 0x38
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7fe ff13 	bl	80008e0 <__aeabi_i2f>
 8001aba:	4603      	mov	r3, r0
 8001abc:	61bb      	str	r3, [r7, #24]
	result.GyroYData = (float)raw[5];
 8001abe:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7fe ff0c 	bl	80008e0 <__aeabi_i2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	61fb      	str	r3, [r7, #28]
	result.GyroZData = (float)raw[6];
 8001acc:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe ff05 	bl	80008e0 <__aeabi_i2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	623b      	str	r3, [r7, #32]
	result.MagXData  = (float)raw[7];
 8001ada:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001ade:	4618      	mov	r0, r3
 8001ae0:	f7fe fefe 	bl	80008e0 <__aeabi_i2f>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24
	result.MagYData  = (float)raw[8];
 8001ae8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fef7 	bl	80008e0 <__aeabi_i2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	62bb      	str	r3, [r7, #40]	@ 0x28
	result.MagZData  = (float)raw[9];
 8001af6:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	@ 0x42
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fef0 	bl	80008e0 <__aeabi_i2f>
 8001b00:	4603      	mov	r3, r0
 8001b02:	62fb      	str	r3, [r7, #44]	@ 0x2c

	return result;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	461d      	mov	r5, r3
 8001b08:	f107 0408 	add.w	r4, r7, #8
 8001b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b18:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	3760      	adds	r7, #96	@ 0x60
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bdb0      	pop	{r4, r5, r7, pc}
 8001b24:	20000034 	.word	0x20000034

08001b28 <ComputeMagOffset>:

Offset3D ComputeMagOffset(uint16_t num_samples, uint16_t delay_ms) {
 8001b28:	b590      	push	{r4, r7, lr}
 8001b2a:	b097      	sub	sp, #92	@ 0x5c
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	460b      	mov	r3, r1
 8001b32:	807b      	strh	r3, [r7, #2]
 8001b34:	4613      	mov	r3, r2
 8001b36:	803b      	strh	r3, [r7, #0]
    float minX = 32767, maxX = -32768;
 8001b38:	4b46      	ldr	r3, [pc, #280]	@ (8001c54 <ComputeMagOffset+0x12c>)
 8001b3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b3c:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001b40:	653b      	str	r3, [r7, #80]	@ 0x50
    float minY = 32767, maxY = -32768;
 8001b42:	4b44      	ldr	r3, [pc, #272]	@ (8001c54 <ComputeMagOffset+0x12c>)
 8001b44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b46:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001b4a:	64bb      	str	r3, [r7, #72]	@ 0x48
    float minZ = 32767, maxZ = -32768;
 8001b4c:	4b41      	ldr	r3, [pc, #260]	@ (8001c54 <ComputeMagOffset+0x12c>)
 8001b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b50:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001b54:	643b      	str	r3, [r7, #64]	@ 0x40

    for (uint16_t i = 0; i < num_samples; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001b5a:	e047      	b.n	8001bec <ComputeMagOffset+0xc4>
        IMU_Data reading = GetData__stMPU_9255();
 8001b5c:	f107 0308 	add.w	r3, r7, #8
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fea9 	bl	80018b8 <GetData__stMPU_9255>
        if (reading.MagXData < minX) minX = reading.MagXData;
 8001b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b68:	4619      	mov	r1, r3
 8001b6a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001b6c:	f7ff f8c8 	bl	8000d00 <__aeabi_fcmpgt>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <ComputeMagOffset+0x52>
 8001b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b78:	657b      	str	r3, [r7, #84]	@ 0x54
        if (reading.MagXData > maxX) maxX = reading.MagXData;
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001b80:	f7ff f8a0 	bl	8000cc4 <__aeabi_fcmplt>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <ComputeMagOffset+0x66>
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	653b      	str	r3, [r7, #80]	@ 0x50
        if (reading.MagYData < minY) minY = reading.MagYData;
 8001b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b90:	4619      	mov	r1, r3
 8001b92:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8001b94:	f7ff f8b4 	bl	8000d00 <__aeabi_fcmpgt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <ComputeMagOffset+0x7a>
 8001b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba0:	64fb      	str	r3, [r7, #76]	@ 0x4c
        if (reading.MagYData > maxY) maxY = reading.MagYData;
 8001ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001ba8:	f7ff f88c 	bl	8000cc4 <__aeabi_fcmplt>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <ComputeMagOffset+0x8e>
 8001bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb4:	64bb      	str	r3, [r7, #72]	@ 0x48
        if (reading.MagZData < minZ) minZ = reading.MagZData;
 8001bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb8:	4619      	mov	r1, r3
 8001bba:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001bbc:	f7ff f8a0 	bl	8000d00 <__aeabi_fcmpgt>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <ComputeMagOffset+0xa2>
 8001bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bc8:	647b      	str	r3, [r7, #68]	@ 0x44
        if (reading.MagZData > maxZ) maxZ = reading.MagZData;
 8001bca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bcc:	4619      	mov	r1, r3
 8001bce:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001bd0:	f7ff f878 	bl	8000cc4 <__aeabi_fcmplt>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <ComputeMagOffset+0xb6>
 8001bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bdc:	643b      	str	r3, [r7, #64]	@ 0x40
        HAL_Delay(delay_ms);
 8001bde:	883b      	ldrh	r3, [r7, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f000 fbb9 	bl	8002358 <HAL_Delay>
    for (uint16_t i = 0; i < num_samples; i++) {
 8001be6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8001be8:	3301      	adds	r3, #1
 8001bea:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8001bec:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8001bee:	887b      	ldrh	r3, [r7, #2]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d3b3      	bcc.n	8001b5c <ComputeMagOffset+0x34>
    }
    Offset3D offset;
    offset.x = (maxX + minX) / 2.0f;
 8001bf4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001bf6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001bf8:	f7fe fdbe 	bl	8000778 <__addsf3>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe ff74 	bl	8000af0 <__aeabi_fdiv>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	633b      	str	r3, [r7, #48]	@ 0x30
    offset.y = (maxY + minY) / 2.0f;
 8001c0c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001c0e:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001c10:	f7fe fdb2 	bl	8000778 <__addsf3>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7fe ff68 	bl	8000af0 <__aeabi_fdiv>
 8001c20:	4603      	mov	r3, r0
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
    offset.z = (maxZ + minZ) / 2.0f;
 8001c24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8001c26:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001c28:	f7fe fda6 	bl	8000778 <__addsf3>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe ff5c 	bl	8000af0 <__aeabi_fdiv>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
    return offset;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	461c      	mov	r4, r3
 8001c40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001c44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001c48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	375c      	adds	r7, #92	@ 0x5c
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd90      	pop	{r4, r7, pc}
 8001c54:	46fffe00 	.word	0x46fffe00

08001c58 <NormalizeMag>:

IMU_Data NormalizeMag(IMU_Data raw, Offset3D offset, Offset3D scale) {
 8001c58:	b084      	sub	sp, #16
 8001c5a:	b5b0      	push	{r4, r5, r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	f107 001c 	add.w	r0, r7, #28
 8001c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    raw.MagXData = (raw.MagXData - offset.x) * scale.x;
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c6c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7fe fd7f 	bl	8000774 <__aeabi_fsub>
 8001c76:	4603      	mov	r3, r0
 8001c78:	461a      	mov	r2, r3
 8001c7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7fe fe82 	bl	8000988 <__aeabi_fmul>
 8001c84:	4603      	mov	r3, r0
 8001c86:	63bb      	str	r3, [r7, #56]	@ 0x38
    raw.MagYData = (raw.MagYData - offset.y) * scale.y;
 8001c88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fd70 	bl	8000774 <__aeabi_fsub>
 8001c94:	4603      	mov	r3, r0
 8001c96:	461a      	mov	r2, r3
 8001c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4610      	mov	r0, r2
 8001c9e:	f7fe fe73 	bl	8000988 <__aeabi_fmul>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    raw.MagZData = (raw.MagZData - offset.z) * scale.z;
 8001ca6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ca8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7fe fd61 	bl	8000774 <__aeabi_fsub>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4610      	mov	r0, r2
 8001cbc:	f7fe fe64 	bl	8000988 <__aeabi_fmul>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40
    return raw;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	461d      	mov	r5, r3
 8001cc8:	f107 041c 	add.w	r4, r7, #28
 8001ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cd8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001ce6:	b004      	add	sp, #16
 8001ce8:	4770      	bx	lr
	...

08001cec <ComputeMagScale>:

Offset3D ComputeMagScale(uint16_t num_samples, uint16_t delay_ms, Offset3D offset) {
 8001cec:	b082      	sub	sp, #8
 8001cee:	b590      	push	{r4, r7, lr}
 8001cf0:	b09b      	sub	sp, #108	@ 0x6c
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	6078      	str	r0, [r7, #4]
 8001cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	803b      	strh	r3, [r7, #0]
    float minX = 32767, maxX = -32768;
 8001d00:	4b52      	ldr	r3, [pc, #328]	@ (8001e4c <ComputeMagScale+0x160>)
 8001d02:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d04:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001d08:	663b      	str	r3, [r7, #96]	@ 0x60
    float minY = 32767, maxY = -32768;
 8001d0a:	4b50      	ldr	r3, [pc, #320]	@ (8001e4c <ComputeMagScale+0x160>)
 8001d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d0e:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001d12:	65bb      	str	r3, [r7, #88]	@ 0x58
    float minZ = 32767, maxZ = -32768;
 8001d14:	4b4d      	ldr	r3, [pc, #308]	@ (8001e4c <ComputeMagScale+0x160>)
 8001d16:	657b      	str	r3, [r7, #84]	@ 0x54
 8001d18:	f04f 4347 	mov.w	r3, #3338665984	@ 0xc7000000
 8001d1c:	653b      	str	r3, [r7, #80]	@ 0x50

    for (uint16_t i = 0; i < num_samples; i++) {
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001d24:	e05d      	b.n	8001de2 <ComputeMagScale+0xf6>
        IMU_Data reading = GetData__stMPU_9255();
 8001d26:	f107 030c 	add.w	r3, r7, #12
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fdc4 	bl	80018b8 <GetData__stMPU_9255>
        float x = reading.MagXData - offset.x;
 8001d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d32:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001d34:	4611      	mov	r1, r2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7fe fd1c 	bl	8000774 <__aeabi_fsub>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	64bb      	str	r3, [r7, #72]	@ 0x48
        float y = reading.MagYData - offset.y;
 8001d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d42:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fd13 	bl	8000774 <__aeabi_fsub>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	647b      	str	r3, [r7, #68]	@ 0x44
        float z = reading.MagZData - offset.z;
 8001d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7fe fd0a 	bl	8000774 <__aeabi_fsub>
 8001d60:	4603      	mov	r3, r0
 8001d62:	643b      	str	r3, [r7, #64]	@ 0x40

        if (x < minX) { minX = x; }
 8001d64:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001d66:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001d68:	f7fe ffac 	bl	8000cc4 <__aeabi_fcmplt>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <ComputeMagScale+0x8a>
 8001d72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d74:	667b      	str	r3, [r7, #100]	@ 0x64
        if (x > maxX) { maxX = x; }
 8001d76:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001d78:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001d7a:	f7fe ffc1 	bl	8000d00 <__aeabi_fcmpgt>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <ComputeMagScale+0x9c>
 8001d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d86:	663b      	str	r3, [r7, #96]	@ 0x60

        if (y < minY) { minY = y; }
 8001d88:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001d8a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d8c:	f7fe ff9a 	bl	8000cc4 <__aeabi_fcmplt>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <ComputeMagScale+0xae>
 8001d96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
        if (y > maxY) { maxY = y; }
 8001d9a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001d9c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001d9e:	f7fe ffaf 	bl	8000d00 <__aeabi_fcmpgt>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d001      	beq.n	8001dac <ComputeMagScale+0xc0>
 8001da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001daa:	65bb      	str	r3, [r7, #88]	@ 0x58

        if (z < minZ) { minZ = z; }
 8001dac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001dae:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001db0:	f7fe ff88 	bl	8000cc4 <__aeabi_fcmplt>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <ComputeMagScale+0xd2>
 8001dba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dbc:	657b      	str	r3, [r7, #84]	@ 0x54
        if (z > maxZ) { maxZ = z; }
 8001dbe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001dc0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8001dc2:	f7fe ff9d 	bl	8000d00 <__aeabi_fcmpgt>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <ComputeMagScale+0xe4>
 8001dcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001dce:	653b      	str	r3, [r7, #80]	@ 0x50


        HAL_Delay(delay_ms);
 8001dd0:	883b      	ldrh	r3, [r7, #0]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 fac0 	bl	8002358 <HAL_Delay>
    for (uint16_t i = 0; i < num_samples; i++) {
 8001dd8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ddc:	3301      	adds	r3, #1
 8001dde:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001de2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8001de6:	887b      	ldrh	r3, [r7, #2]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d39c      	bcc.n	8001d26 <ComputeMagScale+0x3a>
    }

    Offset3D scale;
    scale.x = 200.0f / (maxX - minX);
 8001dec:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001dee:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001df0:	f7fe fcc0 	bl	8000774 <__aeabi_fsub>
 8001df4:	4603      	mov	r3, r0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4815      	ldr	r0, [pc, #84]	@ (8001e50 <ComputeMagScale+0x164>)
 8001dfa:	f7fe fe79 	bl	8000af0 <__aeabi_fdiv>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	637b      	str	r3, [r7, #52]	@ 0x34
    scale.y = 200.0f / (maxY - minY);
 8001e02:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001e04:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8001e06:	f7fe fcb5 	bl	8000774 <__aeabi_fsub>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4810      	ldr	r0, [pc, #64]	@ (8001e50 <ComputeMagScale+0x164>)
 8001e10:	f7fe fe6e 	bl	8000af0 <__aeabi_fdiv>
 8001e14:	4603      	mov	r3, r0
 8001e16:	63bb      	str	r3, [r7, #56]	@ 0x38
    scale.z = 200.0f / (maxZ - minZ);
 8001e18:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8001e1a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8001e1c:	f7fe fcaa 	bl	8000774 <__aeabi_fsub>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4619      	mov	r1, r3
 8001e24:	480a      	ldr	r0, [pc, #40]	@ (8001e50 <ComputeMagScale+0x164>)
 8001e26:	f7fe fe63 	bl	8000af0 <__aeabi_fdiv>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return scale;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	461c      	mov	r4, r3
 8001e32:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001e3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	376c      	adds	r7, #108	@ 0x6c
 8001e42:	46bd      	mov	sp, r7
 8001e44:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e48:	b002      	add	sp, #8
 8001e4a:	4770      	bx	lr
 8001e4c:	46fffe00 	.word	0x46fffe00
 8001e50:	43480000 	.word	0x43480000

08001e54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e58:	b672      	cpsid	i
}
 8001e5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5c:	bf00      	nop
 8001e5e:	e7fd      	b.n	8001e5c <Error_Handler+0x8>

08001e60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e66:	4b15      	ldr	r3, [pc, #84]	@ (8001ebc <HAL_MspInit+0x5c>)
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	4a14      	ldr	r2, [pc, #80]	@ (8001ebc <HAL_MspInit+0x5c>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6193      	str	r3, [r2, #24]
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_MspInit+0x5c>)
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_MspInit+0x5c>)
 8001e80:	69db      	ldr	r3, [r3, #28]
 8001e82:	4a0e      	ldr	r2, [pc, #56]	@ (8001ebc <HAL_MspInit+0x5c>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	61d3      	str	r3, [r2, #28]
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_MspInit+0x5c>)
 8001e8c:	69db      	ldr	r3, [r3, #28]
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	607b      	str	r3, [r7, #4]
 8001e94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <HAL_MspInit+0x60>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	4a04      	ldr	r2, [pc, #16]	@ (8001ec0 <HAL_MspInit+0x60>)
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3714      	adds	r7, #20
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bc80      	pop	{r7}
 8001eba:	4770      	bx	lr
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40010000 	.word	0x40010000

08001ec4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a16      	ldr	r2, [pc, #88]	@ (8001f38 <HAL_I2C_MspInit+0x74>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d124      	bne.n	8001f2e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee4:	4b15      	ldr	r3, [pc, #84]	@ (8001f3c <HAL_I2C_MspInit+0x78>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a14      	ldr	r2, [pc, #80]	@ (8001f3c <HAL_I2C_MspInit+0x78>)
 8001eea:	f043 0308 	orr.w	r3, r3, #8
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_I2C_MspInit+0x78>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001efc:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f02:	2312      	movs	r3, #18
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f06:	2303      	movs	r3, #3
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	480b      	ldr	r0, [pc, #44]	@ (8001f40 <HAL_I2C_MspInit+0x7c>)
 8001f12:	f000 fb53 	bl	80025bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_I2C_MspInit+0x78>)
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	4a08      	ldr	r2, [pc, #32]	@ (8001f3c <HAL_I2C_MspInit+0x78>)
 8001f1c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001f20:	61d3      	str	r3, [r2, #28]
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_I2C_MspInit+0x78>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f2a:	60bb      	str	r3, [r7, #8]
 8001f2c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40005800 	.word	0x40005800
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010c00 	.word	0x40010c00

08001f44 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08a      	sub	sp, #40	@ 0x28
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f4c:	f107 0318 	add.w	r3, r7, #24
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	605a      	str	r2, [r3, #4]
 8001f56:	609a      	str	r2, [r3, #8]
 8001f58:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM2)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f62:	d124      	bne.n	8001fae <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f64:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f66:	69db      	ldr	r3, [r3, #28]
 8001f68:	4a27      	ldr	r2, [pc, #156]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	61d3      	str	r3, [r2, #28]
 8001f70:	4b25      	ldr	r3, [pc, #148]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	4a21      	ldr	r2, [pc, #132]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6193      	str	r3, [r2, #24]
 8001f88:	4b1f      	ldr	r3, [pc, #124]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	613b      	str	r3, [r7, #16]
 8001f92:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001f94:	2303      	movs	r3, #3
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa0:	f107 0318 	add.w	r3, r7, #24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4819      	ldr	r0, [pc, #100]	@ (800200c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001fa8:	f000 fb08 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001fac:	e028      	b.n	8002000 <HAL_TIM_Encoder_MspInit+0xbc>
  else if(htim_encoder->Instance==TIM3)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a17      	ldr	r2, [pc, #92]	@ (8002010 <HAL_TIM_Encoder_MspInit+0xcc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d123      	bne.n	8002000 <HAL_TIM_Encoder_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fb8:	4b13      	ldr	r3, [pc, #76]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fba:	69db      	ldr	r3, [r3, #28]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fbe:	f043 0302 	orr.w	r3, r3, #2
 8001fc2:	61d3      	str	r3, [r2, #28]
 8001fc4:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fd6:	f043 0304 	orr.w	r3, r3, #4
 8001fda:	6193      	str	r3, [r2, #24]
 8001fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002008 <HAL_TIM_Encoder_MspInit+0xc4>)
 8001fde:	699b      	ldr	r3, [r3, #24]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	60bb      	str	r3, [r7, #8]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001fe8:	23c0      	movs	r3, #192	@ 0xc0
 8001fea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	4619      	mov	r1, r3
 8001ffa:	4804      	ldr	r0, [pc, #16]	@ (800200c <HAL_TIM_Encoder_MspInit+0xc8>)
 8001ffc:	f000 fade 	bl	80025bc <HAL_GPIO_Init>
}
 8002000:	bf00      	nop
 8002002:	3728      	adds	r7, #40	@ 0x28
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	40021000 	.word	0x40021000
 800200c:	40010800 	.word	0x40010800
 8002010:	40000400 	.word	0x40000400

08002014 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a09      	ldr	r2, [pc, #36]	@ (8002048 <HAL_TIM_PWM_MspInit+0x34>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d10b      	bne.n	800203e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <HAL_TIM_PWM_MspInit+0x38>)
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	4a08      	ldr	r2, [pc, #32]	@ (800204c <HAL_TIM_PWM_MspInit+0x38>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	61d3      	str	r3, [r2, #28]
 8002032:	4b06      	ldr	r3, [pc, #24]	@ (800204c <HAL_TIM_PWM_MspInit+0x38>)
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	60fb      	str	r3, [r7, #12]
 800203c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800203e:	bf00      	nop
 8002040:	3714      	adds	r7, #20
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40000800 	.word	0x40000800
 800204c:	40021000 	.word	0x40021000

08002050 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002058:	f107 0310 	add.w	r3, r7, #16
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	605a      	str	r2, [r3, #4]
 8002062:	609a      	str	r2, [r3, #8]
 8002064:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a10      	ldr	r2, [pc, #64]	@ (80020ac <HAL_TIM_MspPostInit+0x5c>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d118      	bne.n	80020a2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002070:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_TIM_MspPostInit+0x60>)
 8002072:	699b      	ldr	r3, [r3, #24]
 8002074:	4a0e      	ldr	r2, [pc, #56]	@ (80020b0 <HAL_TIM_MspPostInit+0x60>)
 8002076:	f043 0308 	orr.w	r3, r3, #8
 800207a:	6193      	str	r3, [r2, #24]
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <HAL_TIM_MspPostInit+0x60>)
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002088:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800208c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002092:	2302      	movs	r3, #2
 8002094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002096:	f107 0310 	add.w	r3, r7, #16
 800209a:	4619      	mov	r1, r3
 800209c:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <HAL_TIM_MspPostInit+0x64>)
 800209e:	f000 fa8d 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020a2:	bf00      	nop
 80020a4:	3720      	adds	r7, #32
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40000800 	.word	0x40000800
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40010c00 	.word	0x40010c00

080020b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	605a      	str	r2, [r3, #4]
 80020ca:	609a      	str	r2, [r3, #8]
 80020cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a1c      	ldr	r2, [pc, #112]	@ (8002144 <HAL_UART_MspInit+0x8c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d131      	bne.n	800213c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020d8:	4b1b      	ldr	r3, [pc, #108]	@ (8002148 <HAL_UART_MspInit+0x90>)
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	4a1a      	ldr	r2, [pc, #104]	@ (8002148 <HAL_UART_MspInit+0x90>)
 80020de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e2:	6193      	str	r3, [r2, #24]
 80020e4:	4b18      	ldr	r3, [pc, #96]	@ (8002148 <HAL_UART_MspInit+0x90>)
 80020e6:	699b      	ldr	r3, [r3, #24]
 80020e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f0:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <HAL_UART_MspInit+0x90>)
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	4a14      	ldr	r2, [pc, #80]	@ (8002148 <HAL_UART_MspInit+0x90>)
 80020f6:	f043 0304 	orr.w	r3, r3, #4
 80020fa:	6193      	str	r3, [r2, #24]
 80020fc:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <HAL_UART_MspInit+0x90>)
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	f003 0304 	and.w	r3, r3, #4
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002108:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800210c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002112:	2303      	movs	r3, #3
 8002114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0310 	add.w	r3, r7, #16
 800211a:	4619      	mov	r1, r3
 800211c:	480b      	ldr	r0, [pc, #44]	@ (800214c <HAL_UART_MspInit+0x94>)
 800211e:	f000 fa4d 	bl	80025bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002122:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002126:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002128:	2300      	movs	r3, #0
 800212a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002130:	f107 0310 	add.w	r3, r7, #16
 8002134:	4619      	mov	r1, r3
 8002136:	4805      	ldr	r0, [pc, #20]	@ (800214c <HAL_UART_MspInit+0x94>)
 8002138:	f000 fa40 	bl	80025bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800213c:	bf00      	nop
 800213e:	3720      	adds	r7, #32
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40013800 	.word	0x40013800
 8002148:	40021000 	.word	0x40021000
 800214c:	40010800 	.word	0x40010800

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <NMI_Handler+0x4>

08002158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <MemManage_Handler+0x4>

08002168 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	bc80      	pop	{r7}
 8002182:	4770      	bx	lr

08002184 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	bc80      	pop	{r7}
 800219a:	4770      	bx	lr

0800219c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a0:	f000 f8be 	bl	8002320 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021a4:	bf00      	nop
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80021ac:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80021b0:	f000 fba0 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80021b4:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80021b8:	f000 fb9c 	bl	80028f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_GPIO_EXTI_Callback>:

extern volatile int32_t encoder3_count;
extern volatile int32_t encoder4_count;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_12) { // ENC3 - Canal A
 80021ca:	88fb      	ldrh	r3, [r7, #6]
 80021cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021d0:	d113      	bne.n	80021fa <HAL_GPIO_EXTI_Callback+0x3a>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == GPIO_PIN_SET)
 80021d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021d6:	4816      	ldr	r0, [pc, #88]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x70>)
 80021d8:	f000 fb74 	bl	80028c4 <HAL_GPIO_ReadPin>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_GPIO_EXTI_Callback+0x2e>
            encoder3_count++;
 80021e2:	4b14      	ldr	r3, [pc, #80]	@ (8002234 <HAL_GPIO_EXTI_Callback+0x74>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	3301      	adds	r3, #1
 80021e8:	4a12      	ldr	r2, [pc, #72]	@ (8002234 <HAL_GPIO_EXTI_Callback+0x74>)
 80021ea:	6013      	str	r3, [r2, #0]
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
            encoder4_count++;
        else
            encoder4_count--;
    }
}
 80021ec:	e01c      	b.n	8002228 <HAL_GPIO_EXTI_Callback+0x68>
            encoder3_count--;
 80021ee:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_GPIO_EXTI_Callback+0x74>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	3b01      	subs	r3, #1
 80021f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002234 <HAL_GPIO_EXTI_Callback+0x74>)
 80021f6:	6013      	str	r3, [r2, #0]
}
 80021f8:	e016      	b.n	8002228 <HAL_GPIO_EXTI_Callback+0x68>
    else if (GPIO_Pin == GPIO_PIN_14) { // ENC4 - Canal A
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002200:	d112      	bne.n	8002228 <HAL_GPIO_EXTI_Callback+0x68>
        if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_SET)
 8002202:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002206:	480a      	ldr	r0, [pc, #40]	@ (8002230 <HAL_GPIO_EXTI_Callback+0x70>)
 8002208:	f000 fb5c 	bl	80028c4 <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_GPIO_EXTI_Callback+0x5e>
            encoder4_count++;
 8002212:	4b09      	ldr	r3, [pc, #36]	@ (8002238 <HAL_GPIO_EXTI_Callback+0x78>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	4a07      	ldr	r2, [pc, #28]	@ (8002238 <HAL_GPIO_EXTI_Callback+0x78>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	e004      	b.n	8002228 <HAL_GPIO_EXTI_Callback+0x68>
            encoder4_count--;
 800221e:	4b06      	ldr	r3, [pc, #24]	@ (8002238 <HAL_GPIO_EXTI_Callback+0x78>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	3b01      	subs	r3, #1
 8002224:	4a04      	ldr	r2, [pc, #16]	@ (8002238 <HAL_GPIO_EXTI_Callback+0x78>)
 8002226:	6013      	str	r3, [r2, #0]
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40010c00 	.word	0x40010c00
 8002234:	2000022c 	.word	0x2000022c
 8002238:	20000230 	.word	0x20000230

0800223c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002240:	bf00      	nop
 8002242:	46bd      	mov	sp, r7
 8002244:	bc80      	pop	{r7}
 8002246:	4770      	bx	lr

08002248 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002248:	f7ff fff8 	bl	800223c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800224c:	480b      	ldr	r0, [pc, #44]	@ (800227c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800224e:	490c      	ldr	r1, [pc, #48]	@ (8002280 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002250:	4a0c      	ldr	r2, [pc, #48]	@ (8002284 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002254:	e002      	b.n	800225c <LoopCopyDataInit>

08002256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225a:	3304      	adds	r3, #4

0800225c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800225c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800225e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002260:	d3f9      	bcc.n	8002256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002262:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002264:	4c09      	ldr	r4, [pc, #36]	@ (800228c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002268:	e001      	b.n	800226e <LoopFillZerobss>

0800226a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800226c:	3204      	adds	r2, #4

0800226e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800226e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002270:	d3fb      	bcc.n	800226a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002272:	f002 fddd 	bl	8004e30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002276:	f7fe fd6f 	bl	8000d58 <main>
  bx lr
 800227a:	4770      	bx	lr
  ldr r0, =_sdata
 800227c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002280:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8002284:	08004ec4 	.word	0x08004ec4
  ldr r2, =_sbss
 8002288:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 800228c:	20000238 	.word	0x20000238

08002290 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002290:	e7fe      	b.n	8002290 <ADC1_2_IRQHandler>
	...

08002294 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002298:	4b08      	ldr	r3, [pc, #32]	@ (80022bc <HAL_Init+0x28>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a07      	ldr	r2, [pc, #28]	@ (80022bc <HAL_Init+0x28>)
 800229e:	f043 0310 	orr.w	r3, r3, #16
 80022a2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022a4:	2003      	movs	r0, #3
 80022a6:	f000 f947 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022aa:	200f      	movs	r0, #15
 80022ac:	f000 f808 	bl	80022c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022b0:	f7ff fdd6 	bl	8001e60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40022000 	.word	0x40022000

080022c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_InitTick+0x54>)
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b12      	ldr	r3, [pc, #72]	@ (8002318 <HAL_InitTick+0x58>)
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	4619      	mov	r1, r3
 80022d2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f95f 	bl	80025a2 <HAL_SYSTICK_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d001      	beq.n	80022ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022ea:	2301      	movs	r3, #1
 80022ec:	e00e      	b.n	800230c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b0f      	cmp	r3, #15
 80022f2:	d80a      	bhi.n	800230a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022f4:	2200      	movs	r2, #0
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	f04f 30ff 	mov.w	r0, #4294967295
 80022fc:	f000 f927 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002300:	4a06      	ldr	r2, [pc, #24]	@ (800231c <HAL_InitTick+0x5c>)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
 8002308:	e000      	b.n	800230c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
}
 800230c:	4618      	mov	r0, r3
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	2000000c 	.word	0x2000000c
 8002318:	20000014 	.word	0x20000014
 800231c:	20000010 	.word	0x20000010

08002320 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <HAL_IncTick+0x1c>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4b05      	ldr	r3, [pc, #20]	@ (8002340 <HAL_IncTick+0x20>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4413      	add	r3, r2
 8002330:	4a03      	ldr	r2, [pc, #12]	@ (8002340 <HAL_IncTick+0x20>)
 8002332:	6013      	str	r3, [r2, #0]
}
 8002334:	bf00      	nop
 8002336:	46bd      	mov	sp, r7
 8002338:	bc80      	pop	{r7}
 800233a:	4770      	bx	lr
 800233c:	20000014 	.word	0x20000014
 8002340:	20000234 	.word	0x20000234

08002344 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return uwTick;
 8002348:	4b02      	ldr	r3, [pc, #8]	@ (8002354 <HAL_GetTick+0x10>)
 800234a:	681b      	ldr	r3, [r3, #0]
}
 800234c:	4618      	mov	r0, r3
 800234e:	46bd      	mov	sp, r7
 8002350:	bc80      	pop	{r7}
 8002352:	4770      	bx	lr
 8002354:	20000234 	.word	0x20000234

08002358 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b084      	sub	sp, #16
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002360:	f7ff fff0 	bl	8002344 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002370:	d005      	beq.n	800237e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002372:	4b0a      	ldr	r3, [pc, #40]	@ (800239c <HAL_Delay+0x44>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	461a      	mov	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800237e:	bf00      	nop
 8002380:	f7ff ffe0 	bl	8002344 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	429a      	cmp	r2, r3
 800238e:	d8f7      	bhi.n	8002380 <HAL_Delay+0x28>
  {
  }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3710      	adds	r7, #16
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000014 	.word	0x20000014

080023a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b085      	sub	sp, #20
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f003 0307 	and.w	r3, r3, #7
 80023ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023b0:	4b0c      	ldr	r3, [pc, #48]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80023bc:	4013      	ands	r3, r2
 80023be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80023cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023d2:	4a04      	ldr	r2, [pc, #16]	@ (80023e4 <__NVIC_SetPriorityGrouping+0x44>)
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	60d3      	str	r3, [r2, #12]
}
 80023d8:	bf00      	nop
 80023da:	3714      	adds	r7, #20
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <__NVIC_GetPriorityGrouping+0x18>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	0a1b      	lsrs	r3, r3, #8
 80023f2:	f003 0307 	and.w	r3, r3, #7
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	2b00      	cmp	r3, #0
 8002414:	db0b      	blt.n	800242e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002416:	79fb      	ldrb	r3, [r7, #7]
 8002418:	f003 021f 	and.w	r2, r3, #31
 800241c:	4906      	ldr	r1, [pc, #24]	@ (8002438 <__NVIC_EnableIRQ+0x34>)
 800241e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	2001      	movs	r0, #1
 8002426:	fa00 f202 	lsl.w	r2, r0, r2
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	e000e100 	.word	0xe000e100

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	@ (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	@ (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	@ 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	@ 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff90 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	@ (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	@ (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff2d 	bl	80023a0 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff42 	bl	80023e8 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff90 	bl	8002490 <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5f 	bl	800243c <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	4603      	mov	r3, r0
 800258e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff35 	bl	8002404 <__NVIC_EnableIRQ>
}
 800259a:	bf00      	nop
 800259c:	3708      	adds	r7, #8
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ffa2 	bl	80024f4 <SysTick_Config>
 80025b0:	4603      	mov	r3, r0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025bc:	b480      	push	{r7}
 80025be:	b08b      	sub	sp, #44	@ 0x2c
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025c6:	2300      	movs	r3, #0
 80025c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ca:	2300      	movs	r3, #0
 80025cc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ce:	e169      	b.n	80028a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025d0:	2201      	movs	r2, #1
 80025d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	4013      	ands	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	f040 8158 	bne.w	800289e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	4a9a      	ldr	r2, [pc, #616]	@ (800285c <HAL_GPIO_Init+0x2a0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d05e      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 80025f8:	4a98      	ldr	r2, [pc, #608]	@ (800285c <HAL_GPIO_Init+0x2a0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d875      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 80025fe:	4a98      	ldr	r2, [pc, #608]	@ (8002860 <HAL_GPIO_Init+0x2a4>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d058      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002604:	4a96      	ldr	r2, [pc, #600]	@ (8002860 <HAL_GPIO_Init+0x2a4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d86f      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 800260a:	4a96      	ldr	r2, [pc, #600]	@ (8002864 <HAL_GPIO_Init+0x2a8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d052      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002610:	4a94      	ldr	r2, [pc, #592]	@ (8002864 <HAL_GPIO_Init+0x2a8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d869      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002616:	4a94      	ldr	r2, [pc, #592]	@ (8002868 <HAL_GPIO_Init+0x2ac>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d04c      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 800261c:	4a92      	ldr	r2, [pc, #584]	@ (8002868 <HAL_GPIO_Init+0x2ac>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d863      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002622:	4a92      	ldr	r2, [pc, #584]	@ (800286c <HAL_GPIO_Init+0x2b0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d046      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
 8002628:	4a90      	ldr	r2, [pc, #576]	@ (800286c <HAL_GPIO_Init+0x2b0>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d85d      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 800262e:	2b12      	cmp	r3, #18
 8002630:	d82a      	bhi.n	8002688 <HAL_GPIO_Init+0xcc>
 8002632:	2b12      	cmp	r3, #18
 8002634:	d859      	bhi.n	80026ea <HAL_GPIO_Init+0x12e>
 8002636:	a201      	add	r2, pc, #4	@ (adr r2, 800263c <HAL_GPIO_Init+0x80>)
 8002638:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800263c:	080026b7 	.word	0x080026b7
 8002640:	08002691 	.word	0x08002691
 8002644:	080026a3 	.word	0x080026a3
 8002648:	080026e5 	.word	0x080026e5
 800264c:	080026eb 	.word	0x080026eb
 8002650:	080026eb 	.word	0x080026eb
 8002654:	080026eb 	.word	0x080026eb
 8002658:	080026eb 	.word	0x080026eb
 800265c:	080026eb 	.word	0x080026eb
 8002660:	080026eb 	.word	0x080026eb
 8002664:	080026eb 	.word	0x080026eb
 8002668:	080026eb 	.word	0x080026eb
 800266c:	080026eb 	.word	0x080026eb
 8002670:	080026eb 	.word	0x080026eb
 8002674:	080026eb 	.word	0x080026eb
 8002678:	080026eb 	.word	0x080026eb
 800267c:	080026eb 	.word	0x080026eb
 8002680:	08002699 	.word	0x08002699
 8002684:	080026ad 	.word	0x080026ad
 8002688:	4a79      	ldr	r2, [pc, #484]	@ (8002870 <HAL_GPIO_Init+0x2b4>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800268e:	e02c      	b.n	80026ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	623b      	str	r3, [r7, #32]
          break;
 8002696:	e029      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	3304      	adds	r3, #4
 800269e:	623b      	str	r3, [r7, #32]
          break;
 80026a0:	e024      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	3308      	adds	r3, #8
 80026a8:	623b      	str	r3, [r7, #32]
          break;
 80026aa:	e01f      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	330c      	adds	r3, #12
 80026b2:	623b      	str	r3, [r7, #32]
          break;
 80026b4:	e01a      	b.n	80026ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d102      	bne.n	80026c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026be:	2304      	movs	r3, #4
 80026c0:	623b      	str	r3, [r7, #32]
          break;
 80026c2:	e013      	b.n	80026ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d105      	bne.n	80026d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026cc:	2308      	movs	r3, #8
 80026ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	611a      	str	r2, [r3, #16]
          break;
 80026d6:	e009      	b.n	80026ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026d8:	2308      	movs	r3, #8
 80026da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	615a      	str	r2, [r3, #20]
          break;
 80026e2:	e003      	b.n	80026ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
          break;
 80026e8:	e000      	b.n	80026ec <HAL_GPIO_Init+0x130>
          break;
 80026ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2bff      	cmp	r3, #255	@ 0xff
 80026f0:	d801      	bhi.n	80026f6 <HAL_GPIO_Init+0x13a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	e001      	b.n	80026fa <HAL_GPIO_Init+0x13e>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3304      	adds	r3, #4
 80026fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2bff      	cmp	r3, #255	@ 0xff
 8002700:	d802      	bhi.n	8002708 <HAL_GPIO_Init+0x14c>
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	e002      	b.n	800270e <HAL_GPIO_Init+0x152>
 8002708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800270a:	3b08      	subs	r3, #8
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	210f      	movs	r1, #15
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	fa01 f303 	lsl.w	r3, r1, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	401a      	ands	r2, r3
 8002720:	6a39      	ldr	r1, [r7, #32]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	431a      	orrs	r2, r3
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	f000 80b1 	beq.w	800289e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800273c:	4b4d      	ldr	r3, [pc, #308]	@ (8002874 <HAL_GPIO_Init+0x2b8>)
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	4a4c      	ldr	r2, [pc, #304]	@ (8002874 <HAL_GPIO_Init+0x2b8>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6193      	str	r3, [r2, #24]
 8002748:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <HAL_GPIO_Init+0x2b8>)
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	60bb      	str	r3, [r7, #8]
 8002752:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002754:	4a48      	ldr	r2, [pc, #288]	@ (8002878 <HAL_GPIO_Init+0x2bc>)
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	089b      	lsrs	r3, r3, #2
 800275a:	3302      	adds	r3, #2
 800275c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002760:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	220f      	movs	r2, #15
 800276c:	fa02 f303 	lsl.w	r3, r2, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a40      	ldr	r2, [pc, #256]	@ (800287c <HAL_GPIO_Init+0x2c0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <HAL_GPIO_Init+0x1ec>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a3f      	ldr	r2, [pc, #252]	@ (8002880 <HAL_GPIO_Init+0x2c4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d00d      	beq.n	80027a4 <HAL_GPIO_Init+0x1e8>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3e      	ldr	r2, [pc, #248]	@ (8002884 <HAL_GPIO_Init+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d007      	beq.n	80027a0 <HAL_GPIO_Init+0x1e4>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a3d      	ldr	r2, [pc, #244]	@ (8002888 <HAL_GPIO_Init+0x2cc>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d101      	bne.n	800279c <HAL_GPIO_Init+0x1e0>
 8002798:	2303      	movs	r3, #3
 800279a:	e006      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 800279c:	2304      	movs	r3, #4
 800279e:	e004      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e002      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <HAL_GPIO_Init+0x1ee>
 80027a8:	2300      	movs	r3, #0
 80027aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ac:	f002 0203 	and.w	r2, r2, #3
 80027b0:	0092      	lsls	r2, r2, #2
 80027b2:	4093      	lsls	r3, r2
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80027ba:	492f      	ldr	r1, [pc, #188]	@ (8002878 <HAL_GPIO_Init+0x2bc>)
 80027bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027be:	089b      	lsrs	r3, r3, #2
 80027c0:	3302      	adds	r3, #2
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d006      	beq.n	80027e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027d4:	4b2d      	ldr	r3, [pc, #180]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	492c      	ldr	r1, [pc, #176]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 80027da:	69bb      	ldr	r3, [r7, #24]
 80027dc:	4313      	orrs	r3, r2
 80027de:	608b      	str	r3, [r1, #8]
 80027e0:	e006      	b.n	80027f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027e2:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	43db      	mvns	r3, r3
 80027ea:	4928      	ldr	r1, [pc, #160]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 80027ec:	4013      	ands	r3, r2
 80027ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d006      	beq.n	800280a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027fc:	4b23      	ldr	r3, [pc, #140]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	4922      	ldr	r1, [pc, #136]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	60cb      	str	r3, [r1, #12]
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 800280c:	68da      	ldr	r2, [r3, #12]
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	43db      	mvns	r3, r3
 8002812:	491e      	ldr	r1, [pc, #120]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 8002814:	4013      	ands	r3, r2
 8002816:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d006      	beq.n	8002832 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002824:	4b19      	ldr	r3, [pc, #100]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	4918      	ldr	r1, [pc, #96]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
 8002830:	e006      	b.n	8002840 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002832:	4b16      	ldr	r3, [pc, #88]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	43db      	mvns	r3, r3
 800283a:	4914      	ldr	r1, [pc, #80]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 800283c:	4013      	ands	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d021      	beq.n	8002890 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800284c:	4b0f      	ldr	r3, [pc, #60]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	490e      	ldr	r1, [pc, #56]	@ (800288c <HAL_GPIO_Init+0x2d0>)
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	4313      	orrs	r3, r2
 8002856:	600b      	str	r3, [r1, #0]
 8002858:	e021      	b.n	800289e <HAL_GPIO_Init+0x2e2>
 800285a:	bf00      	nop
 800285c:	10320000 	.word	0x10320000
 8002860:	10310000 	.word	0x10310000
 8002864:	10220000 	.word	0x10220000
 8002868:	10210000 	.word	0x10210000
 800286c:	10120000 	.word	0x10120000
 8002870:	10110000 	.word	0x10110000
 8002874:	40021000 	.word	0x40021000
 8002878:	40010000 	.word	0x40010000
 800287c:	40010800 	.word	0x40010800
 8002880:	40010c00 	.word	0x40010c00
 8002884:	40011000 	.word	0x40011000
 8002888:	40011400 	.word	0x40011400
 800288c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <HAL_GPIO_Init+0x304>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	43db      	mvns	r3, r3
 8002898:	4909      	ldr	r1, [pc, #36]	@ (80028c0 <HAL_GPIO_Init+0x304>)
 800289a:	4013      	ands	r3, r2
 800289c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	3301      	adds	r3, #1
 80028a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	f47f ae8e 	bne.w	80025d0 <HAL_GPIO_Init+0x14>
  }
}
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	372c      	adds	r7, #44	@ 0x2c
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bc80      	pop	{r7}
 80028be:	4770      	bx	lr
 80028c0:	40010400 	.word	0x40010400

080028c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	460b      	mov	r3, r1
 80028ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	689a      	ldr	r2, [r3, #8]
 80028d4:	887b      	ldrh	r3, [r7, #2]
 80028d6:	4013      	ands	r3, r2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d002      	beq.n	80028e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80028dc:	2301      	movs	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	e001      	b.n	80028e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80028e2:	2300      	movs	r3, #0
 80028e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80028fe:	4b08      	ldr	r3, [pc, #32]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002900:	695a      	ldr	r2, [r3, #20]
 8002902:	88fb      	ldrh	r3, [r7, #6]
 8002904:	4013      	ands	r3, r2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d006      	beq.n	8002918 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800290a:	4a05      	ldr	r2, [pc, #20]	@ (8002920 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002910:	88fb      	ldrh	r3, [r7, #6]
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fc54 	bl	80021c0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002918:	bf00      	nop
 800291a:	3708      	adds	r7, #8
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40010400 	.word	0x40010400

08002924 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e12b      	b.n	8002b8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800293c:	b2db      	uxtb	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d106      	bne.n	8002950 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f7ff faba 	bl	8001ec4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2224      	movs	r2, #36	@ 0x24
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f022 0201 	bic.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002976:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002986:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002988:	f001 fbca 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 800298c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	4a81      	ldr	r2, [pc, #516]	@ (8002b98 <HAL_I2C_Init+0x274>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d807      	bhi.n	80029a8 <HAL_I2C_Init+0x84>
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	4a80      	ldr	r2, [pc, #512]	@ (8002b9c <HAL_I2C_Init+0x278>)
 800299c:	4293      	cmp	r3, r2
 800299e:	bf94      	ite	ls
 80029a0:	2301      	movls	r3, #1
 80029a2:	2300      	movhi	r3, #0
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	e006      	b.n	80029b6 <HAL_I2C_Init+0x92>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a7d      	ldr	r2, [pc, #500]	@ (8002ba0 <HAL_I2C_Init+0x27c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	bf94      	ite	ls
 80029b0:	2301      	movls	r3, #1
 80029b2:	2300      	movhi	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e0e7      	b.n	8002b8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	4a78      	ldr	r2, [pc, #480]	@ (8002ba4 <HAL_I2C_Init+0x280>)
 80029c2:	fba2 2303 	umull	r2, r3, r2, r3
 80029c6:	0c9b      	lsrs	r3, r3, #18
 80029c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6a1b      	ldr	r3, [r3, #32]
 80029e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002b98 <HAL_I2C_Init+0x274>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d802      	bhi.n	80029f8 <HAL_I2C_Init+0xd4>
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	e009      	b.n	8002a0c <HAL_I2C_Init+0xe8>
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80029fe:	fb02 f303 	mul.w	r3, r2, r3
 8002a02:	4a69      	ldr	r2, [pc, #420]	@ (8002ba8 <HAL_I2C_Init+0x284>)
 8002a04:	fba2 2303 	umull	r2, r3, r2, r3
 8002a08:	099b      	lsrs	r3, r3, #6
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002a1e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	495c      	ldr	r1, [pc, #368]	@ (8002b98 <HAL_I2C_Init+0x274>)
 8002a28:	428b      	cmp	r3, r1
 8002a2a:	d819      	bhi.n	8002a60 <HAL_I2C_Init+0x13c>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	1e59      	subs	r1, r3, #1
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	005b      	lsls	r3, r3, #1
 8002a36:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a3a:	1c59      	adds	r1, r3, #1
 8002a3c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002a40:	400b      	ands	r3, r1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_I2C_Init+0x138>
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	1e59      	subs	r1, r3, #1
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a54:	3301      	adds	r3, #1
 8002a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5a:	e051      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002a5c:	2304      	movs	r3, #4
 8002a5e:	e04f      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <HAL_I2C_Init+0x168>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1e58      	subs	r0, r3, #1
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6859      	ldr	r1, [r3, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	440b      	add	r3, r1
 8002a76:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	bf0c      	ite	eq
 8002a84:	2301      	moveq	r3, #1
 8002a86:	2300      	movne	r3, #0
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	e012      	b.n	8002ab2 <HAL_I2C_Init+0x18e>
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	1e58      	subs	r0, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6859      	ldr	r1, [r3, #4]
 8002a94:	460b      	mov	r3, r1
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	440b      	add	r3, r1
 8002a9a:	0099      	lsls	r1, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	bf0c      	ite	eq
 8002aac:	2301      	moveq	r3, #1
 8002aae:	2300      	movne	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_I2C_Init+0x196>
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e022      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d10e      	bne.n	8002ae0 <HAL_I2C_Init+0x1bc>
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1e58      	subs	r0, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6859      	ldr	r1, [r3, #4]
 8002aca:	460b      	mov	r3, r1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	440b      	add	r3, r1
 8002ad0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ad4:	3301      	adds	r3, #1
 8002ad6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ada:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Init+0x1dc>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	1e58      	subs	r0, r3, #1
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6859      	ldr	r1, [r3, #4]
 8002ae8:	460b      	mov	r3, r1
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	0099      	lsls	r1, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af6:	3301      	adds	r3, #1
 8002af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002b00:	6879      	ldr	r1, [r7, #4]
 8002b02:	6809      	ldr	r1, [r1, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69da      	ldr	r2, [r3, #28]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	430a      	orrs	r2, r1
 8002b22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002b2e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6911      	ldr	r1, [r2, #16]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	68d2      	ldr	r2, [r2, #12]
 8002b3a:	4311      	orrs	r1, r2
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	6812      	ldr	r2, [r2, #0]
 8002b40:	430b      	orrs	r3, r1
 8002b42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 0201 	orr.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2220      	movs	r2, #32
 8002b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	000186a0 	.word	0x000186a0
 8002b9c:	001e847f 	.word	0x001e847f
 8002ba0:	003d08ff 	.word	0x003d08ff
 8002ba4:	431bde83 	.word	0x431bde83
 8002ba8:	10624dd3 	.word	0x10624dd3

08002bac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	607a      	str	r2, [r7, #4]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	460b      	mov	r3, r1
 8002bba:	817b      	strh	r3, [r7, #10]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bc0:	f7ff fbc0 	bl	8002344 <HAL_GetTick>
 8002bc4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	2b20      	cmp	r3, #32
 8002bd0:	f040 80e0 	bne.w	8002d94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	9300      	str	r3, [sp, #0]
 8002bd8:	2319      	movs	r3, #25
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4970      	ldr	r1, [pc, #448]	@ (8002da0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 fc9e 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002bea:	2302      	movs	r3, #2
 8002bec:	e0d3      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_I2C_Master_Transmit+0x50>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e0cc      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d007      	beq.n	8002c22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f042 0201 	orr.w	r2, r2, #1
 8002c20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	@ 0x21
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2210      	movs	r2, #16
 8002c3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2200      	movs	r2, #0
 8002c46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	893a      	ldrh	r2, [r7, #8]
 8002c52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c58:	b29a      	uxth	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4a50      	ldr	r2, [pc, #320]	@ (8002da4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c64:	8979      	ldrh	r1, [r7, #10]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	6a3a      	ldr	r2, [r7, #32]
 8002c6a:	68f8      	ldr	r0, [r7, #12]
 8002c6c:	f000 fb08 	bl	8003280 <I2C_MasterRequestWrite>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e08d      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c90:	e066      	b.n	8002d60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c92:	697a      	ldr	r2, [r7, #20]
 8002c94:	6a39      	ldr	r1, [r7, #32]
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 fd5c 	bl	8003754 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00d      	beq.n	8002cbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b04      	cmp	r3, #4
 8002ca8:	d107      	bne.n	8002cba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e06b      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	781a      	ldrb	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cce:	1c5a      	adds	r2, r3, #1
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce6:	3b01      	subs	r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	695b      	ldr	r3, [r3, #20]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b04      	cmp	r3, #4
 8002cfa:	d11b      	bne.n	8002d34 <HAL_I2C_Master_Transmit+0x188>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d017      	beq.n	8002d34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d08:	781a      	ldrb	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	3b01      	subs	r3, #1
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	6a39      	ldr	r1, [r7, #32]
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 fd53 	bl	80037e4 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00d      	beq.n	8002d60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d107      	bne.n	8002d5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e01a      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d194      	bne.n	8002c92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	e000      	b.n	8002d96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d94:	2302      	movs	r3, #2
  }
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	00100002 	.word	0x00100002
 8002da4:	ffff0000 	.word	0xffff0000

08002da8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b08c      	sub	sp, #48	@ 0x30
 8002dac:	af02      	add	r7, sp, #8
 8002dae:	60f8      	str	r0, [r7, #12]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	461a      	mov	r2, r3
 8002db4:	460b      	mov	r3, r1
 8002db6:	817b      	strh	r3, [r7, #10]
 8002db8:	4613      	mov	r3, r2
 8002dba:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002dc0:	f7ff fac0 	bl	8002344 <HAL_GetTick>
 8002dc4:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b20      	cmp	r3, #32
 8002dd0:	f040 824b 	bne.w	800326a <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dd6:	9300      	str	r3, [sp, #0]
 8002dd8:	2319      	movs	r3, #25
 8002dda:	2201      	movs	r2, #1
 8002ddc:	497f      	ldr	r1, [pc, #508]	@ (8002fdc <HAL_I2C_Master_Receive+0x234>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fb9e 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002dea:	2302      	movs	r3, #2
 8002dec:	e23e      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d101      	bne.n	8002dfc <HAL_I2C_Master_Receive+0x54>
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e237      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b01      	cmp	r3, #1
 8002e10:	d007      	beq.n	8002e22 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f042 0201 	orr.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2222      	movs	r2, #34	@ 0x22
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2210      	movs	r2, #16
 8002e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	893a      	ldrh	r2, [r7, #8]
 8002e52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	4a5f      	ldr	r2, [pc, #380]	@ (8002fe0 <HAL_I2C_Master_Receive+0x238>)
 8002e62:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e64:	8979      	ldrh	r1, [r7, #10]
 8002e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e68:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e6a:	68f8      	ldr	r0, [r7, #12]
 8002e6c:	f000 fa8a 	bl	8003384 <I2C_MasterRequestRead>
 8002e70:	4603      	mov	r3, r0
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d001      	beq.n	8002e7a <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e1f8      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d113      	bne.n	8002eaa <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	695b      	ldr	r3, [r3, #20]
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	699b      	ldr	r3, [r3, #24]
 8002e94:	61fb      	str	r3, [r7, #28]
 8002e96:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	e1cc      	b.n	8003244 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d11e      	bne.n	8002ef0 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ec0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ec2:	b672      	cpsid	i
}
 8002ec4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61bb      	str	r3, [r7, #24]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	61bb      	str	r3, [r7, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eea:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002eec:	b662      	cpsie	i
}
 8002eee:	e035      	b.n	8002f5c <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d11e      	bne.n	8002f36 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f06:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f08:	b672      	cpsid	i
}
 8002f0a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	617b      	str	r3, [r7, #20]
 8002f20:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f30:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f32:	b662      	cpsie	i
}
 8002f34:	e012      	b.n	8002f5c <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002f5c:	e172      	b.n	8003244 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	f200 811f 	bhi.w	80031a6 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d123      	bne.n	8002fb8 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f72:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fc7d 	bl	8003874 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e173      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002fb6:	e145      	b.n	8003244 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d152      	bne.n	8003066 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	4906      	ldr	r1, [pc, #24]	@ (8002fe4 <HAL_I2C_Master_Receive+0x23c>)
 8002fca:	68f8      	ldr	r0, [r7, #12]
 8002fcc:	f000 faa8 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e148      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
 8002fda:	bf00      	nop
 8002fdc:	00100002 	.word	0x00100002
 8002fe0:	ffff0000 	.word	0xffff0000
 8002fe4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe8:	b672      	cpsid	i
}
 8002fea:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300e:	1c5a      	adds	r2, r3, #1
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003024:	b29b      	uxth	r3, r3
 8003026:	3b01      	subs	r3, #1
 8003028:	b29a      	uxth	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800302e:	b662      	cpsie	i
}
 8003030:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303c:	b2d2      	uxtb	r2, r2
 800303e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800304e:	3b01      	subs	r3, #1
 8003050:	b29a      	uxth	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29a      	uxth	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003064:	e0ee      	b.n	8003244 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800306c:	2200      	movs	r2, #0
 800306e:	4981      	ldr	r1, [pc, #516]	@ (8003274 <HAL_I2C_Master_Receive+0x4cc>)
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 fa55 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e0f5      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800308e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003090:	b672      	cpsid	i
}
 8003092:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	691a      	ldr	r2, [r3, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800309e:	b2d2      	uxtb	r2, r2
 80030a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030a6:	1c5a      	adds	r2, r3, #1
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030b0:	3b01      	subs	r3, #1
 80030b2:	b29a      	uxth	r2, r3
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030bc:	b29b      	uxth	r3, r3
 80030be:	3b01      	subs	r3, #1
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80030c6:	4b6c      	ldr	r3, [pc, #432]	@ (8003278 <HAL_I2C_Master_Receive+0x4d0>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	4a6b      	ldr	r2, [pc, #428]	@ (800327c <HAL_I2C_Master_Receive+0x4d4>)
 80030ce:	fba2 2303 	umull	r2, r3, r2, r3
 80030d2:	0a1a      	lsrs	r2, r3, #8
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	3b01      	subs	r3, #1
 80030e4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d118      	bne.n	800311e <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2220      	movs	r2, #32
 80030f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f043 0220 	orr.w	r2, r3, #32
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800310e:	b662      	cpsie	i
}
 8003110:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0a6      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b04      	cmp	r3, #4
 800312a:	d1d9      	bne.n	80030e0 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800313a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	691a      	ldr	r2, [r3, #16]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003146:	b2d2      	uxtb	r2, r2
 8003148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003158:	3b01      	subs	r3, #1
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003164:	b29b      	uxth	r3, r3
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800316e:	b662      	cpsie	i
}
 8003170:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	691a      	ldr	r2, [r3, #16]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800317c:	b2d2      	uxtb	r2, r2
 800317e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800318e:	3b01      	subs	r3, #1
 8003190:	b29a      	uxth	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800319a:	b29b      	uxth	r3, r3
 800319c:	3b01      	subs	r3, #1
 800319e:	b29a      	uxth	r2, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80031a4:	e04e      	b.n	8003244 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031aa:	68f8      	ldr	r0, [r7, #12]
 80031ac:	f000 fb62 	bl	8003874 <I2C_WaitOnRXNEFlagUntilTimeout>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e058      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	691a      	ldr	r2, [r3, #16]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c4:	b2d2      	uxtb	r2, r2
 80031c6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29a      	uxth	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d124      	bne.n	8003244 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031fe:	2b03      	cmp	r3, #3
 8003200:	d107      	bne.n	8003212 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003210:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	691a      	ldr	r2, [r3, #16]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	b2d2      	uxtb	r2, r2
 800321e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003224:	1c5a      	adds	r2, r3, #1
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322e:	3b01      	subs	r3, #1
 8003230:	b29a      	uxth	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f ae88 	bne.w	8002f5e <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2220      	movs	r2, #32
 8003252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003266:	2300      	movs	r3, #0
 8003268:	e000      	b.n	800326c <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 800326a:	2302      	movs	r3, #2
  }
}
 800326c:	4618      	mov	r0, r3
 800326e:	3728      	adds	r7, #40	@ 0x28
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	00010004 	.word	0x00010004
 8003278:	2000000c 	.word	0x2000000c
 800327c:	14f8b589 	.word	0x14f8b589

08003280 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b088      	sub	sp, #32
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	607a      	str	r2, [r7, #4]
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	460b      	mov	r3, r1
 800328e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	2b08      	cmp	r3, #8
 800329a:	d006      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d003      	beq.n	80032aa <I2C_MasterRequestWrite+0x2a>
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032a8:	d108      	bne.n	80032bc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e00b      	b.n	80032d4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032c0:	2b12      	cmp	r3, #18
 80032c2:	d107      	bne.n	80032d4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032d2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f91d 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00d      	beq.n	8003308 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032fa:	d103      	bne.n	8003304 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003302:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e035      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003310:	d108      	bne.n	8003324 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003312:	897b      	ldrh	r3, [r7, #10]
 8003314:	b2db      	uxtb	r3, r3
 8003316:	461a      	mov	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003320:	611a      	str	r2, [r3, #16]
 8003322:	e01b      	b.n	800335c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003324:	897b      	ldrh	r3, [r7, #10]
 8003326:	11db      	asrs	r3, r3, #7
 8003328:	b2db      	uxtb	r3, r3
 800332a:	f003 0306 	and.w	r3, r3, #6
 800332e:	b2db      	uxtb	r3, r3
 8003330:	f063 030f 	orn	r3, r3, #15
 8003334:	b2da      	uxtb	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	490e      	ldr	r1, [pc, #56]	@ (800337c <I2C_MasterRequestWrite+0xfc>)
 8003342:	68f8      	ldr	r0, [r7, #12]
 8003344:	f000 f966 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e010      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003352:	897b      	ldrh	r3, [r7, #10]
 8003354:	b2da      	uxtb	r2, r3
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	687a      	ldr	r2, [r7, #4]
 8003360:	4907      	ldr	r1, [pc, #28]	@ (8003380 <I2C_MasterRequestWrite+0x100>)
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 f956 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	d001      	beq.n	8003372 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3718      	adds	r7, #24
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	00010008 	.word	0x00010008
 8003380:	00010002 	.word	0x00010002

08003384 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b088      	sub	sp, #32
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	460b      	mov	r3, r1
 8003392:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003398:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80033a8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d006      	beq.n	80033be <I2C_MasterRequestRead+0x3a>
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d003      	beq.n	80033be <I2C_MasterRequestRead+0x3a>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80033bc:	d108      	bne.n	80033d0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033cc:	601a      	str	r2, [r3, #0]
 80033ce:	e00b      	b.n	80033e8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d4:	2b11      	cmp	r3, #17
 80033d6:	d107      	bne.n	80033e8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033e6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	9300      	str	r3, [sp, #0]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f893 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800340e:	d103      	bne.n	8003418 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003416:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e079      	b.n	8003510 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003424:	d108      	bne.n	8003438 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003426:	897b      	ldrh	r3, [r7, #10]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f043 0301 	orr.w	r3, r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	611a      	str	r2, [r3, #16]
 8003436:	e05f      	b.n	80034f8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003438:	897b      	ldrh	r3, [r7, #10]
 800343a:	11db      	asrs	r3, r3, #7
 800343c:	b2db      	uxtb	r3, r3
 800343e:	f003 0306 	and.w	r3, r3, #6
 8003442:	b2db      	uxtb	r3, r3
 8003444:	f063 030f 	orn	r3, r3, #15
 8003448:	b2da      	uxtb	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	4930      	ldr	r1, [pc, #192]	@ (8003518 <I2C_MasterRequestRead+0x194>)
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8dc 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e054      	b.n	8003510 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003466:	897b      	ldrh	r3, [r7, #10]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	4929      	ldr	r1, [pc, #164]	@ (800351c <I2C_MasterRequestRead+0x198>)
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f000 f8cc 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e044      	b.n	8003510 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	695b      	ldr	r3, [r3, #20]
 8003490:	613b      	str	r3, [r7, #16]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80034aa:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 f831 	bl	8003520 <I2C_WaitOnFlagUntilTimeout>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034d2:	d103      	bne.n	80034dc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80034da:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e017      	b.n	8003510 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80034e0:	897b      	ldrh	r3, [r7, #10]
 80034e2:	11db      	asrs	r3, r3, #7
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	f003 0306 	and.w	r3, r3, #6
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	f063 030e 	orn	r3, r3, #14
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	4907      	ldr	r1, [pc, #28]	@ (800351c <I2C_MasterRequestRead+0x198>)
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f888 	bl	8003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e000      	b.n	8003510 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	00010008 	.word	0x00010008
 800351c:	00010002 	.word	0x00010002

08003520 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	603b      	str	r3, [r7, #0]
 800352c:	4613      	mov	r3, r2
 800352e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003530:	e048      	b.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d044      	beq.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800353a:	f7fe ff03 	bl	8002344 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <I2C_WaitOnFlagUntilTimeout+0x30>
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d139      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0c1b      	lsrs	r3, r3, #16
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d10d      	bne.n	8003576 <I2C_WaitOnFlagUntilTimeout+0x56>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	43da      	mvns	r2, r3
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	4013      	ands	r3, r2
 8003566:	b29b      	uxth	r3, r3
 8003568:	2b00      	cmp	r3, #0
 800356a:	bf0c      	ite	eq
 800356c:	2301      	moveq	r3, #1
 800356e:	2300      	movne	r3, #0
 8003570:	b2db      	uxtb	r3, r3
 8003572:	461a      	mov	r2, r3
 8003574:	e00c      	b.n	8003590 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699b      	ldr	r3, [r3, #24]
 800357c:	43da      	mvns	r2, r3
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	4013      	ands	r3, r2
 8003582:	b29b      	uxth	r3, r3
 8003584:	2b00      	cmp	r3, #0
 8003586:	bf0c      	ite	eq
 8003588:	2301      	moveq	r3, #1
 800358a:	2300      	movne	r3, #0
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	79fb      	ldrb	r3, [r7, #7]
 8003592:	429a      	cmp	r2, r3
 8003594:	d116      	bne.n	80035c4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2220      	movs	r2, #32
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b0:	f043 0220 	orr.w	r2, r3, #32
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e023      	b.n	800360c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	0c1b      	lsrs	r3, r3, #16
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d10d      	bne.n	80035ea <I2C_WaitOnFlagUntilTimeout+0xca>
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	43da      	mvns	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4013      	ands	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	2b00      	cmp	r3, #0
 80035de:	bf0c      	ite	eq
 80035e0:	2301      	moveq	r3, #1
 80035e2:	2300      	movne	r3, #0
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	461a      	mov	r2, r3
 80035e8:	e00c      	b.n	8003604 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	43da      	mvns	r2, r3
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	4013      	ands	r3, r2
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	bf0c      	ite	eq
 80035fc:	2301      	moveq	r3, #1
 80035fe:	2300      	movne	r3, #0
 8003600:	b2db      	uxtb	r3, r3
 8003602:	461a      	mov	r2, r3
 8003604:	79fb      	ldrb	r3, [r7, #7]
 8003606:	429a      	cmp	r2, r3
 8003608:	d093      	beq.n	8003532 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
 8003620:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003622:	e071      	b.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800362e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003632:	d123      	bne.n	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003642:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800364c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2200      	movs	r2, #0
 8003652:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003668:	f043 0204 	orr.w	r2, r3, #4
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e067      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003682:	d041      	beq.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003684:	f7fe fe5e 	bl	8002344 <HAL_GetTick>
 8003688:	4602      	mov	r2, r0
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	1ad3      	subs	r3, r2, r3
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	429a      	cmp	r2, r3
 8003692:	d302      	bcc.n	800369a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d136      	bne.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	0c1b      	lsrs	r3, r3, #16
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d10c      	bne.n	80036be <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	43da      	mvns	r2, r3
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	4013      	ands	r3, r2
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	bf14      	ite	ne
 80036b6:	2301      	movne	r3, #1
 80036b8:	2300      	moveq	r3, #0
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	e00b      	b.n	80036d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	43da      	mvns	r2, r3
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	4013      	ands	r3, r2
 80036ca:	b29b      	uxth	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	bf14      	ite	ne
 80036d0:	2301      	movne	r3, #1
 80036d2:	2300      	moveq	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d016      	beq.n	8003708 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2220      	movs	r2, #32
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2200      	movs	r2, #0
 80036ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f4:	f043 0220 	orr.w	r2, r3, #32
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e021      	b.n	800374c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	0c1b      	lsrs	r3, r3, #16
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b01      	cmp	r3, #1
 8003710:	d10c      	bne.n	800372c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	695b      	ldr	r3, [r3, #20]
 8003718:	43da      	mvns	r2, r3
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	4013      	ands	r3, r2
 800371e:	b29b      	uxth	r3, r3
 8003720:	2b00      	cmp	r3, #0
 8003722:	bf14      	ite	ne
 8003724:	2301      	movne	r3, #1
 8003726:	2300      	moveq	r3, #0
 8003728:	b2db      	uxtb	r3, r3
 800372a:	e00b      	b.n	8003744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699b      	ldr	r3, [r3, #24]
 8003732:	43da      	mvns	r2, r3
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	4013      	ands	r3, r2
 8003738:	b29b      	uxth	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	bf14      	ite	ne
 800373e:	2301      	movne	r3, #1
 8003740:	2300      	moveq	r3, #0
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b00      	cmp	r3, #0
 8003746:	f47f af6d 	bne.w	8003624 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003760:	e034      	b.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f8e3 	bl	800392e <I2C_IsAcknowledgeFailed>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e034      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003778:	d028      	beq.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800377a:	f7fe fde3 	bl	8002344 <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	68ba      	ldr	r2, [r7, #8]
 8003786:	429a      	cmp	r2, r3
 8003788:	d302      	bcc.n	8003790 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d11d      	bne.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800379a:	2b80      	cmp	r3, #128	@ 0x80
 800379c:	d016      	beq.n	80037cc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2220      	movs	r2, #32
 80037a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b8:	f043 0220 	orr.w	r2, r3, #32
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e007      	b.n	80037dc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037d6:	2b80      	cmp	r3, #128	@ 0x80
 80037d8:	d1c3      	bne.n	8003762 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b084      	sub	sp, #16
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f0:	e034      	b.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f2:	68f8      	ldr	r0, [r7, #12]
 80037f4:	f000 f89b 	bl	800392e <I2C_IsAcknowledgeFailed>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e034      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003808:	d028      	beq.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380a:	f7fe fd9b 	bl	8002344 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	68ba      	ldr	r2, [r7, #8]
 8003816:	429a      	cmp	r2, r3
 8003818:	d302      	bcc.n	8003820 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d11d      	bne.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b04      	cmp	r3, #4
 800382c:	d016      	beq.n	800385c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003848:	f043 0220 	orr.w	r2, r3, #32
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e007      	b.n	800386c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	f003 0304 	and.w	r3, r3, #4
 8003866:	2b04      	cmp	r3, #4
 8003868:	d1c3      	bne.n	80037f2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800386a:	2300      	movs	r3, #0
}
 800386c:	4618      	mov	r0, r3
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003880:	e049      	b.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	f003 0310 	and.w	r3, r3, #16
 800388c:	2b10      	cmp	r3, #16
 800388e:	d119      	bne.n	80038c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0210 	mvn.w	r2, #16
 8003898:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2220      	movs	r2, #32
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e030      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c4:	f7fe fd3e 	bl	8002344 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d302      	bcc.n	80038da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d11d      	bne.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	695b      	ldr	r3, [r3, #20]
 80038e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d016      	beq.n	8003916 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2220      	movs	r2, #32
 80038f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	f043 0220 	orr.w	r2, r3, #32
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	e007      	b.n	8003926 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003920:	2b40      	cmp	r3, #64	@ 0x40
 8003922:	d1ae      	bne.n	8003882 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003924:	2300      	movs	r3, #0
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}

0800392e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800392e:	b480      	push	{r7}
 8003930:	b083      	sub	sp, #12
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003940:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003944:	d11b      	bne.n	800397e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800394e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
	...

0800398c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e272      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	f000 8087 	beq.w	8003aba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80039ac:	4b92      	ldr	r3, [pc, #584]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 030c 	and.w	r3, r3, #12
 80039b4:	2b04      	cmp	r3, #4
 80039b6:	d00c      	beq.n	80039d2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80039b8:	4b8f      	ldr	r3, [pc, #572]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b08      	cmp	r3, #8
 80039c2:	d112      	bne.n	80039ea <HAL_RCC_OscConfig+0x5e>
 80039c4:	4b8c      	ldr	r3, [pc, #560]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039d0:	d10b      	bne.n	80039ea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d2:	4b89      	ldr	r3, [pc, #548]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d06c      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x12c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d168      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e24c      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80039f2:	d106      	bne.n	8003a02 <HAL_RCC_OscConfig+0x76>
 80039f4:	4b80      	ldr	r3, [pc, #512]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a7f      	ldr	r2, [pc, #508]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 80039fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	e02e      	b.n	8003a60 <HAL_RCC_OscConfig+0xd4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10c      	bne.n	8003a24 <HAL_RCC_OscConfig+0x98>
 8003a0a:	4b7b      	ldr	r3, [pc, #492]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a7a      	ldr	r2, [pc, #488]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a14:	6013      	str	r3, [r2, #0]
 8003a16:	4b78      	ldr	r3, [pc, #480]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a77      	ldr	r2, [pc, #476]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a20:	6013      	str	r3, [r2, #0]
 8003a22:	e01d      	b.n	8003a60 <HAL_RCC_OscConfig+0xd4>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a2c:	d10c      	bne.n	8003a48 <HAL_RCC_OscConfig+0xbc>
 8003a2e:	4b72      	ldr	r3, [pc, #456]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a71      	ldr	r2, [pc, #452]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	4b6f      	ldr	r3, [pc, #444]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a6e      	ldr	r2, [pc, #440]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e00b      	b.n	8003a60 <HAL_RCC_OscConfig+0xd4>
 8003a48:	4b6b      	ldr	r3, [pc, #428]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6a      	ldr	r2, [pc, #424]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a52:	6013      	str	r3, [r2, #0]
 8003a54:	4b68      	ldr	r3, [pc, #416]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a67      	ldr	r2, [pc, #412]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d013      	beq.n	8003a90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a68:	f7fe fc6c 	bl	8002344 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fe fc68 	bl	8002344 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	@ 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e200      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a82:	4b5d      	ldr	r3, [pc, #372]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d0f0      	beq.n	8003a70 <HAL_RCC_OscConfig+0xe4>
 8003a8e:	e014      	b.n	8003aba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a90:	f7fe fc58 	bl	8002344 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a98:	f7fe fc54 	bl	8002344 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	@ 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e1ec      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aaa:	4b53      	ldr	r3, [pc, #332]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x10c>
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d063      	beq.n	8003b8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ac6:	4b4c      	ldr	r3, [pc, #304]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d00b      	beq.n	8003aea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003ad2:	4b49      	ldr	r3, [pc, #292]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	2b08      	cmp	r3, #8
 8003adc:	d11c      	bne.n	8003b18 <HAL_RCC_OscConfig+0x18c>
 8003ade:	4b46      	ldr	r3, [pc, #280]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d116      	bne.n	8003b18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aea:	4b43      	ldr	r3, [pc, #268]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d005      	beq.n	8003b02 <HAL_RCC_OscConfig+0x176>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d001      	beq.n	8003b02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e1c0      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b02:	4b3d      	ldr	r3, [pc, #244]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	4939      	ldr	r1, [pc, #228]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b16:	e03a      	b.n	8003b8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d020      	beq.n	8003b62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b20:	4b36      	ldr	r3, [pc, #216]	@ (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b26:	f7fe fc0d 	bl	8002344 <HAL_GetTick>
 8003b2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b2e:	f7fe fc09 	bl	8002344 <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e1a1      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b40:	4b2d      	ldr	r3, [pc, #180]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0f0      	beq.n	8003b2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	695b      	ldr	r3, [r3, #20]
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4927      	ldr	r1, [pc, #156]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	e015      	b.n	8003b8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b62:	4b26      	ldr	r3, [pc, #152]	@ (8003bfc <HAL_RCC_OscConfig+0x270>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b68:	f7fe fbec 	bl	8002344 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b70:	f7fe fbe8 	bl	8002344 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e180      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b82:	4b1d      	ldr	r3, [pc, #116]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d1f0      	bne.n	8003b70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d03a      	beq.n	8003c10 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d019      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ba2:	4b17      	ldr	r3, [pc, #92]	@ (8003c00 <HAL_RCC_OscConfig+0x274>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ba8:	f7fe fbcc 	bl	8002344 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bb0:	f7fe fbc8 	bl	8002344 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e160      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf8 <HAL_RCC_OscConfig+0x26c>)
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003bce:	2001      	movs	r0, #1
 8003bd0:	f000 face 	bl	8004170 <RCC_Delay>
 8003bd4:	e01c      	b.n	8003c10 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003c00 <HAL_RCC_OscConfig+0x274>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bdc:	f7fe fbb2 	bl	8002344 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003be2:	e00f      	b.n	8003c04 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be4:	f7fe fbae 	bl	8002344 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d908      	bls.n	8003c04 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e146      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
 8003bf6:	bf00      	nop
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	42420000 	.word	0x42420000
 8003c00:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c04:	4b92      	ldr	r3, [pc, #584]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e9      	bne.n	8003be4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80a6 	beq.w	8003d6a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c22:	4b8b      	ldr	r3, [pc, #556]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d10d      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c2e:	4b88      	ldr	r3, [pc, #544]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	4a87      	ldr	r2, [pc, #540]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c38:	61d3      	str	r3, [r2, #28]
 8003c3a:	4b85      	ldr	r3, [pc, #532]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c42:	60bb      	str	r3, [r7, #8]
 8003c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c46:	2301      	movs	r3, #1
 8003c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c4a:	4b82      	ldr	r3, [pc, #520]	@ (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d118      	bne.n	8003c88 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c56:	4b7f      	ldr	r3, [pc, #508]	@ (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c62:	f7fe fb6f 	bl	8002344 <HAL_GetTick>
 8003c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c68:	e008      	b.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6a:	f7fe fb6b 	bl	8002344 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b64      	cmp	r3, #100	@ 0x64
 8003c76:	d901      	bls.n	8003c7c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e103      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	4b75      	ldr	r3, [pc, #468]	@ (8003e54 <HAL_RCC_OscConfig+0x4c8>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d0f0      	beq.n	8003c6a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d106      	bne.n	8003c9e <HAL_RCC_OscConfig+0x312>
 8003c90:	4b6f      	ldr	r3, [pc, #444]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	4a6e      	ldr	r2, [pc, #440]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6213      	str	r3, [r2, #32]
 8003c9c:	e02d      	b.n	8003cfa <HAL_RCC_OscConfig+0x36e>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d10c      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x334>
 8003ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	4a69      	ldr	r2, [pc, #420]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6213      	str	r3, [r2, #32]
 8003cb2:	4b67      	ldr	r3, [pc, #412]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	4a66      	ldr	r2, [pc, #408]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cb8:	f023 0304 	bic.w	r3, r3, #4
 8003cbc:	6213      	str	r3, [r2, #32]
 8003cbe:	e01c      	b.n	8003cfa <HAL_RCC_OscConfig+0x36e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	2b05      	cmp	r3, #5
 8003cc6:	d10c      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x356>
 8003cc8:	4b61      	ldr	r3, [pc, #388]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cca:	6a1b      	ldr	r3, [r3, #32]
 8003ccc:	4a60      	ldr	r2, [pc, #384]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cce:	f043 0304 	orr.w	r3, r3, #4
 8003cd2:	6213      	str	r3, [r2, #32]
 8003cd4:	4b5e      	ldr	r3, [pc, #376]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	4a5d      	ldr	r2, [pc, #372]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6213      	str	r3, [r2, #32]
 8003ce0:	e00b      	b.n	8003cfa <HAL_RCC_OscConfig+0x36e>
 8003ce2:	4b5b      	ldr	r3, [pc, #364]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003ce4:	6a1b      	ldr	r3, [r3, #32]
 8003ce6:	4a5a      	ldr	r2, [pc, #360]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003ce8:	f023 0301 	bic.w	r3, r3, #1
 8003cec:	6213      	str	r3, [r2, #32]
 8003cee:	4b58      	ldr	r3, [pc, #352]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	4a57      	ldr	r2, [pc, #348]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003cf4:	f023 0304 	bic.w	r3, r3, #4
 8003cf8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d015      	beq.n	8003d2e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d02:	f7fe fb1f 	bl	8002344 <HAL_GetTick>
 8003d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d08:	e00a      	b.n	8003d20 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d0a:	f7fe fb1b 	bl	8002344 <HAL_GetTick>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0b1      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d20:	4b4b      	ldr	r3, [pc, #300]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ee      	beq.n	8003d0a <HAL_RCC_OscConfig+0x37e>
 8003d2c:	e014      	b.n	8003d58 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2e:	f7fe fb09 	bl	8002344 <HAL_GetTick>
 8003d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d34:	e00a      	b.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d36:	f7fe fb05 	bl	8002344 <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d901      	bls.n	8003d4c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003d48:	2303      	movs	r3, #3
 8003d4a:	e09b      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4c:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	f003 0302 	and.w	r3, r3, #2
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1ee      	bne.n	8003d36 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003d58:	7dfb      	ldrb	r3, [r7, #23]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d60:	69db      	ldr	r3, [r3, #28]
 8003d62:	4a3b      	ldr	r2, [pc, #236]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d68:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	f000 8087 	beq.w	8003e82 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d74:	4b36      	ldr	r3, [pc, #216]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f003 030c 	and.w	r3, r3, #12
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d061      	beq.n	8003e44 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d146      	bne.n	8003e16 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d88:	4b33      	ldr	r3, [pc, #204]	@ (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8e:	f7fe fad9 	bl	8002344 <HAL_GetTick>
 8003d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d96:	f7fe fad5 	bl	8002344 <HAL_GetTick>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e06d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003da8:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f0      	bne.n	8003d96 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003dbc:	d108      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003dbe:	4b24      	ldr	r3, [pc, #144]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	4921      	ldr	r1, [pc, #132]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a19      	ldr	r1, [r3, #32]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de0:	430b      	orrs	r3, r1
 8003de2:	491b      	ldr	r1, [pc, #108]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1b      	ldr	r3, [pc, #108]	@ (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fe faa9 	bl	8002344 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fe faa5 	bl	8002344 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e03d      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e08:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x46a>
 8003e14:	e035      	b.n	8003e82 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b10      	ldr	r3, [pc, #64]	@ (8003e58 <HAL_RCC_OscConfig+0x4cc>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fe fa92 	bl	8002344 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fe fa8e 	bl	8002344 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e026      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_RCC_OscConfig+0x4c4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x498>
 8003e42:	e01e      	b.n	8003e82 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	69db      	ldr	r3, [r3, #28]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e019      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e5c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e8c <HAL_RCC_OscConfig+0x500>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d001      	beq.n	8003e82 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	40021000 	.word	0x40021000

08003e90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]
 8003e98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d101      	bne.n	8003ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	e0d0      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea4:	4b6a      	ldr	r3, [pc, #424]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d910      	bls.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eb2:	4b67      	ldr	r3, [pc, #412]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f023 0207 	bic.w	r2, r3, #7
 8003eba:	4965      	ldr	r1, [pc, #404]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ec2:	4b63      	ldr	r3, [pc, #396]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	683a      	ldr	r2, [r7, #0]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d001      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e0b8      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d020      	beq.n	8003f22 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 0304 	and.w	r3, r3, #4
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d005      	beq.n	8003ef8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003eec:	4b59      	ldr	r3, [pc, #356]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	4a58      	ldr	r2, [pc, #352]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003ef6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 0308 	and.w	r3, r3, #8
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f04:	4b53      	ldr	r3, [pc, #332]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	4a52      	ldr	r2, [pc, #328]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f0a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003f0e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f10:	4b50      	ldr	r3, [pc, #320]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	494d      	ldr	r1, [pc, #308]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0301 	and.w	r3, r3, #1
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d040      	beq.n	8003fb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d107      	bne.n	8003f46 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f36:	4b47      	ldr	r3, [pc, #284]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d115      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07f      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d107      	bne.n	8003f5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4e:	4b41      	ldr	r3, [pc, #260]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d109      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e073      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5e:	4b3d      	ldr	r3, [pc, #244]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06b      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6e:	4b39      	ldr	r3, [pc, #228]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f023 0203 	bic.w	r2, r3, #3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	4936      	ldr	r1, [pc, #216]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f80:	f7fe f9e0 	bl	8002344 <HAL_GetTick>
 8003f84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f86:	e00a      	b.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f88:	f7fe f9dc 	bl	8002344 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e053      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9e:	4b2d      	ldr	r3, [pc, #180]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	f003 020c 	and.w	r2, r3, #12
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d1eb      	bne.n	8003f88 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003fb0:	4b27      	ldr	r3, [pc, #156]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0307 	and.w	r3, r3, #7
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d210      	bcs.n	8003fe0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f023 0207 	bic.w	r2, r3, #7
 8003fc6:	4922      	ldr	r1, [pc, #136]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fce:	4b20      	ldr	r3, [pc, #128]	@ (8004050 <HAL_RCC_ClockConfig+0x1c0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	683a      	ldr	r2, [r7, #0]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d001      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e032      	b.n	8004046 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f003 0304 	and.w	r3, r3, #4
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	4916      	ldr	r1, [pc, #88]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0308 	and.w	r3, r3, #8
 8004006:	2b00      	cmp	r3, #0
 8004008:	d009      	beq.n	800401e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800400a:	4b12      	ldr	r3, [pc, #72]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	490e      	ldr	r1, [pc, #56]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 800401a:	4313      	orrs	r3, r2
 800401c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800401e:	f000 f821 	bl	8004064 <HAL_RCC_GetSysClockFreq>
 8004022:	4602      	mov	r2, r0
 8004024:	4b0b      	ldr	r3, [pc, #44]	@ (8004054 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 030f 	and.w	r3, r3, #15
 800402e:	490a      	ldr	r1, [pc, #40]	@ (8004058 <HAL_RCC_ClockConfig+0x1c8>)
 8004030:	5ccb      	ldrb	r3, [r1, r3]
 8004032:	fa22 f303 	lsr.w	r3, r2, r3
 8004036:	4a09      	ldr	r2, [pc, #36]	@ (800405c <HAL_RCC_ClockConfig+0x1cc>)
 8004038:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800403a:	4b09      	ldr	r3, [pc, #36]	@ (8004060 <HAL_RCC_ClockConfig+0x1d0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fe f93e 	bl	80022c0 <HAL_InitTick>

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	40022000 	.word	0x40022000
 8004054:	40021000 	.word	0x40021000
 8004058:	08004e90 	.word	0x08004e90
 800405c:	2000000c 	.word	0x2000000c
 8004060:	20000010 	.word	0x20000010

08004064 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	2300      	movs	r3, #0
 8004070:	60bb      	str	r3, [r7, #8]
 8004072:	2300      	movs	r3, #0
 8004074:	617b      	str	r3, [r7, #20]
 8004076:	2300      	movs	r3, #0
 8004078:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800407e:	4b1e      	ldr	r3, [pc, #120]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x94>)
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b04      	cmp	r3, #4
 800408c:	d002      	beq.n	8004094 <HAL_RCC_GetSysClockFreq+0x30>
 800408e:	2b08      	cmp	r3, #8
 8004090:	d003      	beq.n	800409a <HAL_RCC_GetSysClockFreq+0x36>
 8004092:	e027      	b.n	80040e4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004094:	4b19      	ldr	r3, [pc, #100]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x98>)
 8004096:	613b      	str	r3, [r7, #16]
      break;
 8004098:	e027      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	0c9b      	lsrs	r3, r3, #18
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	4a17      	ldr	r2, [pc, #92]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x9c>)
 80040a4:	5cd3      	ldrb	r3, [r2, r3]
 80040a6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d010      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80040b2:	4b11      	ldr	r3, [pc, #68]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x94>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	0c5b      	lsrs	r3, r3, #17
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	4a11      	ldr	r2, [pc, #68]	@ (8004104 <HAL_RCC_GetSysClockFreq+0xa0>)
 80040be:	5cd3      	ldrb	r3, [r2, r3]
 80040c0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a0d      	ldr	r2, [pc, #52]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x98>)
 80040c6:	fb03 f202 	mul.w	r2, r3, r2
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
 80040d2:	e004      	b.n	80040de <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a0c      	ldr	r2, [pc, #48]	@ (8004108 <HAL_RCC_GetSysClockFreq+0xa4>)
 80040d8:	fb02 f303 	mul.w	r3, r2, r3
 80040dc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	613b      	str	r3, [r7, #16]
      break;
 80040e2:	e002      	b.n	80040ea <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80040e4:	4b05      	ldr	r3, [pc, #20]	@ (80040fc <HAL_RCC_GetSysClockFreq+0x98>)
 80040e6:	613b      	str	r3, [r7, #16]
      break;
 80040e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ea:	693b      	ldr	r3, [r7, #16]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	40021000 	.word	0x40021000
 80040fc:	007a1200 	.word	0x007a1200
 8004100:	08004ea8 	.word	0x08004ea8
 8004104:	08004eb8 	.word	0x08004eb8
 8004108:	003d0900 	.word	0x003d0900

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b02      	ldr	r3, [pc, #8]	@ (800411c <HAL_RCC_GetHCLKFreq+0x10>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	2000000c 	.word	0x2000000c

08004120 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004124:	f7ff fff2 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004128:	4602      	mov	r2, r0
 800412a:	4b05      	ldr	r3, [pc, #20]	@ (8004140 <HAL_RCC_GetPCLK1Freq+0x20>)
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	0a1b      	lsrs	r3, r3, #8
 8004130:	f003 0307 	and.w	r3, r3, #7
 8004134:	4903      	ldr	r1, [pc, #12]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004136:	5ccb      	ldrb	r3, [r1, r3]
 8004138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800413c:	4618      	mov	r0, r3
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40021000 	.word	0x40021000
 8004144:	08004ea0 	.word	0x08004ea0

08004148 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800414c:	f7ff ffde 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004150:	4602      	mov	r2, r0
 8004152:	4b05      	ldr	r3, [pc, #20]	@ (8004168 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	0adb      	lsrs	r3, r3, #11
 8004158:	f003 0307 	and.w	r3, r3, #7
 800415c:	4903      	ldr	r1, [pc, #12]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x24>)
 800415e:	5ccb      	ldrb	r3, [r1, r3]
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004164:	4618      	mov	r0, r3
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	08004ea0 	.word	0x08004ea0

08004170 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004178:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <RCC_Delay+0x34>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a0a      	ldr	r2, [pc, #40]	@ (80041a8 <RCC_Delay+0x38>)
 800417e:	fba2 2303 	umull	r2, r3, r2, r3
 8004182:	0a5b      	lsrs	r3, r3, #9
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	fb02 f303 	mul.w	r3, r2, r3
 800418a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800418c:	bf00      	nop
  }
  while (Delay --);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	1e5a      	subs	r2, r3, #1
 8004192:	60fa      	str	r2, [r7, #12]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1f9      	bne.n	800418c <RCC_Delay+0x1c>
}
 8004198:	bf00      	nop
 800419a:	bf00      	nop
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	2000000c 	.word	0x2000000c
 80041a8:	10624dd3 	.word	0x10624dd3

080041ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d101      	bne.n	80041be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e041      	b.n	8004242 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d106      	bne.n	80041d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f7fd ff1e 	bl	8002014 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	4619      	mov	r1, r3
 80041ea:	4610      	mov	r0, r2
 80041ec:	f000 fac2 	bl	8004774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2201      	movs	r2, #1
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <HAL_TIM_PWM_Start+0x24>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b01      	cmp	r3, #1
 8004266:	bf14      	ite	ne
 8004268:	2301      	movne	r3, #1
 800426a:	2300      	moveq	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	e022      	b.n	80042b6 <HAL_TIM_PWM_Start+0x6a>
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b04      	cmp	r3, #4
 8004274:	d109      	bne.n	800428a <HAL_TIM_PWM_Start+0x3e>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b01      	cmp	r3, #1
 8004280:	bf14      	ite	ne
 8004282:	2301      	movne	r3, #1
 8004284:	2300      	moveq	r3, #0
 8004286:	b2db      	uxtb	r3, r3
 8004288:	e015      	b.n	80042b6 <HAL_TIM_PWM_Start+0x6a>
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	2b08      	cmp	r3, #8
 800428e:	d109      	bne.n	80042a4 <HAL_TIM_PWM_Start+0x58>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b01      	cmp	r3, #1
 800429a:	bf14      	ite	ne
 800429c:	2301      	movne	r3, #1
 800429e:	2300      	moveq	r3, #0
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	e008      	b.n	80042b6 <HAL_TIM_PWM_Start+0x6a>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e05e      	b.n	800437c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0x82>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80042cc:	e013      	b.n	80042f6 <HAL_TIM_PWM_Start+0xaa>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b04      	cmp	r3, #4
 80042d2:	d104      	bne.n	80042de <HAL_TIM_PWM_Start+0x92>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80042dc:	e00b      	b.n	80042f6 <HAL_TIM_PWM_Start+0xaa>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d104      	bne.n	80042ee <HAL_TIM_PWM_Start+0xa2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80042ec:	e003      	b.n	80042f6 <HAL_TIM_PWM_Start+0xaa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2202      	movs	r2, #2
 80042f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2201      	movs	r2, #1
 80042fc:	6839      	ldr	r1, [r7, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 fc2e 	bl	8004b60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a1e      	ldr	r2, [pc, #120]	@ (8004384 <HAL_TIM_PWM_Start+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d107      	bne.n	800431e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800431c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a18      	ldr	r2, [pc, #96]	@ (8004384 <HAL_TIM_PWM_Start+0x138>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d00e      	beq.n	8004346 <HAL_TIM_PWM_Start+0xfa>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004330:	d009      	beq.n	8004346 <HAL_TIM_PWM_Start+0xfa>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a14      	ldr	r2, [pc, #80]	@ (8004388 <HAL_TIM_PWM_Start+0x13c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d004      	beq.n	8004346 <HAL_TIM_PWM_Start+0xfa>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a12      	ldr	r2, [pc, #72]	@ (800438c <HAL_TIM_PWM_Start+0x140>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d111      	bne.n	800436a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 0307 	and.w	r3, r3, #7
 8004350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2b06      	cmp	r3, #6
 8004356:	d010      	beq.n	800437a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 0201 	orr.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004368:	e007      	b.n	800437a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f042 0201 	orr.w	r2, r2, #1
 8004378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437a:	2300      	movs	r3, #0
}
 800437c:	4618      	mov	r0, r3
 800437e:	3710      	adds	r7, #16
 8004380:	46bd      	mov	sp, r7
 8004382:	bd80      	pop	{r7, pc}
 8004384:	40012c00 	.word	0x40012c00
 8004388:	40000400 	.word	0x40000400
 800438c:	40000800 	.word	0x40000800

08004390 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b086      	sub	sp, #24
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e093      	b.n	80044cc <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7fd fdc3 	bl	8001f44 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2202      	movs	r2, #2
 80043c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	6812      	ldr	r2, [r2, #0]
 80043d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3304      	adds	r3, #4
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f000 f9c5 	bl	8004774 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004412:	f023 0303 	bic.w	r3, r3, #3
 8004416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	689a      	ldr	r2, [r3, #8]
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	4313      	orrs	r3, r2
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004430:	f023 030c 	bic.w	r3, r3, #12
 8004434:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800443c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004440:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	4313      	orrs	r3, r2
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	4313      	orrs	r3, r2
 8004452:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	011a      	lsls	r2, r3, #4
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	031b      	lsls	r3, r3, #12
 8004460:	4313      	orrs	r3, r2
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800446e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	695b      	ldr	r3, [r3, #20]
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	4313      	orrs	r3, r2
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	4313      	orrs	r3, r2
 8004480:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2201      	movs	r2, #1
 80044a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2201      	movs	r2, #1
 80044ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2201      	movs	r2, #1
 80044b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2201      	movs	r2, #1
 80044be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2201      	movs	r2, #1
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80044e4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80044ec:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80044f4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80044fc:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d110      	bne.n	8004526 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004504:	7bfb      	ldrb	r3, [r7, #15]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d102      	bne.n	8004510 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800450a:	7b7b      	ldrb	r3, [r7, #13]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d001      	beq.n	8004514 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e069      	b.n	80045e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004524:	e031      	b.n	800458a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d110      	bne.n	800454e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800452c:	7bbb      	ldrb	r3, [r7, #14]
 800452e:	2b01      	cmp	r3, #1
 8004530:	d102      	bne.n	8004538 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004532:	7b3b      	ldrb	r3, [r7, #12]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d001      	beq.n	800453c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e055      	b.n	80045e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2202      	movs	r2, #2
 8004540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800454c:	e01d      	b.n	800458a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d108      	bne.n	8004566 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004554:	7bbb      	ldrb	r3, [r7, #14]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800455a:	7b7b      	ldrb	r3, [r7, #13]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d102      	bne.n	8004566 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004560:	7b3b      	ldrb	r3, [r7, #12]
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e03e      	b.n	80045e8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2202      	movs	r2, #2
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2202      	movs	r2, #2
 8004576:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2202      	movs	r2, #2
 800457e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d003      	beq.n	8004598 <HAL_TIM_Encoder_Start+0xc4>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b04      	cmp	r3, #4
 8004594:	d008      	beq.n	80045a8 <HAL_TIM_Encoder_Start+0xd4>
 8004596:	e00f      	b.n	80045b8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	2201      	movs	r2, #1
 800459e:	2100      	movs	r1, #0
 80045a0:	4618      	mov	r0, r3
 80045a2:	f000 fadd 	bl	8004b60 <TIM_CCxChannelCmd>
      break;
 80045a6:	e016      	b.n	80045d6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2201      	movs	r2, #1
 80045ae:	2104      	movs	r1, #4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f000 fad5 	bl	8004b60 <TIM_CCxChannelCmd>
      break;
 80045b6:	e00e      	b.n	80045d6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2201      	movs	r2, #1
 80045be:	2100      	movs	r1, #0
 80045c0:	4618      	mov	r0, r3
 80045c2:	f000 facd 	bl	8004b60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	2201      	movs	r2, #1
 80045cc:	2104      	movs	r1, #4
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fac6 	bl	8004b60 <TIM_CCxChannelCmd>
      break;
 80045d4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f042 0201 	orr.w	r2, r2, #1
 80045e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004606:	2b01      	cmp	r3, #1
 8004608:	d101      	bne.n	800460e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800460a:	2302      	movs	r3, #2
 800460c:	e0ae      	b.n	800476c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b0c      	cmp	r3, #12
 800461a:	f200 809f 	bhi.w	800475c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800461e:	a201      	add	r2, pc, #4	@ (adr r2, 8004624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004624:	08004659 	.word	0x08004659
 8004628:	0800475d 	.word	0x0800475d
 800462c:	0800475d 	.word	0x0800475d
 8004630:	0800475d 	.word	0x0800475d
 8004634:	08004699 	.word	0x08004699
 8004638:	0800475d 	.word	0x0800475d
 800463c:	0800475d 	.word	0x0800475d
 8004640:	0800475d 	.word	0x0800475d
 8004644:	080046db 	.word	0x080046db
 8004648:	0800475d 	.word	0x0800475d
 800464c:	0800475d 	.word	0x0800475d
 8004650:	0800475d 	.word	0x0800475d
 8004654:	0800471b 	.word	0x0800471b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	68b9      	ldr	r1, [r7, #8]
 800465e:	4618      	mov	r0, r3
 8004660:	f000 f8f6 	bl	8004850 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0208 	orr.w	r2, r2, #8
 8004672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699a      	ldr	r2, [r3, #24]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f022 0204 	bic.w	r2, r2, #4
 8004682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6999      	ldr	r1, [r3, #24]
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	430a      	orrs	r2, r1
 8004694:	619a      	str	r2, [r3, #24]
      break;
 8004696:	e064      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f93c 	bl	800491c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	699a      	ldr	r2, [r3, #24]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	699a      	ldr	r2, [r3, #24]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	6999      	ldr	r1, [r3, #24]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	021a      	lsls	r2, r3, #8
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	430a      	orrs	r2, r1
 80046d6:	619a      	str	r2, [r3, #24]
      break;
 80046d8:	e043      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68b9      	ldr	r1, [r7, #8]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f000 f985 	bl	80049f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	69da      	ldr	r2, [r3, #28]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0208 	orr.w	r2, r2, #8
 80046f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69da      	ldr	r2, [r3, #28]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f022 0204 	bic.w	r2, r2, #4
 8004704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	69d9      	ldr	r1, [r3, #28]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	61da      	str	r2, [r3, #28]
      break;
 8004718:	e023      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68b9      	ldr	r1, [r7, #8]
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f9cf 	bl	8004ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69da      	ldr	r2, [r3, #28]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69da      	ldr	r2, [r3, #28]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	69d9      	ldr	r1, [r3, #28]
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	021a      	lsls	r2, r3, #8
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	61da      	str	r2, [r3, #28]
      break;
 800475a:	e002      	b.n	8004762 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	75fb      	strb	r3, [r7, #23]
      break;
 8004760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800476a:	7dfb      	ldrb	r3, [r7, #23]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3718      	adds	r7, #24
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004774:	b480      	push	{r7}
 8004776:	b085      	sub	sp, #20
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	4a2f      	ldr	r2, [pc, #188]	@ (8004844 <TIM_Base_SetConfig+0xd0>)
 8004788:	4293      	cmp	r3, r2
 800478a:	d00b      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004792:	d007      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	4a2c      	ldr	r2, [pc, #176]	@ (8004848 <TIM_Base_SetConfig+0xd4>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d003      	beq.n	80047a4 <TIM_Base_SetConfig+0x30>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a2b      	ldr	r2, [pc, #172]	@ (800484c <TIM_Base_SetConfig+0xd8>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d108      	bne.n	80047b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	68fa      	ldr	r2, [r7, #12]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a22      	ldr	r2, [pc, #136]	@ (8004844 <TIM_Base_SetConfig+0xd0>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00b      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047c4:	d007      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a1f      	ldr	r2, [pc, #124]	@ (8004848 <TIM_Base_SetConfig+0xd4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d003      	beq.n	80047d6 <TIM_Base_SetConfig+0x62>
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	4a1e      	ldr	r2, [pc, #120]	@ (800484c <TIM_Base_SetConfig+0xd8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d108      	bne.n	80047e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	689a      	ldr	r2, [r3, #8]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a0d      	ldr	r2, [pc, #52]	@ (8004844 <TIM_Base_SetConfig+0xd0>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d103      	bne.n	800481c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	611a      	str	r2, [r3, #16]
  }
}
 800483a:	bf00      	nop
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	bc80      	pop	{r7}
 8004842:	4770      	bx	lr
 8004844:	40012c00 	.word	0x40012c00
 8004848:	40000400 	.word	0x40000400
 800484c:	40000800 	.word	0x40000800

08004850 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0201 	bic.w	r2, r3, #1
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f023 0303 	bic.w	r3, r3, #3
 8004886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	f023 0302 	bic.w	r3, r3, #2
 8004898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a1c      	ldr	r2, [pc, #112]	@ (8004918 <TIM_OC1_SetConfig+0xc8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d10c      	bne.n	80048c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f023 0308 	bic.w	r3, r3, #8
 80048b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	4313      	orrs	r3, r2
 80048bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f023 0304 	bic.w	r3, r3, #4
 80048c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a13      	ldr	r2, [pc, #76]	@ (8004918 <TIM_OC1_SetConfig+0xc8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d111      	bne.n	80048f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80048dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	695b      	ldr	r3, [r3, #20]
 80048e2:	693a      	ldr	r2, [r7, #16]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	699b      	ldr	r3, [r3, #24]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68fa      	ldr	r2, [r7, #12]
 80048fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	621a      	str	r2, [r3, #32]
}
 800490c:	bf00      	nop
 800490e:	371c      	adds	r7, #28
 8004910:	46bd      	mov	sp, r7
 8004912:	bc80      	pop	{r7}
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	40012c00 	.word	0x40012c00

0800491c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800491c:	b480      	push	{r7}
 800491e:	b087      	sub	sp, #28
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a1b      	ldr	r3, [r3, #32]
 8004930:	f023 0210 	bic.w	r2, r3, #16
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800494a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	021b      	lsls	r3, r3, #8
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	f023 0320 	bic.w	r3, r3, #32
 8004966:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	697a      	ldr	r2, [r7, #20]
 8004970:	4313      	orrs	r3, r2
 8004972:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a1d      	ldr	r2, [pc, #116]	@ (80049ec <TIM_OC2_SetConfig+0xd0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10d      	bne.n	8004998 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004996:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a14      	ldr	r2, [pc, #80]	@ (80049ec <TIM_OC2_SetConfig+0xd0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d113      	bne.n	80049c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80049a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80049ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	695b      	ldr	r3, [r3, #20]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	693a      	ldr	r2, [r7, #16]
 80049c4:	4313      	orrs	r3, r2
 80049c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	693a      	ldr	r2, [r7, #16]
 80049cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	621a      	str	r2, [r3, #32]
}
 80049e2:	bf00      	nop
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr
 80049ec:	40012c00 	.word	0x40012c00

080049f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	69db      	ldr	r3, [r3, #28]
 8004a16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f023 0303 	bic.w	r3, r3, #3
 8004a26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004a38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a1d      	ldr	r2, [pc, #116]	@ (8004ac0 <TIM_OC3_SetConfig+0xd0>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10d      	bne.n	8004a6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004a54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	021b      	lsls	r3, r3, #8
 8004a5c:	697a      	ldr	r2, [r7, #20]
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a14      	ldr	r2, [pc, #80]	@ (8004ac0 <TIM_OC3_SetConfig+0xd0>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d113      	bne.n	8004a9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004a78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004a80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	011b      	lsls	r3, r3, #4
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	693a      	ldr	r2, [r7, #16]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	693a      	ldr	r2, [r7, #16]
 8004a9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68fa      	ldr	r2, [r7, #12]
 8004aa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685a      	ldr	r2, [r3, #4]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	621a      	str	r2, [r3, #32]
}
 8004ab4:	bf00      	nop
 8004ab6:	371c      	adds	r7, #28
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40012c00 	.word	0x40012c00

08004ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b087      	sub	sp, #28
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69db      	ldr	r3, [r3, #28]
 8004aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	021b      	lsls	r3, r3, #8
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	031b      	lsls	r3, r3, #12
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a0f      	ldr	r2, [pc, #60]	@ (8004b5c <TIM_OC4_SetConfig+0x98>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d109      	bne.n	8004b38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004b2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	019b      	lsls	r3, r3, #6
 8004b32:	697a      	ldr	r2, [r7, #20]
 8004b34:	4313      	orrs	r3, r2
 8004b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bc80      	pop	{r7}
 8004b5a:	4770      	bx	lr
 8004b5c:	40012c00 	.word	0x40012c00

08004b60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b087      	sub	sp, #28
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2201      	movs	r2, #1
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6a1a      	ldr	r2, [r3, #32]
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	43db      	mvns	r3, r3
 8004b82:	401a      	ands	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	6a1a      	ldr	r2, [r3, #32]
 8004b8c:	68bb      	ldr	r3, [r7, #8]
 8004b8e:	f003 031f 	and.w	r3, r3, #31
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	fa01 f303 	lsl.w	r3, r1, r3
 8004b98:	431a      	orrs	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	621a      	str	r2, [r3, #32]
}
 8004b9e:	bf00      	nop
 8004ba0:	371c      	adds	r7, #28
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bc80      	pop	{r7}
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d101      	bne.n	8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bbc:	2302      	movs	r3, #2
 8004bbe:	e046      	b.n	8004c4e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685b      	ldr	r3, [r3, #4]
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004be6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a16      	ldr	r2, [pc, #88]	@ (8004c58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00e      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c0c:	d009      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a12      	ldr	r2, [pc, #72]	@ (8004c5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a10      	ldr	r2, [pc, #64]	@ (8004c60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d10c      	bne.n	8004c3c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bc80      	pop	{r7}
 8004c56:	4770      	bx	lr
 8004c58:	40012c00 	.word	0x40012c00
 8004c5c:	40000400 	.word	0x40000400
 8004c60:	40000800 	.word	0x40000800

08004c64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b082      	sub	sp, #8
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e042      	b.n	8004cfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d106      	bne.n	8004c90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7fd fa14 	bl	80020b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2224      	movs	r2, #36	@ 0x24
 8004c94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68da      	ldr	r2, [r3, #12]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ca6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f000 f82b 	bl	8004d04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	691a      	ldr	r2, [r3, #16]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	695a      	ldr	r2, [r3, #20]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ccc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68da      	ldr	r2, [r3, #12]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004cdc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3708      	adds	r7, #8
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	68da      	ldr	r2, [r3, #12]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004d3e:	f023 030c 	bic.w	r3, r3, #12
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6812      	ldr	r2, [r2, #0]
 8004d46:	68b9      	ldr	r1, [r7, #8]
 8004d48:	430b      	orrs	r3, r1
 8004d4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	430a      	orrs	r2, r1
 8004d60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a2c      	ldr	r2, [pc, #176]	@ (8004e18 <UART_SetConfig+0x114>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d103      	bne.n	8004d74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004d6c:	f7ff f9ec 	bl	8004148 <HAL_RCC_GetPCLK2Freq>
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	e002      	b.n	8004d7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004d74:	f7ff f9d4 	bl	8004120 <HAL_RCC_GetPCLK1Freq>
 8004d78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009a      	lsls	r2, r3, #2
 8004d84:	441a      	add	r2, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d90:	4a22      	ldr	r2, [pc, #136]	@ (8004e1c <UART_SetConfig+0x118>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	0119      	lsls	r1, r3, #4
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	4413      	add	r3, r2
 8004da2:	009a      	lsls	r2, r3, #2
 8004da4:	441a      	add	r2, r3
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004db0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e1c <UART_SetConfig+0x118>)
 8004db2:	fba3 0302 	umull	r0, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2064      	movs	r0, #100	@ 0x64
 8004dba:	fb00 f303 	mul.w	r3, r0, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	3332      	adds	r3, #50	@ 0x32
 8004dc4:	4a15      	ldr	r2, [pc, #84]	@ (8004e1c <UART_SetConfig+0x118>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004dd0:	4419      	add	r1, r3
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	4413      	add	r3, r2
 8004dda:	009a      	lsls	r2, r3, #2
 8004ddc:	441a      	add	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004de8:	4b0c      	ldr	r3, [pc, #48]	@ (8004e1c <UART_SetConfig+0x118>)
 8004dea:	fba3 0302 	umull	r0, r3, r3, r2
 8004dee:	095b      	lsrs	r3, r3, #5
 8004df0:	2064      	movs	r0, #100	@ 0x64
 8004df2:	fb00 f303 	mul.w	r3, r0, r3
 8004df6:	1ad3      	subs	r3, r2, r3
 8004df8:	011b      	lsls	r3, r3, #4
 8004dfa:	3332      	adds	r3, #50	@ 0x32
 8004dfc:	4a07      	ldr	r2, [pc, #28]	@ (8004e1c <UART_SetConfig+0x118>)
 8004dfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	f003 020f 	and.w	r2, r3, #15
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40013800 	.word	0x40013800
 8004e1c:	51eb851f 	.word	0x51eb851f

08004e20 <memset>:
 8004e20:	4603      	mov	r3, r0
 8004e22:	4402      	add	r2, r0
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d100      	bne.n	8004e2a <memset+0xa>
 8004e28:	4770      	bx	lr
 8004e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2e:	e7f9      	b.n	8004e24 <memset+0x4>

08004e30 <__libc_init_array>:
 8004e30:	b570      	push	{r4, r5, r6, lr}
 8004e32:	2600      	movs	r6, #0
 8004e34:	4d0c      	ldr	r5, [pc, #48]	@ (8004e68 <__libc_init_array+0x38>)
 8004e36:	4c0d      	ldr	r4, [pc, #52]	@ (8004e6c <__libc_init_array+0x3c>)
 8004e38:	1b64      	subs	r4, r4, r5
 8004e3a:	10a4      	asrs	r4, r4, #2
 8004e3c:	42a6      	cmp	r6, r4
 8004e3e:	d109      	bne.n	8004e54 <__libc_init_array+0x24>
 8004e40:	f000 f81a 	bl	8004e78 <_init>
 8004e44:	2600      	movs	r6, #0
 8004e46:	4d0a      	ldr	r5, [pc, #40]	@ (8004e70 <__libc_init_array+0x40>)
 8004e48:	4c0a      	ldr	r4, [pc, #40]	@ (8004e74 <__libc_init_array+0x44>)
 8004e4a:	1b64      	subs	r4, r4, r5
 8004e4c:	10a4      	asrs	r4, r4, #2
 8004e4e:	42a6      	cmp	r6, r4
 8004e50:	d105      	bne.n	8004e5e <__libc_init_array+0x2e>
 8004e52:	bd70      	pop	{r4, r5, r6, pc}
 8004e54:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e58:	4798      	blx	r3
 8004e5a:	3601      	adds	r6, #1
 8004e5c:	e7ee      	b.n	8004e3c <__libc_init_array+0xc>
 8004e5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e62:	4798      	blx	r3
 8004e64:	3601      	adds	r6, #1
 8004e66:	e7f2      	b.n	8004e4e <__libc_init_array+0x1e>
 8004e68:	08004ebc 	.word	0x08004ebc
 8004e6c:	08004ebc 	.word	0x08004ebc
 8004e70:	08004ebc 	.word	0x08004ebc
 8004e74:	08004ec0 	.word	0x08004ec0

08004e78 <_init>:
 8004e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e7a:	bf00      	nop
 8004e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7e:	bc08      	pop	{r3}
 8004e80:	469e      	mov	lr, r3
 8004e82:	4770      	bx	lr

08004e84 <_fini>:
 8004e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e86:	bf00      	nop
 8004e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e8a:	bc08      	pop	{r3}
 8004e8c:	469e      	mov	lr, r3
 8004e8e:	4770      	bx	lr
